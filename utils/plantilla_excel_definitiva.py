"""
Plantilla Excel DEFINITIVA - Versi√≥n completa y profesional
Compatible 100% con el sidebar de la aplicaci√≥n
Con f√≥rmulas, validaciones e instrucciones claras
"""

import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from datetime import datetime
from io import BytesIO

# Constantes de estilo
AZUL_OSCURO = "1E3A8A"
GRIS_CLARO = "F3F4F6"
VERDE = "10B981"

def crear_plantilla_definitiva():
    """
    Crea la plantilla Excel definitiva con todos los campos necesarios
    """
    wb = Workbook()
    a√±o_actual = datetime.now().year
    
    # Estilos
    estilo_titulo = Font(bold=True, size=14, color="FFFFFF")
    fondo_titulo = PatternFill(start_color=AZUL_OSCURO, end_color=AZUL_OSCURO, fill_type="solid")
    estilo_encabezado = Font(bold=True, size=11)
    fondo_encabezado = PatternFill(start_color=GRIS_CLARO, end_color=GRIS_CLARO, fill_type="solid")
    
    # HOJA 1: Instrucciones
    ws_instrucciones = wb.active
    ws_instrucciones.title = "INSTRUCCIONES"
    
    instrucciones = [
        ["PLANTILLA DE CAPTURA DE DATOS FINANCIEROS"],
        [""],
        ["üìã C√ìMO USAR ESTA PLANTILLA:"],
        [""],
        ["1. LEA ESTAS INSTRUCCIONES COMPLETAS ANTES DE EMPEZAR"],
        ["2. Complete las hojas en el siguiente orden:"],
        ["   ‚Ä¢ Info_General: Datos b√°sicos de la empresa"],
        ["   ‚Ä¢ PYL_Historico: Ventas y gastos de los √∫ltimos 3 a√±os"],
        ["   ‚Ä¢ Balance_Activo: Activos de la empresa"],
        ["   ‚Ä¢ Balance_Pasivo: Pasivos y deudas"],
        ["   ‚Ä¢ Balance_Patrimonio: Capital y reservas"],
        ["   ‚Ä¢ Datos_Laborales: Informaci√≥n de empleados"],
        ["   ‚Ä¢ Lineas_Financiacion: Todas las l√≠neas de cr√©dito"],
        ["   ‚Ä¢ Parametros: Par√°metros para proyecciones"],
        [""],
        ["‚ö†Ô∏è IMPORTANTE:"],
        ["‚Ä¢ Use valores 0 donde no haya datos (no deje celdas vac√≠as)"],
        ["‚Ä¢ La depreciaci√≥n debe ser NEGATIVA"],
        ["‚Ä¢ El balance debe cuadrar: Activos = Pasivos + Patrimonio"],
        ["‚Ä¢ Guarde el archivo como .xlsx"],
        [""],
        ["‚úÖ VERIFICACI√ìN:"],
        ["‚Ä¢ En la hoja Balance_Check puede verificar si el balance cuadra"],
        ["‚Ä¢ Los valores en amarillo se calculan autom√°ticamente"],
        ["‚Ä¢ Los valores en blanco debe introducirlos usted"]
    ]
    
    for row_idx, instruccion in enumerate(instrucciones, 1):
        if instruccion:
            ws_instrucciones.cell(row=row_idx, column=1, value=instruccion[0])
            if row_idx == 1:
                ws_instrucciones.cell(row=row_idx, column=1).font = Font(bold=True, size=16, color=AZUL_OSCURO)
            elif "üìã" in instruccion[0] or "‚ö†Ô∏è" in instruccion[0] or "‚úÖ" in instruccion[0]:
                ws_instrucciones.cell(row=row_idx, column=1).font = Font(bold=True, size=12)
    
    ws_instrucciones.column_dimensions['A'].width = 80
    
    # Esta es la estructura base. Continuaremos agregando las dem√°s hojas...
    
    return guardar_workbook_a_bytes(wb)

def guardar_workbook_a_bytes(wb):
    """Convierte el workbook a BytesIO para descarga"""
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return output

# Funci√≥n temporal para test
if __name__ == "__main__":
    print("‚úÖ M√≥dulo de plantilla definitiva creado")
    print("üìã Este archivo contendr√° la plantilla completa y profesional")

def agregar_hoja_info_general(wb, a√±o_actual):
    """Agrega la hoja de informaci√≥n general de la empresa"""
    ws = wb.create_sheet("Info_General")
    
    # Datos a capturar
    datos = [
        ["Campo", "Valor", "Instrucciones"],
        ["Nombre de la empresa", "", "Raz√≥n social completa"],
        ["Sector", "Tecnolog√≠a", "Tecnolog√≠a/Industrial/Retail/Servicios/Otro"],
        ["Pa√≠s", "Espa√±a", "Espa√±a/Francia/Portugal/Italia/Alemania/Reino Unido/Otro"],
        ["A√±o de Fundaci√≥n", a√±o_actual - 5, f"Entre 1900 y {a√±o_actual}"],
        ["¬øEmpresa familiar?", "No", "Escriba: S√≠ o No"],
        ["¬øCuentas auditadas?", "S√≠", "Escriba: S√≠ o No"],
        ["Moneda", "EUR", "EUR/USD/GBP"],
        ["", "", ""],
        ["--- DESCRIPCI√ìN DEL NEGOCIO ---", "", "Secci√≥n nueva - Importante para an√°lisis"],
        ["Descripci√≥n de la Actividad", "", "¬øQu√© hace la empresa? (m√°x 500 caracteres)"],
        ["Productos/Servicios Principales", "", "Lista sus principales productos o servicios"],
        ["Cuota de Mercado (%)", 0, "Porcentaje estimado en su segmento (0-100)"],
        ["Posicionamiento de Precios", "Medio", "Premium/Medio/Low-cost"],
        ["Ventajas Competitivas", "", "Principales diferenciadores vs competencia"],
        ["Clientes Objetivo", "", "Descripci√≥n del segmento de clientes"]
    ]
    
    # Escribir datos
    for row_idx, row_data in enumerate(datos, 1):
        for col_idx, value in enumerate(row_data, 1):
            cell = ws.cell(row=row_idx, column=col_idx, value=value)
            
            # Formato encabezados
            if row_idx == 1:
                cell.font = Font(bold=True, size=11, color="FFFFFF")
                cell.fill = PatternFill(start_color=AZUL_OSCURO, end_color=AZUL_OSCURO, fill_type="solid")
            
            # Formato separadores
            if "---" in str(value):
                cell.font = Font(bold=True, size=10)
                cell.fill = PatternFill(start_color=GRIS_CLARO, end_color=GRIS_CLARO, fill_type="solid")
    
    # Ajustar anchos de columna
    ws.column_dimensions['A'].width = 35
    ws.column_dimensions['B'].width = 40
    ws.column_dimensions['C'].width = 50
    
    return ws

def agregar_hoja_pyl_historico(wb, a√±o_actual):
    """Agrega la hoja de P&L hist√≥rico con estructura correcta para importaci√≥n"""
    ws = wb.create_sheet("Datos_Historicos_PYL")
    
    # Encabezados
    ws['A1'] = "Concepto"
    ws['B1'] = str(a√±o_actual - 2)
    ws['C1'] = str(a√±o_actual - 1)
    ws['D1'] = str(a√±o_actual)
    
    # Conceptos del P&L
    conceptos = [
        "Ventas",
        "Costos Variables (%)",
        "Gastos de Personal",
        "Gastos Generales",
        "Gastos de Marketing"
    ]
    
    # Escribir conceptos
    for idx, concepto in enumerate(conceptos, 2):
        ws[f'A{idx}'] = concepto
        ws[f'B{idx}'] = 0
        ws[f'C{idx}'] = 0
        ws[f'D{idx}'] = 0
    
    # Formato especial para el porcentaje
    ws['B3'] = 40  # % por defecto
    ws['C3'] = "=B3"
    ws['D3'] = "=B3"
    
    # Agregar fila de EBITDA calculado
    ws['A8'] = "EBITDA (calculado)"
    ws['B8'] = "=B2*(1-B3/100)-B4-B5-B6"
    ws['C8'] = "=C2*(1-C3/100)-C4-C5-C6"
    ws['D8'] = "=D2*(1-D3/100)-D4-D5-D6"
    
    # Agregar margen EBITDA
    ws['A9'] = "Margen EBITDA (%)"
    ws['B9'] = "=IF(B2>0,B8/B2*100,0)"
    ws['C9'] = "=IF(C2>0,C8/C2*100,0)"
    ws['D9'] = "=IF(D2>0,D8/D2*100,0)"
    
    # Formato
    for cell in [ws['A1'], ws['B1'], ws['C1'], ws['D1']]:
        cell.font = Font(bold=True, color="FFFFFF")
        cell.fill = PatternFill(start_color=AZUL_OSCURO, end_color=AZUL_OSCURO, fill_type="solid")
    
    # Resaltar celdas calculadas
    for row in [8, 9]:
        for col in ['B', 'C', 'D']:
            ws[f'{col}{row}'].fill = PatternFill(start_color="FFEB9C", end_color="FFEB9C", fill_type="solid")
            ws[f'{col}{row}'].font = Font(italic=True)
    
    # Anchos de columna
    ws.column_dimensions['A'].width = 25
    ws.column_dimensions['B'].width = 15
    ws.column_dimensions['C'].width = 15
    ws.column_dimensions['D'].width = 15
    
    return ws

def agregar_hojas_balance(wb, a√±o_actual):
    """Agrega las 3 hojas del balance con f√≥rmulas de cuadre"""
    
    # HOJA BALANCE - ACTIVO
    ws_activo = wb.create_sheet("Balance_Activo")
    
    activos = [
        ["Concepto", f"Valor {a√±o_actual}", "Notas"],
        ["--- ACTIVO CORRIENTE ---", "", ""],
        ["Tesorer√≠a", 0, "Efectivo y equivalentes"],
        ["Inversiones financieras CP", 0, "Inversiones < 1 a√±o"],
        ["Clientes", 0, "Cuentas por cobrar"],
        ["Inventario", 0, "Stock de productos"],
        ["Otros deudores", 0, "Otros deudores comerciales"],
        ["Administraci√≥n P√∫blica deudora", 0, "Hacienda deudora, devoluciones"],
        ["Gastos anticipados", 0, "Seguros, alquileres prepagados"],
        ["Activos por impuesto diferido CP", 0, "Cr√©ditos fiscales corto plazo"],
        ["TOTAL ACTIVO CORRIENTE", "=SUM(B3:B10)", "Calculado autom√°ticamente"],
        ["", "", ""],
        ["--- ACTIVO NO CORRIENTE ---", "", ""],
        ["Activo fijo bruto", 0, "Inmuebles, maquinaria, equipos"],
        ["Depreciaci√≥n acumulada", 0, "DEBE SER NEGATIVO"],
        ["Activo fijo neto", "=B14+B15", "Calculado autom√°ticamente"],
        ["Activos intangibles brutos", 0, "Software, marcas, patentes"],
        ["Amortizaci√≥n acumulada intangibles", 0, "DEBE SER NEGATIVO"],
        ["Activos intangibles netos", "=B17+B18", "Calculado autom√°ticamente"],
        ["Inversiones financieras LP", 0, "Inversiones > 1 a√±o"],
        ["Cr√©ditos a largo plazo", 0, "Pr√©stamos concedidos LP"],
        ["Fianzas y dep√≥sitos", 0, "Fianzas constituidas"],
        ["Activos por impuesto diferido LP", 0, "Cr√©ditos fiscales largo plazo"],
        ["TOTAL ACTIVO NO CORRIENTE", "=B16+B19+SUM(B20:B23)", "Calculado autom√°ticamente"],
        ["", "", ""],
        ["TOTAL ACTIVOS", "=B11+B24", "ESTE VALOR DEBE COINCIDIR CON TOTAL PASIVO + PATRIMONIO"]
    ]
    
    escribir_datos_hoja(ws_activo, activos)
    formatear_totales(ws_activo, [11, 24, 26])
    resaltar_celdas_formula(ws_activo, [11, 16, 19, 24, 26])
    
    # HOJA BALANCE - PASIVO
    ws_pasivo = wb.create_sheet("Balance_Pasivo")
    
    pasivos = [
        ["Concepto", f"Valor {a√±o_actual}", "Notas"],
        ["--- PASIVO CORRIENTE ---", "", ""],
        ["Proveedores", 0, "Facturas pendientes de pago"],
        ["Acreedores por servicios", 0, "Otros acreedores comerciales"],
        ["Anticipos de clientes", 0, "Cobros anticipados"],
        ["Remuneraciones pendientes", 0, "Salarios pendientes"],
        ["Administraci√≥n P√∫blica acreedora", 0, "IRPF, SS pendientes"],
        ["Provisiones CP", 0, "Provisiones varias"],
        ["Deuda financiera CP", 0, "Pr√©stamos y l√≠neas < 1 a√±o"],
        ["TOTAL PASIVO CORRIENTE", "=SUM(B3:B9)", "Calculado autom√°ticamente"],
        ["", "", ""],
        ["--- PASIVO NO CORRIENTE ---", "", ""],
        ["Pr√©stamos LP - Importe original", 0, "Importe inicial del pr√©stamo"],
        ["Pr√©stamos LP - A√±os transcurridos", 0, "A√±os ya pagados"],
        ["Hipotecas - Importe original", 0, "Importe inicial hipoteca"],
        ["Hipotecas - Meses transcurridos", 0, "Meses ya pagados"],
        ["Leasing - Importe total", 0, "Valor total del bien"],
        ["Leasing - Meses pendientes", 0, "Meses que quedan"],
        ["Otros pr√©stamos LP", 0, "Otros pr√©stamos bancarios"],
        ["Provisiones para riesgos LP", 0, "Contingencias LP"],
        ["Pasivos por impuesto diferido", 0, "Pasivos fiscales diferidos"],
        ["TOTAL PASIVO NO CORRIENTE", "=SUM(B13,B15,B17:B21)", "Calculado autom√°ticamente"],
        ["", "", ""],
        ["TOTAL PASIVOS", "=B10+B22", "Suma pasivo corriente + no corriente"]
    ]
    
    escribir_datos_hoja(ws_pasivo, pasivos)
    formatear_totales(ws_pasivo, [10, 22, 24])
    resaltar_celdas_formula(ws_pasivo, [10, 22, 24])
    
    # HOJA BALANCE - PATRIMONIO
    ws_patrimonio = wb.create_sheet("Balance_Patrimonio")
    
    patrimonio = [
        ["Concepto", f"Valor {a√±o_actual}", "Notas"],
        ["Capital social", 0, "Capital desembolsado"],
        ["Prima de emisi√≥n", 0, "Prima sobre nominal"],
        ["Reserva legal", 0, "10% del capital social"],
        ["Otras reservas", 0, "Reservas voluntarias"],
        ["Resultados acumulados", 0, "Beneficios a√±os anteriores"],
        ["Resultado del ejercicio", 0, "Resultado a√±o actual"],
        ["Ajustes por cambios de valor", 0, "Ajustes valoraci√≥n"],
        ["", "", ""],
        ["TOTAL PATRIMONIO NETO", "=SUM(B2:B8)", "ACTIVOS - PASIVOS = PATRIMONIO"]
    ]
    
    escribir_datos_hoja(ws_patrimonio, patrimonio)
    formatear_totales(ws_patrimonio, [10])
    resaltar_celdas_formula(ws_patrimonio, [10])
    
    return ws_activo, ws_pasivo, ws_patrimonio

def escribir_datos_hoja(ws, datos):
    """Escribe los datos en la hoja"""
    for row_idx, row_data in enumerate(datos, 1):
        for col_idx, value in enumerate(row_data, 1):
            cell = ws.cell(row=row_idx, column=col_idx, value=value)
            
            # Formato encabezados
            if row_idx == 1:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color=AZUL_OSCURO, end_color=AZUL_OSCURO, fill_type="solid")
            
            # Formato separadores
            elif "---" in str(value):
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color=GRIS_CLARO, end_color=GRIS_CLARO, fill_type="solid")
    
    # Ajustar anchos
    ws.column_dimensions['A'].width = 35
    ws.column_dimensions['B'].width = 20
    ws.column_dimensions['C'].width = 40

def formatear_totales(ws, filas):
    """Aplica formato especial a las filas de totales"""
    for fila in filas:
        ws[f'A{fila}'].font = Font(bold=True, size=11)
        ws[f'B{fila}'].font = Font(bold=True, size=11)

def resaltar_celdas_formula(ws, filas):
    """Resalta las celdas con f√≥rmulas"""
    for fila in filas:
        ws[f'B{fila}'].fill = PatternFill(start_color="FFEB9C", end_color="FFEB9C", fill_type="solid")

def agregar_hoja_datos_laborales(wb):
    """Agrega la hoja de datos laborales"""
    ws = wb.create_sheet("Datos_Laborales")
    
    datos = [
        ["Concepto", "Valor", "Notas"],
        ["--- PLANTILLA ACTUAL ---", "", ""],
        ["N√∫mero de empleados", 0, "Total empleados actuales"],
        ["Coste medio por empleado (‚Ç¨/a√±o)", 0, "Salario bruto + cargas sociales"],
        ["Antig√ºedad media (a√±os)", 0, "Media de a√±os en la empresa"],
        ["Rotaci√≥n anual (%)", 0, "Porcentaje de rotaci√≥n esperada"],
        ["", "", ""],
        ["--- REESTRUCTURACI√ìN (si aplica) ---", "", ""],
        ["% plantilla afectada", 0, "Dejar 0 si no hay reestructuraci√≥n"],
        ["D√≠as indemnizaci√≥n por a√±o", 0, "20, 33, 45 o especificar"],
        ["", "", ""],
        ["--- PROVISIONES M&A ---", "", ""],
        ["Provisi√≥n para litigios", 0, "Contingencias laborales"],
        ["Provisi√≥n fiscal", 0, "Contingencias fiscales"]
    ]
    
    escribir_datos_hoja(ws, datos)
    return ws

def agregar_hoja_lineas_financiacion(wb):
    """Agrega la hoja de l√≠neas de financiaci√≥n con m√∫ltiples filas por tipo"""
    ws = wb.create_sheet("Lineas_Financiacion")
    
    # Encabezados
    encabezados = ["Tipo de L√≠nea", "Banco", "L√≠mite", "Dispuesto", "Tipo (%)", "Comisi√≥n (%)"]
    for col_idx, encabezado in enumerate(encabezados, 1):
        cell = ws.cell(row=1, column=col_idx, value=encabezado)
        cell.font = Font(bold=True, color="FFFFFF")
        cell.fill = PatternFill(start_color=AZUL_OSCURO, end_color=AZUL_OSCURO, fill_type="solid")
    
    # Tipos de l√≠neas (3 filas para cada tipo)
    tipos_lineas = [
        "P√≥liza de Cr√©dito",
        "P√≥liza Cr√©dito Stock",
        "Descuento Comercial",
        "Anticipo de Facturas",
        "Factoring con Recurso",
        "Factoring sin Recurso",
        "Confirming Proveedores",
        "Pagar√©s Empresa",
        "Cr√©dito Importaci√≥n"
    ]
    
    row_idx = 2
    for tipo in tipos_lineas:
        # Primera l√≠nea con el nombre del tipo
        ws.cell(row=row_idx, column=1, value=tipo)
        for col in range(2, 7):
            ws.cell(row=row_idx, column=col, value=0 if col > 2 else "")
        row_idx += 1
        
        # Dos l√≠neas adicionales vac√≠as para el mismo tipo
        for _ in range(2):
            ws.cell(row=row_idx, column=1, value="")
            for col in range(2, 7):
                ws.cell(row=row_idx, column=col, value=0 if col > 2 else "")
            row_idx += 1
    
    # L√≠neas adicionales para otros tipos
    ws.cell(row=row_idx, column=1, value="--- OTRAS L√çNEAS ---")
    for col in range(1, 7):
        ws.cell(row=row_idx, column=col).fill = PatternFill(start_color=GRIS_CLARO, end_color=GRIS_CLARO, fill_type="solid")
    
    # Ajustar anchos
    ws.column_dimensions['A'].width = 25
    ws.column_dimensions['B'].width = 20
    ws.column_dimensions['C'].width = 15
    ws.column_dimensions['D'].width = 15
    ws.column_dimensions['E'].width = 10
    ws.column_dimensions['F'].width = 12
    
    return ws

def agregar_hoja_parametros(wb):
    """Agrega la hoja de par√°metros de proyecci√≥n"""
    ws = wb.create_sheet("Proyecciones_Parametros")
    
    datos = [
        ["Par√°metro", "Valor", "Referencia"],
        ["--- PAR√ÅMETROS OPERATIVOS ---", "", ""],
        ["D√≠as de cobro (DSO)", 60, "Media sector: 60-90 d√≠as"],
        ["D√≠as de pago (DPO)", 45, "Media sector: 30-60 d√≠as"],
        ["D√≠as de inventario", 30, "Seg√∫n tipo de negocio"],
        ["", "", ""],
        ["--- CRECIMIENTO DE VENTAS ---", "", ""],
        ["Crecimiento A√±o 1 (%)", 10, "Sobre a√±o actual"],
        ["Crecimiento A√±o 2 (%)", 8, "Sobre a√±o 1"],
        ["Crecimiento A√±o 3 (%)", 6, "Sobre a√±o 2"],
        ["Crecimiento A√±o 4 (%)", 5, "Sobre a√±o 3"],
        ["Crecimiento A√±o 5 (%)", 4, "Sobre a√±o 4"],
        ["", "", ""],
        ["--- INVERSIONES (CAPEX) ---", "", ""],
        ["CAPEX A√±o 1", 0, "Inversi√≥n en activos fijos"],
        ["CAPEX A√±o 2", 0, "Inversi√≥n en activos fijos"],
        ["CAPEX A√±o 3", 0, "Inversi√≥n en activos fijos"],
        ["CAPEX A√±o 4", 0, "Inversi√≥n en activos fijos"],
        ["CAPEX A√±o 5", 0, "Inversi√≥n en activos fijos"],
        ["", "", ""],
        ["--- EVOLUCI√ìN PLANTILLA ---", "", ""],
        ["Nuevos empleados A√±o 1", 0, "Incremento neto de plantilla"],
        ["Nuevos empleados A√±o 2", 0, "Incremento neto de plantilla"],
        ["Nuevos empleados A√±o 3", 0, "Incremento neto de plantilla"],
        ["Nuevos empleados A√±o 4", 0, "Incremento neto de plantilla"],
        ["Nuevos empleados A√±o 5", 0, "Incremento neto de plantilla"]
    ]
    
    escribir_datos_hoja(ws, datos)
    return ws

def agregar_hoja_verificacion(wb):
    """Agrega una hoja de verificaci√≥n del balance"""
    ws = wb.create_sheet("Balance_Check")
    
    ws['A1'] = "VERIFICACI√ìN DE BALANCE"
    ws['A1'].font = Font(bold=True, size=14, color=AZUL_OSCURO)
    
    ws['A3'] = "RESUMEN"
    ws['A3'].font = Font(bold=True, size=12)
    
    ws['A5'] = "Total Activos:"
    ws['B5'] = "='Balance_Activo'!B26"
    
    ws['A6'] = "Total Pasivos:"
    ws['B6'] = "='Balance_Pasivo'!B24"
    
    ws['A7'] = "Total Patrimonio:"
    ws['B7'] = "='Balance_Patrimonio'!B10"
    
    ws['A9'] = "Pasivos + Patrimonio:"
    ws['B9'] = "=B6+B7"
    ws['B9'].font = Font(bold=True)
    
    ws['A11'] = "DIFERENCIA (debe ser 0):"
    ws['B11'] = "=B5-B9"
    ws['B11'].font = Font(bold=True, size=12)
    
    # Formato condicional manual
    ws['A13'] = "ESTADO:"
    ws['B13'] = '=IF(ABS(B11)<1,"‚úÖ BALANCE CUADRADO","‚ùå BALANCE DESCUADRADO")'
    ws['B13'].font = Font(bold=True, size=12)
    
    # Instrucciones
    ws['A15'] = "INSTRUCCIONES SI EL BALANCE NO CUADRA:"
    ws['A15'].font = Font(bold=True)
    
    instrucciones = [
        "1. Revise que todos los activos est√©n registrados",
        "2. Verifique que la depreciaci√≥n sea negativa",
        "3. Compruebe que todos los pasivos est√©n incluidos",
        "4. Aseg√∫rese de que el patrimonio est√© completo",
        "5. Revise los c√°lculos manuales"
    ]
    
    for idx, instruccion in enumerate(instrucciones, 17):
        ws[f'A{idx}'] = instruccion
    
    # Formato
    ws.column_dimensions['A'].width = 40
    ws.column_dimensions['B'].width = 25
    
    # Resaltar celdas importantes
    ws['B11'].fill = PatternFill(start_color="FFE6E6", end_color="FFE6E6", fill_type="solid")
    ws['B13'].fill = PatternFill(start_color="E6FFE6", end_color="E6FFE6", fill_type="solid")
    
    return ws

# Actualizar la funci√≥n principal para incluir todas las hojas
def crear_plantilla_definitiva():
    """
    Crea la plantilla Excel definitiva con todos los campos necesarios
    """
    wb = Workbook()
    a√±o_actual = datetime.now().year
    
    # Eliminar la hoja por defecto
    wb.remove(wb.active)
    
    # Agregar todas las hojas en orden
    agregar_hoja_instrucciones(wb)
    agregar_hoja_info_general(wb, a√±o_actual)
    agregar_hoja_pyl_historico(wb, a√±o_actual)
    agregar_hojas_balance(wb, a√±o_actual)
    agregar_hoja_datos_laborales(wb)
    agregar_hoja_lineas_financiacion(wb)
    agregar_hoja_parametros(wb)
    agregar_hoja_verificacion(wb)
    
    return guardar_workbook_a_bytes(wb)

def agregar_hoja_instrucciones(wb):
    """Agrega la hoja de instrucciones iniciales"""
    ws = wb.create_sheet("INSTRUCCIONES")
    
    instrucciones = [
        ["PLANTILLA DE CAPTURA DE DATOS FINANCIEROS - BUSINESS PLAN IA"],
        [""],
        ["üìã C√ìMO USAR ESTA PLANTILLA:"],
        [""],
        ["1. LEA ESTAS INSTRUCCIONES COMPLETAS"],
        ["2. Complete las hojas en orden:"],
        ["   ‚Ä¢ Info_General ‚Üí Informaci√≥n b√°sica de la empresa"],
        ["   ‚Ä¢ Datos_Historicos_PYL ‚Üí Ventas y gastos √∫ltimos 3 a√±os"],
        ["   ‚Ä¢ Balance_Activo ‚Üí Todos los activos"],
        ["   ‚Ä¢ Balance_Pasivo ‚Üí Todas las deudas"],
        ["   ‚Ä¢ Balance_Patrimonio ‚Üí Capital y reservas"],
        ["   ‚Ä¢ Datos_Laborales ‚Üí Informaci√≥n de empleados"],
        ["   ‚Ä¢ Lineas_Financiacion ‚Üí L√≠neas de cr√©dito activas"],
        ["   ‚Ä¢ Proyecciones_Parametros ‚Üí Par√°metros para proyecciones"],
        [""],
        ["‚ö†Ô∏è MUY IMPORTANTE:"],
        ["‚Ä¢ Use 0 donde no haya datos (NO deje celdas vac√≠as)"],
        ["‚Ä¢ La depreciaci√≥n/amortizaci√≥n debe ser NEGATIVA"],
        ["‚Ä¢ Las celdas amarillas se calculan autom√°ticamente"],
        ["‚Ä¢ Las celdas blancas requieren su entrada"],
        ["‚Ä¢ El balance debe cuadrar (verifique en Balance_Check)"],
        [""],
        ["‚úÖ ANTES DE IMPORTAR:"],
        ["‚Ä¢ Revise la hoja Balance_Check"],
        ["‚Ä¢ Aseg√∫rese de que muestre 'BALANCE CUADRADO'"],
        ["‚Ä¢ Guarde el archivo como .xlsx"],
        ["‚Ä¢ NO modifique los nombres de las hojas"],
        [""],
        ["üìß SOPORTE:"],
        ["‚Ä¢ Los valores en las columnas 'Notas' son informativos"],
        ["‚Ä¢ Complete SOLO las columnas 'Valor'"],
        ["‚Ä¢ Si tiene dudas, use los valores por defecto"]
    ]
    
    for row_idx, instruccion in enumerate(instrucciones, 1):
        if instruccion:
            cell = ws.cell(row=row_idx, column=1, value=instruccion[0])
            if row_idx == 1:
                cell.font = Font(bold=True, size=16, color=AZUL_OSCURO)
            elif any(x in instruccion[0] for x in ["üìã", "‚ö†Ô∏è", "‚úÖ", "üìß"]):
                cell.font = Font(bold=True, size=12)
    
    ws.column_dimensions['A'].width = 80
    return ws

# Test final
if __name__ == "__main__":
    excel = crear_plantilla_definitiva()
    with open("plantilla_definitiva_test.xlsx", "wb") as f:
        f.write(excel.getvalue())
    print("‚úÖ Plantilla definitiva completa creada")
    print("üìä Incluye:")
    print("  ‚Ä¢ Instrucciones claras")
    print("  ‚Ä¢ Todos los campos del sidebar")
    print("  ‚Ä¢ F√≥rmulas autom√°ticas")
    print("  ‚Ä¢ Verificaci√≥n de balance")
    print("  ‚Ä¢ Valores por defecto = 0")
