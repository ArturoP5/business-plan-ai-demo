"""
Business Plan IA - Interfaz Web
Genera proyecciones financieras profesionales para PYMEs
"""



# from utils.analisis_fortalezas_riesgos import generar_analisis_fortalezas_riesgos, generar_hoja_ruta_valor
import streamlit as st

# Configuraci√≥n de la p√°gina (debe ser lo primero)
st.set_page_config(
    page_title="ValuPro AI - Business Plan Generator",
    page_icon="assets/icon_favicon_32.png",
    layout="wide",
    initial_sidebar_state="expanded"
)
import pandas as pd
import io
import plotly.graph_objects as go
from datetime import datetime
from models.modelo_financiero import ModeloFinanciero
import math
from utils.pdf_generator import generar_pdf_ejecutivo
from utils.pdf_generator_pro import generar_pdf_profesional
from utils.api_data_collector import APIDataCollector
from utils.excel_handler import crear_plantilla_excel, leer_excel_datos
from utils.importar_excel_definitivo import importar_excel_definitivo
from utils.plantilla_excel_v2 import descargar_plantilla_v2
from utils.madurez_empresarial import calcular_factor_madurez, ajustar_proyecciones_por_madurez
from utils.data_capturer import guardar_datos_demo, capturar_datos_completos

# AUTENTICACI√ìN B√ÅSICA - Friends & Family Beta
def check_password():
    """Returns `True` if the user had the correct password."""
    # return True  # TEMPORAL: Deshabilitado para desarrollo
    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if st.session_state.get("password", "") == st.secrets.get("APP_PASSWORD", "V@luPr0!A#2024"):
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown("## üîê Bienvenido a ValuProIA")
            st.markdown("*Versi√≥n Beta - Acceso Friends & Family*")
            st.text_input(
                "Contrase√±a", 
                type="password", 
                on_change=password_entered, 
                key="password",
                help="M√≠nimo 10 caracteres con may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos"
            )
            
            # Sistema de recuperaci√≥n
            with st.expander("¬øOlvidaste la contrase√±a?"):
                st.info("""
                üìß **Opciones de recuperaci√≥n:**
                
                1. Contacta directamente:
                   - Email: arturo.pineiro@mac.com
                
                2. Pista: La contrase√±a incluye:
                   - El nombre de la app con s√≠mbolos
                   - El a√±o actual
                   - S√≠mbolos especiales (@, !, #)
                """)
        return False
    
    elif not st.session_state["password_correct"]:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown("## üîê Bienvenido a ValuProIA")
            st.text_input(
                "Contrase√±a", 
                type="password", 
                on_change=password_entered, 
                key="password"
            )
            st.error("üòï Contrase√±a incorrecta. Verifica may√∫sculas y s√≠mbolos.")
            
            if st.button("¬øNecesitas ayuda?"):
                st.info("üí° Contacta a arturo.pineiro@mac.com para obtener acceso")
        return False
    
    else:
        return True

# Verificar contrase√±a antes de mostrar la app
if not check_password():
    st.stop()

st.set_page_config(
    page_title="ValuProIA",
    page_icon="assets/icon_favicon_32.ico",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ==================== FUNCIONES HELPER ====================
def formato_numero(label, value=0, key=None, decimales=0, help_text=None, min_value=None, max_value=None):
    """Helper para inputs num√©ricos con formato consistente"""
    if decimales > 0:
        formato = f"%.{decimales}f"
        step = 10**(-decimales)
        value = float(value)
        min_value = float(min_value) if min_value is not None else None
        max_value = float(max_value) if max_value is not None else None
    else:
        formato = "%d"
        step = 1000 if value >= 10000 else 100
        value = int(value)
        min_value = int(min_value) if min_value is not None else None
        max_value = int(max_value) if max_value is not None else None
    
    return st.number_input(
        label,
        value=value,
        step=step,
        format=formato,
        key=key,
        help=help_text,
        min_value=min_value,
        max_value=max_value
    )
def formato_display(valor):
    """Formatea un n√∫mero con separadores de miles para display"""
    if valor >= 1000:
        return f"{valor:,.0f}".replace(",", ".")
    return f"{valor:.0f}"

def formato_porcentaje(label, value=0, key=None, help_text=None, min_value=0, max_value=100):
    """Helper para inputs de porcentaje"""
    return formato_numero(
        label + " (%)",
        value=value,
        key=key,
        decimales=2,
        help_text=help_text,
        min_value=min_value,
        max_value=max_value
    )

def get_simbolo_moneda():
    """Obtiene el s√≠mbolo de moneda actual"""
    return st.session_state.get('simbolo_moneda', '‚Ç¨')

# ========================================================

def mostrar_resumen_ejecutivo_profesional(num_empleados_actual=None, a√±o_fundacion_actual=None):
    """Muestra el resumen ejecutivo profesional mejorado"""
    
    if 'datos_guardados' not in st.session_state:
        st.error("No hay datos disponibles. Genera primero las proyecciones.")
        return
    
    datos = st.session_state.datos_guardados
    
    # Extraer datos necesarios
    empresa = datos['nombre_empresa']
    sector = datos['sector']
    
    # Umbrales de TIR por sector para rating
    umbrales_tir = {
        "industrial": {"excelente": 15, "bueno": 8, "aceptable": 4},
        "tecnologia": {"excelente": 25, "bueno": 15, "aceptable": 8},
        "hosteleria": {"excelente": 18, "bueno": 10, "aceptable": 5},
        "retail": {"excelente": 15, "bueno": 8, "aceptable": 4},
        "ecommerce": {"excelente": 20, "bueno": 12, "aceptable": 6},
        "servicios": {"excelente": 18, "bueno": 10, "aceptable": 5},
        "consultoria": {"excelente": 20, "bueno": 12, "aceptable": 6},
        "automocion": {"excelente": 12, "bueno": 7, "aceptable": 3},
    }
    
    # Obtener umbrales del sector o usar valores por defecto
    sector_lower = sector.lower() if sector else "servicios"
    umbrales = umbrales_tir.get(sector_lower, umbrales_tir["servicios"])
    valoracion_prof = datos.get('valoracion_profesional', {})
    metricas = datos.get('metricas', {})
    pyl = datos.get('pyl', datos.get('proyecciones', {}).get('pyl'))
    ratios = datos.get('ratios', datos.get('proyecciones', {}).get('ratios'))
    analisis_ia = datos.get('analisis_ia', {})
    resumen_cfo = analisis_ia.get('resumen_ejecutivo', None)
    balance = datos.get('balance', datos.get('proyecciones', {}).get('balance'))

    # Obtener valoraci√≥n real
    valor_empresa = valoracion_prof.get('valoracion_final', 0)
    tir_real = valoracion_prof.get('dcf_detalle', {}).get('tir', metricas.get('tir_proyecto', 0))
    
    # SNAPSHOT EJECUTIVO
    st.markdown("## üéØ **SNAPSHOT EJECUTIVO**")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "Valoraci√≥n Empresa",
            f"{get_simbolo_moneda()}{valor_empresa:,.0f}",
            delta=f"M√∫ltiplo {valor_empresa / (pyl["EBITDA"].iloc[-1] if "EBITDA" in pyl and pyl["EBITDA"].iloc[-1] > 0 else 1):.1f}x",
            help="Valor estimado de la empresa usando metodolog√≠a DCF McKinsey"
        )
    
    with col2:
        rating = "‚≠ê‚≠ê‚≠ê‚≠ê" if tir_real > umbrales["excelente"] else "‚≠ê‚≠ê‚≠ê" if tir_real > umbrales["bueno"] else "‚≠ê‚≠ê" if tir_real > umbrales["aceptable"] else "‚≠ê"
        st.metric("Rating Inversi√≥n", rating, help="Calificaci√≥n basada en TIR ajustada por sector")
    
    with col3:
        viabilidad = "üü¢ ALTA" if tir_real > umbrales["excelente"] else "üü° MEDIA" if tir_real > umbrales["bueno"] else "üî¥ BAJA"
        st.metric("Viabilidad", viabilidad, help="Evaluaci√≥n del potencial de √©xito basado en m√©tricas financieras")
        
    # Segunda fila de m√©tricas
    col4, col5, col6 = st.columns(3)
    
    with col4:
        st.metric("TIR Proyecto", f"{tir_real:.1f}%", help="Tasa Interna de Retorno: Rentabilidad anual esperada de la inversi√≥n")
        
        # Texto explicativo contextual para TIR
        if tir_real < umbrales["bueno"]:
            st.caption(f"üí° TIR {tir_real:.1f}% est√° por debajo del promedio del sector {sector} ({umbrales["bueno"]}%)")
        elif tir_real < umbrales["excelente"]:
            st.caption(f"‚úÖ TIR {tir_real:.1f}% dentro del rango esperado para {sector}")
        else:
            st.caption(f"üåü TIR {tir_real:.1f}% supera expectativas del sector {sector}")    
    with col5:
        # Calcular payback period real
        cash_flow = datos.get('cash_flow', {})
#         if 'Free Cash Flow' in cash_flow:
# #             fcf_values = cash_flow['Free Cash Flow'].values
#             
#             # Buscar CAPEX real del plan de inversiones
#             capex_total = 0
#             if 'modelo_params' in datos:
#                 plan_capex = datos.get('modelo_params', {}).get('plan_capex', [])
#                 if plan_capex:
#                     capex_total = sum([c.get('importe', 0) for c in plan_capex if c.get('a√±o') == 1])
#             
#             # Si no hay CAPEX en a√±o 1, buscar primera inversi√≥n significativa
#             if capex_total == 0 and fcf_values[0] >= 0:
#                 # No hay inversi√≥n inicial clara
#                 payback = "N/A - Sin inversi√≥n inicial"
#             else:
#                 # Usar FCF negativo del a√±o 0 o CAPEX como inversi√≥n inicial
#                 inversion_inicial = fcf_values[0] if fcf_values[0] < 0 else -capex_total
#                 
#                 # Calcular flujos acumulados
#                 acumulado = 0
#                 payback = None
#                 for i, flujo in enumerate(fcf_values[1:], 1):  # Empezar desde a√±o 1
#                     acumulado += flujo
#                     if inversion_inicial < 0 and acumulado >= abs(inversion_inicial):
#                         # Interpolaci√≥n para obtener el momento exacto
#                         flujo_faltante = abs(inversion_inicial) - (acumulado - flujo)
#                         fraccion_a√±o = flujo_faltante / flujo if flujo > 0 else 0
#                         payback = i - 1 + fraccion_a√±o
#                         break
#                 
#                 if payback is None:
#                     payback = ">5"  # No se recupera en 5 a√±os
#                 elif isinstance(payback, (int, float)):
#                     payback = f"{payback:.1f}"
#         else:
#             payback = "N/D"
#         
#         
#         st.metric("Payback CAPEX", f"{payback} a√±os", help="Tiempo para recuperar inversi√≥n en activos")
            
    with col5:
        # Calcular Payback Inversi√≥n (para el comprador)
        if valor_empresa > 0 and 'Free Cash Flow' in cash_flow:
            fcf_promedio = cash_flow['Free Cash Flow'][1:].mean()  # Promedio a√±os 1-5
            payback_inversion = valor_empresa / fcf_promedio if fcf_promedio > 0 else 999
            
            if payback_inversion < 999:
                payback_inv_text = f"{payback_inversion:.1f} a√±os"
            else:
                payback_inv_text = "N/D"
                
            # Agregar informaci√≥n adicional en el help
            help_text = f"Tiempo para recuperar precio de compra. Valoraci√≥n: ‚Ç¨{valor_empresa:,.0f}, FCF promedio: ‚Ç¨{fcf_promedio:,.0f}"
        else:
            payback_inv_text = "N/D"
            help_text = "Tiempo para recuperar precio de compra"
        
        st.metric("Payback Inversi√≥n", payback_inv_text, help=help_text)
        
    with col6:
        # Calcular ROI basado en el m√©todo de valoraci√≥n actual
        if "resultado_mck" in st.session_state and st.session_state.get("metodo_valoracion") == "mckinsey":
            valor_para_roi = st.session_state.resultado_mck.get("valor_empresa", valor_empresa)
        else:
            valor_para_roi = valor_empresa
        
        # ROI = Beneficio Neto Promedio / Valor Empresa
        beneficio_promedio = pyl["Beneficio Neto"].mean() if "Beneficio Neto" in pyl else 0
        roi = (beneficio_promedio / valor_para_roi * 100) if valor_para_roi > 0 else 0
        st.metric("ROI Esperado", f"{roi:.1f}%", help="ROI: Rentabilidad anual del negocio (Beneficio Neto / Valor Empresa)")
            
    # RESUMEN DE NEGOCIO
    st.markdown("---")
    st.markdown("### üìà **RESUMEN DE NEGOCIO**")   
    
    col_neg1, col_neg2 = st.columns(2)
    
    with col_neg1:
        st.markdown(f"""
        **{empresa}**  
        üìç Sector: {sector}  
        üë• Empleados: {st.session_state.get('num_empleados_sidebar', 10)}  
        üìÖ Fundada: {st.session_state.get('a√±o_fundacion_sidebar', 2020)}
        """)
    
    # Calcular m√©tricas hist√≥ricas reales
    datos_empresa = datos.get('datos_empresa', {})
    if datos_empresa and 'ventas_historicas' in datos_empresa:
        ventas_historicas = datos_empresa['ventas_historicas'][-1] if isinstance(datos_empresa['ventas_historicas'], list) else datos_empresa['ventas_historicas']
        costos_pct = datos_empresa.get('costos_variables_pct', 0)
        gastos_personal = datos_empresa.get('gastos_personal', 0)
        gastos_generales = datos_empresa.get('gastos_generales', 0)
        gastos_marketing = datos_empresa.get('gastos_marketing', 0)
        
        margen_bruto = ventas_historicas * (1 - costos_pct)
        ebitda_actual = margen_bruto - gastos_personal - gastos_generales - gastos_marketing
        margen_ebitda_actual = (ebitda_actual / ventas_historicas * 100) if ventas_historicas > 0 else 0
        ebitda_historico = margen_bruto - gastos_personal - gastos_generales - gastos_marketing
        margen_ebitda_historico = (ebitda_historico / ventas_historicas * 100) if ventas_historicas > 0 else 0
        
    else:
        # Obtener valores hist√≥ricos del sidebar - 100% din√°mico
        ventas_historicas = st.session_state.get('ventas_1', pyl['Ventas'].iloc[0])
        
        # Obtener todos los valores del sidebar usando las keys
        costos_pct = st.session_state.get('costos_variables_slider', 40) / 100
        gastos_personal = st.session_state.get('gastos_personal_key', 0)
        gastos_generales = st.session_state.get('gastos_generales_key', 0)
        gastos_marketing = st.session_state.get('gastos_marketing_key', 0)
        
        # Calcular EBITDA hist√≥rico con valores reales del sidebar
        margen_bruto = ventas_historicas * (1 - costos_pct)
        ebitda_historico = margen_bruto - gastos_personal - gastos_generales - gastos_marketing
        margen_ebitda_historico = (ebitda_historico / ventas_historicas * 100) if ventas_historicas > 0 else 0

    with col_neg2:
        st.markdown(f"""
        **Posici√≥n Financiera:**  
        üí∞ Ventas actuales: {get_simbolo_moneda()}{ventas_historicas:,.0f}  
        üìä EBITDA actual: {get_simbolo_moneda()}{ebitda_historico:,.0f}  
        üíµ Margen EBITDA: {margen_ebitda_historico:.1f}%
        """)
    
    # M√âTRICAS FINANCIERAS CLAVE
    st.markdown("---")
    st.markdown("### üí∞ **M√âTRICAS FINANCIERAS CLAVE**")
    
    # Crear tabla de evoluci√≥n
    metricas_tabla = pd.DataFrame({
        'M√©trica': ['Ventas (‚Ç¨k)', 'EBITDA (‚Ç¨k)', 'Margen EBITDA (%)', 'Cash Flow (‚Ç¨k)'],
        'Actual': [
            f"{ventas_historicas/1000:,.0f}",
            f"{ebitda_historico/1000:,.0f}",
            f"{margen_ebitda_historico:.1f}%",
            "N/A"  # No hay cash flow hist√≥rico
        ],
        'A√±o 1': [
            f"{pyl['Ventas'].iloc[0]/1000:,.0f}",
            f"{pyl['EBITDA'].iloc[0]/1000:,.0f}",
            f"{pyl['EBITDA %'].iloc[0]:.1f}%",
            f"{(st.session_state.resultado_mck.get('fcf_proyectados', [])[0]['fcf']/1000 if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state and len(st.session_state.resultado_mck.get('fcf_proyectados', [])) > 0 else cash_flow['Free Cash Flow'].iloc[0]/1000):,.0f}"
        ],
        'A√±o 2': [
            f"{pyl['Ventas'].iloc[1]/1000:,.0f}",
            f"{pyl['EBITDA'].iloc[1]/1000:,.0f}",
            f"{pyl['EBITDA %'].iloc[1]:.1f}%",
            f"{(st.session_state.resultado_mck.get('fcf_proyectados', [])[1]['fcf']/1000 if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state and len(st.session_state.resultado_mck.get('fcf_proyectados', [])) > 1 else cash_flow['Free Cash Flow'].iloc[1]/1000):,.0f}"
        ],
        'A√±o 3': [
            f"{pyl['Ventas'].iloc[2]/1000:,.0f}",
            f"{pyl['EBITDA'].iloc[2]/1000:,.0f}",
            f"{pyl['EBITDA %'].iloc[2]:.1f}%",
            f"{(st.session_state.resultado_mck.get('fcf_proyectados', [])[2]['fcf']/1000 if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state and len(st.session_state.resultado_mck.get('fcf_proyectados', [])) > 2 else cash_flow['Free Cash Flow'].iloc[2]/1000):,.0f}"
        ],
        'A√±o 4': [
            f"{pyl['Ventas'].iloc[3]/1000:,.0f}",
            f"{pyl['EBITDA'].iloc[3]/1000:,.0f}",
            f"{pyl['EBITDA %'].iloc[3]:.1f}%",
            f"{(st.session_state.resultado_mck.get('fcf_proyectados', [])[3]['fcf']/1000 if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state and len(st.session_state.resultado_mck.get('fcf_proyectados', [])) > 3 else cash_flow['Free Cash Flow'].iloc[3]/1000):,.0f}"
        ],
        'A√±o 5': [
            f"{pyl['Ventas'].iloc[4]/1000:,.0f}",
            f"{pyl['EBITDA'].iloc[4]/1000:,.0f}",
            f"{pyl['EBITDA %'].iloc[4]:.1f}%",
            f"{(st.session_state.resultado_mck.get('fcf_proyectados', [])[4]['fcf']/1000 if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state and len(st.session_state.resultado_mck.get('fcf_proyectados', [])) > 4 else cash_flow['Free Cash Flow'].iloc[4]/1000):,.0f}"
        ]
    })
    
    st.dataframe(metricas_tabla, hide_index=True, use_container_width=True)

   # INDICADORES FINANCIEROS CLAVE
    st.markdown("---")
    st.markdown("### üìä **INDICADORES FINANCIEROS CLAVE**")
    
    # 1. INDICADORES DE RENTABILIDAD
    st.markdown("#### 1Ô∏è‚É£ **Rentabilidad** *(¬øQu√© tan bien gana dinero la empresa?)*")
    with st.expander("üí° **¬øQu√© significan estos indicadores de Rentabilidad?**"):
        st.markdown("""
        ### üìä Indicadores de Rentabilidad - Gu√≠a para No Financieros
        
        **üéØ ROE (Return on Equity - Rentabilidad sobre Capital)**
        - **¬øQu√© mide?**: Cu√°nto gana la empresa por cada ‚Ç¨ que invirtieron los socios
        - **Ejemplo**: ROE del 15% = Por cada 100‚Ç¨ invertidos, genera 15‚Ç¨ de beneficio al a√±o
        - **Benchmark sector**: 10-15% es saludable, >20% es excelente
        - **üö® Alerta**: <5% indica baja rentabilidad para los accionistas
                    
        **üè≠ ROCE (Return on Capital Employed - Rentabilidad sobre Capital Empleado)**
        - **¬øQu√© mide?**: Cu√°nto gana la empresa con el capital que usa para operar
        - **Ejemplo**: ROCE del 23% = Por cada 100‚Ç¨ de capital operativo, genera 23‚Ç¨ de beneficio
        - **Benchmark sector**: 15-20% es bueno, >25% es excelente
        - **üö® Alerta**: <10% indica uso ineficiente del capital
        - **üí° Diferencia con ROE**: ROCE mide eficiencia operativa, ROE mide retorno a accionistas           
        
        **üìà Margen EBITDA**
        - **¬øQu√© mide?**: De cada 100‚Ç¨ vendidos, cu√°ntos quedan como beneficio operativo
        - **Ejemplo**: Margen 25% = De 100‚Ç¨ de ventas, 25‚Ç¨ son beneficio operativo
        - **Benchmark sector**: 
          - Servicios: 15-25%
          - Tecnolog√≠a: 20-35%
          - Retail: 8-15%
        - **üö® Alerta**: <10% puede indicar problemas de eficiencia
        
        **üí∞ Margen Neto**
        - **¬øQu√© mide?**: Beneficio final despu√©s de TODOS los gastos e impuestos
        - **Ejemplo**: Margen 10% = De 100‚Ç¨ vendidos, 10‚Ç¨ son beneficio limpio
        - **Benchmark**: 5-10% es saludable seg√∫n el sector
        - **üö® Alerta**: Negativo significa p√©rdidas
        
        **üìä ¬øC√≥mo interpretarlos juntos?**
        - **Todos altos**: Empresa muy rentable y eficiente ‚úÖ
        - **EBITDA alto, Neto bajo**: Posibles problemas de deuda o impuestos ‚ö†Ô∏è
        - **ROE bajo con m√°rgenes altos**: Demasiado capital sin usar eficientemente üí°
        """)
    col_rent1, col_rent2, col_rent3, col_rent4, col_rent5 = st.columns(5)
    
    with col_rent1:
        if 'Costos' in pyl.columns:
            margen_bruto = ((pyl['Ventas'].iloc[-1] - pyl['Costos'].iloc[-1]) / pyl['Ventas'].iloc[-1] * 100)
        else:
            margen_bruto = pyl.get('Margen Bruto %', pd.Series([9.0])).iloc[-1]
        st.metric("Margen Bruto", f"{margen_bruto:.1f}%", help="(Ventas - Coste Ventas) / Ventas")
    
    with col_rent2:
        st.metric("Margen EBITDA", f"{pyl['EBITDA %'].iloc[-1]:.1f}%", help="EBITDA / Ventas")
    
    with col_rent3:
        margen_neto = (pyl['Beneficio Neto'].iloc[-1] / pyl['Ventas'].iloc[-1] * 100)
        st.metric("Margen Neto", f"{margen_neto:.1f}%", help="Beneficio Neto / Ventas")
    
    with col_rent4:
        patrimonio_neto = datos.get('balance', {}).get('patrimonio_neto', pd.Series([100000])).iloc[-1]
        # En app.py l√≠nea ~223, antes del if patrimonio_neto > 0:
        
        if patrimonio_neto > 0:
            roe = (pyl['Beneficio Neto'].iloc[-1] / patrimonio_neto) * 100
        else:
            roe = 0
        st.metric("ROE", f"{roe:.1f}%", help="Beneficio Neto / Patrimonio Neto")

    with col_rent5:
        # Obtener ROCE del DataFrame de ratios
        roce = ratios.iloc[-1].get('roce_%', 0) if ratios is not None and not ratios.empty else 0
        st.metric("ROCE", f"{roce:.1f}%", help="EBIT / Capital Empleado")
    
    # 2. INDICADORES DE LIQUIDEZ
    st.markdown("#### 2Ô∏è‚É£ **Liquidez** *(¬øPuede pagar sus deudas a corto plazo?)*")
    with st.expander("üí° **¬øQu√© significan estos indicadores de Liquidez?**"):
        st.markdown("""
        ### üíß Indicadores de Liquidez - Gu√≠a para No Financieros
        
        **üîµ Ratio Corriente (Current Ratio)**
        - **¬øQu√© mide?**: Si puede pagar todas sus deudas del pr√≥ximo a√±o
        - **C√°lculo simple**: Activo Corriente √∑ Pasivo Corriente
        - **Ejemplo**: Ratio 1.5 = Tiene 1.50‚Ç¨ disponibles por cada 1‚Ç¨ que debe
        - **Benchmark √≥ptimo**: 
          - 1.5 - 2.0 ‚Üí Situaci√≥n saludable ‚úÖ
          - < 1.0 ‚Üí Problemas de liquidez üö®
          - > 3.0 ‚Üí Exceso de recursos sin usar üí°
        
        **‚ö° Prueba √Åcida (Quick Ratio)**
        - **¬øQu√© mide?**: Capacidad de pago inmediata (sin vender inventario)
        - **Por qu√© importa**: El inventario puede tardar meses en convertirse en dinero
        - **Benchmark**: 
          - > 1.0 ‚Üí Excelente liquidez inmediata ‚úÖ
          - 0.8 - 1.0 ‚Üí Aceptable
          - < 0.8 ‚Üí Dependencia del inventario ‚ö†Ô∏è
        
        **üí∞ Capital de Trabajo**
        - **¬øQu√© es?**: Dinero disponible para las operaciones diarias
        - **C√°lculo**: Activo Corriente - Pasivo Corriente
        - **Ejemplo positivo**: +500K‚Ç¨ = Colch√≥n financiero para 2-3 meses
        - **Si es negativo**: La empresa financia operaciones con deuda üö®
        
        **üìä D√≠as de Caja**
        - **¬øQu√© mide?**: Cu√°ntos d√≠as puede operar con el efectivo actual
        - **C√°lculo**: Efectivo √∑ Gastos diarios
        - **Benchmark**: 
          - > 90 d√≠as ‚Üí Muy seguro ‚úÖ
          - 30-90 d√≠as ‚Üí Normal
          - < 30 d√≠as ‚Üí Riesgo de quedarse sin efectivo ‚ö†Ô∏è
        
        **üí° Se√±ales de Alerta**:
        - Ratio corriente cayendo trimestre a trimestre
        - Capital de trabajo negativo creciente
        - D√≠as de caja < 30
        - Prueba √°cida < 0.5
        """)
    col_liq1, col_liq2, col_liq3, col_liq4 = st.columns(4)
    
    with col_liq1:
        st.metric("Ratio Liquidez", f"{ratios.iloc[-1]['ratio_liquidez']:.2f}x", help="Activo Corriente / Pasivo Corriente")
    
    with col_liq2:
        # Calcular prueba √°cida (sin inventarios)
        balance = datos.get('balance', {})

        activo_liquido = balance.get('tesoreria', pd.Series([0])).iloc[-1] + balance.get('clientes', pd.Series([0])).iloc[-1]
        pasivo_corriente = (balance.get('deuda_cp', pd.Series([0])) + balance.get('proveedores', pd.Series([0]))).iloc[-1]
        prueba_acida = activo_liquido / pasivo_corriente if pasivo_corriente > 0 else 0
        st.metric("Prueba √Åcida", f"{prueba_acida:.2f}x", help="(Activo Corriente - Inventario) / Pasivo Corriente")
    
    with col_liq3:
        fondo_maniobra = (balance.get('tesoreria', pd.Series([0])) + balance.get('clientes', pd.Series([0])) + balance.get('inventario', pd.Series([0]))).iloc[-1] - balance.get('Pasivo Corriente', pd.Series([0])).iloc[-1]
        st.metric("Fondo Maniobra", f"{get_simbolo_moneda()}{fondo_maniobra:,.0f}", help="Activo Corriente - Pasivo Corriente")
    
    with col_liq4:
        tesoreria = balance['tesoreria'].iloc[-1] if 'tesoreria' in balance else 0
        gastos_diarios = (pyl['Gastos Personal'].iloc[-1] + pyl['Otros Gastos'].iloc[-1]) / 365
        dias_caja = int(tesoreria / gastos_diarios) if gastos_diarios > 0 and tesoreria > 0 else 0
        st.metric("D√≠as de Caja", f"{dias_caja:.0f}", help="D√≠as que puede operar con la caja actual")
    
    # 3. INDICADORES DE SOLVENCIA Y ENDEUDAMIENTO
    st.markdown("#### 3Ô∏è‚É£ **Solvencia y Endeudamiento** *(¬øC√≥mo se financia?)*")
    with st.expander("üí° **¬øQu√© significan estos indicadores de Solvencia y Endeudamiento?**"):
        st.markdown("""
        ### üè¶ Indicadores de Solvencia y Endeudamiento - Gu√≠a para No Financieros
        
        **üìä Ratio de Apalancamiento (Deuda/EBITDA)**
        - **¬øQu√© mide?**: A√±os necesarios para pagar toda la deuda con los beneficios actuales
        - **Ejemplo**: Ratio 3x = Tardar√≠a 3 a√±os en pagar toda la deuda
        - **Benchmark por situaci√≥n**:
          - < 2x ‚Üí Endeudamiento bajo, capacidad de inversi√≥n ‚úÖ
          - 2x - 3x ‚Üí Endeudamiento moderado, normal
          - 3x - 4x ‚Üí Endeudamiento alto, precauci√≥n ‚ö†Ô∏è
          - > 4x ‚Üí Sobreendeudamiento, riesgo alto üö®
        
        **üíº Ratio Deuda/Patrimonio (D/E)**
        - **¬øQu√© mide?**: Cu√°nto debe la empresa vs. cu√°nto vale para los socios
        - **Ejemplo**: D/E = 0.5 = Por cada 1‚Ç¨ de los socios, debe 0.50‚Ç¨
        - **Benchmark sector**:
          - < 0.5 ‚Üí Conservador, mucho margen ‚úÖ
          - 0.5 - 1.0 ‚Üí Equilibrado
          - 1.0 - 2.0 ‚Üí Apalancado (com√∫n en inmobiliarias)
          - > 2.0 ‚Üí Muy apalancado, mayor riesgo üö®
        
        **üõ°Ô∏è Cobertura de Intereses (EBITDA/Intereses)**
        - **¬øQu√© mide?**: Cu√°ntas veces puede pagar los intereses con sus beneficios
        - **Ejemplo**: Cobertura 5x = Genera 5‚Ç¨ por cada 1‚Ç¨ de intereses
        - **Interpretaci√≥n**:
          - > 3x ‚Üí C√≥moda capacidad de pago ‚úÖ
          - 2x - 3x ‚Üí Margen ajustado pero suficiente
          - 1.5x - 2x ‚Üí Situaci√≥n l√≠mite ‚ö†Ô∏è
          - < 1.5x ‚Üí Dificultad para pagar intereses üö®
        
        **üèóÔ∏è Ratio de Autonom√≠a Financiera**
        - **¬øQu√© mide?**: % del negocio financiado con recursos propios
        - **C√°lculo**: Patrimonio Neto √∑ Total Activo √ó 100
        - **Interpretaci√≥n**:
          - > 50% ‚Üí Alta autonom√≠a, bajo riesgo ‚úÖ
          - 30% - 50% ‚Üí Equilibrio normal
          - < 30% ‚Üí Alta dependencia de financiaci√≥n externa ‚ö†Ô∏è
        
        **‚ö†Ô∏è Se√±ales de Alerta en Conjunto**:
        - Deuda/EBITDA > 4x + Cobertura < 2x = Problema grave
        - D/E creciendo + M√°rgenes cayendo = Espiral peligrosa
        - Autonom√≠a < 20% = Vulnerable a crisis de cr√©dito
        
        **üí° Consejo**: No es malo tener deuda si genera m√°s rentabilidad que su coste
        """)
    col_solv1, col_solv2, col_solv3, col_solv4 = st.columns(4)
    
    with col_solv1:
        st.metric("Ratio de Apalancamiento", f"{ratios.iloc[-1]['deuda_neta_ebitda']:.2f}x", help="Ratio de Apalancamiento (Deuda Total / EBITDA)")
    
    with col_solv2:
        cobertura = ratios.iloc[-1]['cobertura_intereses']
        if cobertura >= 999:
            cobertura_texto = "Sin deuda"
        else:
            cobertura_texto = f"{cobertura:.1f}x"
        st.metric("Cobertura Intereses", cobertura_texto, help="EBITDA / Gastos Financieros")
    
    with col_solv3:
        ratio_endeudamiento = ratios.iloc[-1].get('ratio_endeudamiento', 0)
    
        st.metric("Ratio de Endeudamiento", f"{ratio_endeudamiento:.2f}x", help="Deuda Total / Patrimonio Neto")
    
    with col_solv4:
        autonomia_financiera = (balance.get('patrimonio_neto', pd.Series([1])).iloc[-1] / balance.get('total_activo', pd.Series([1])).iloc[-1] * 100)
        st.metric("Autonom√≠a Financiera", f"{autonomia_financiera:.1f}%", help="Patrimonio Neto / Total Activo")
    
    # 4. INDICADORES DE EFICIENCIA
    st.markdown("#### 4Ô∏è‚É£ **Eficiencia Operativa** *(¬øQu√© tan bien usa sus recursos?)*")
    with st.expander("üí° **¬øQu√© significan estos indicadores de Eficiencia Operativa?**"):
        st.markdown("""
        ### ‚öôÔ∏è Indicadores de Eficiencia Operativa - Gu√≠a para No Financieros
        
        **üì¶ Rotaci√≥n de Inventario**
        - **¬øQu√© mide?**: Cu√°ntas veces al a√±o vende todo su inventario
        - **Ejemplo**: Rotaci√≥n 12x = Vende todo el stock cada mes
        - **Por qu√© importa**: Inventario parado = dinero muerto
        - **Benchmark por sector**:
          - Alimentaci√≥n: 12-24x (productos frescos) ‚úÖ
          - Tecnolog√≠a: 6-12x (obsolescencia r√°pida)
          - Moda: 4-6x (por temporadas)
          - Industrial: 2-4x (productos duraderos)
        - **üö® Alerta**: Rotaci√≥n cayendo = acumulaci√≥n de stock obsoleto
        
        **üí≥ D√≠as de Cobro (DSO - Days Sales Outstanding)**
        - **¬øQu√© mide?**: D√≠as que tarda en cobrar a sus clientes
        - **Ejemplo**: 45 d√≠as = Los clientes pagan mes y medio despu√©s
        - **Impacto**: M√°s d√≠as = m√°s dinero "prestado" a clientes
        - **Benchmark**:
          - < 30 d√≠as ‚Üí Excelente gesti√≥n de cobros ‚úÖ
          - 30-60 d√≠as ‚Üí Normal en B2B
          - 60-90 d√≠as ‚Üí Revisar pol√≠tica de cr√©dito ‚ö†Ô∏è
          - > 90 d√≠as ‚Üí Riesgo de impagos alto üö®
        
        **üìÖ D√≠as de Pago (DPO - Days Payables Outstanding)**
        - **¬øQu√© mide?**: D√≠as que tarda en pagar a proveedores
        - **Estrategia**: Equilibrio entre liquidez y relaci√≥n con proveedores
        - **Benchmark**:
          - 30-45 d√≠as ‚Üí Est√°ndar mercado
          - > 60 d√≠as ‚Üí Puede indicar problemas de caja ‚ö†Ô∏è
          - < 30 d√≠as ‚Üí Quiz√°s pierde descuentos por pronto pago
        
        **üîÑ Ciclo de Conversi√≥n de Efectivo**
        - **F√≥rmula**: D√≠as Inventario + D√≠as Cobro - D√≠as Pago
        - **¬øQu√© significa?**: D√≠as que el dinero est√° "atrapado" en operaciones
        - **Ejemplo**: 30 + 45 - 60 = 15 d√≠as
        - **Objetivo**: Cuanto menor, mejor
        - **Ideal**: Negativo (cobras antes de pagar) üéØ
        
        **üìà Productividad por Empleado**
        - **¬øQu√© mide?**: Ventas √∑ N√∫mero de empleados
        - **Benchmark variable por sector**:
          - Tecnolog√≠a: >200K‚Ç¨/empleado
          - Servicios: 80-150K‚Ç¨/empleado
          - Retail: 150-300K‚Ç¨/empleado
        
        **üí° Mejoras R√°pidas de Eficiencia**:
        - Reducir d√≠as de cobro ‚Üí Descuentos por pronto pago
        - Optimizar inventario ‚Üí Sistema Just-in-Time
        - Negociar plazos pago ‚Üí Sin da√±ar relaci√≥n proveedores
        - Automatizar procesos ‚Üí Aumentar productividad
        
        **‚ö†Ô∏è Se√±al de Excelencia**: 
        Ciclo de efectivo negativo = El negocio se autofinancia con proveedores
        """)
    col_ef1, col_ef2, col_ef3, col_ef4 = st.columns(4)
    
    with col_ef1:
        # Calcular d√≠as de cobro din√°micamente
        clientes = balance.get("clientes", pd.Series([0])).iloc[-1]
        ventas_anuales = pyl["Ventas"].iloc[-1] if "Ventas" in pyl else 1
        dias_cobro = st.session_state.get("dias_cobro", 60)
        st.metric("D√≠as de Cobro", f"{dias_cobro}", help="D√≠as promedio para cobrar a clientes")    
    with col_ef2:
        # Calcular d√≠as de pago din√°micamente
        proveedores = balance.get("proveedores", pd.Series([0])).iloc[-1]
        compras_anuales = pyl["Coste Ventas"].iloc[-1] if "Coste Ventas" in pyl else ventas_anuales * 0.7
        dias_pago = st.session_state.get("dias_pago", 30)
        st.metric("D√≠as de Pago", f"{dias_pago}", help="D√≠as promedio para pagar a proveedores")
    
    with col_ef3:
        ciclo_caja = dias_cobro + dias_stock - dias_pago
        st.metric("Ciclo de Caja", f"{ciclo_caja} d√≠as", help="D√≠as cobro + D√≠as stock - D√≠as pago")
    
    with col_ef4:
        total_activo = balance['total_activo'].iloc[-1] if 'total_activo' in balance else 1
        rotacion_activos = pyl['Ventas'].iloc[-1] / total_activo if total_activo > 0 else 0
        st.metric("Rotaci√≥n Activos", f"{rotacion_activos:.2f}x", help="Ventas / Total Activos")
    # Obtener el m√©todo de valoraci√≥n actual y el valor correspondiente
    metodo_actual = st.session_state.get("metodo_valoracion", "mckinsey")
    
    # Usar el valor de la √∫ltima valoraci√≥n ejecutada
    if metodo_actual == "mckinsey" and "resultado_mck" in st.session_state:
        valor_empresa_actual = st.session_state.resultado_mck.get("valor_empresa", valor_empresa)
        ev_ebitda_actual = st.session_state.resultado_mck.get("multiplo_ebitda", 0)
    else:
        valor_empresa_actual = valor_empresa
        ev_ebitda_actual = valor_empresa / pyl["EBITDA"].iloc[-1] if pyl["EBITDA"].iloc[-1] > 0 else 0
    
    # ============================================================================
    # AN√ÅLISIS DE INVERSI√ìN PROFESIONAL
    # ============================================================================
    st.markdown("---")
    st.markdown("### üìà **AN√ÅLISIS DE INVERSI√ìN**")
    
    # Definir umbrales por sector
    umbrales_sector = {
        "industrial": {"tir_min": 6, "tir_bueno": 8, "margen_min": 8, "margen_bueno": 12},
        "tecnologia": {"tir_min": 10, "tir_bueno": 15, "margen_min": 15, "margen_bueno": 20},
        "hosteleria": {"tir_min": 7, "tir_bueno": 10, "margen_min": 10, "margen_bueno": 15},
        "retail": {"tir_min": 5, "tir_bueno": 8, "margen_min": 5, "margen_bueno": 8},
        "servicios": {"tir_min": 8, "tir_bueno": 12, "margen_min": 12, "margen_bueno": 18}
    }
    umbrales = umbrales_sector.get(sector.lower(), umbrales_sector["servicios"])
    
    # M√©tricas reales
    margen_real = pyl["EBITDA %"].iloc[-1] if "EBITDA %" in pyl else 0
    deuda_ebitda = ratios.iloc[-1].get("deuda_neta_ebitda", 0) if not ratios.empty else 0
    roce_real = ratios.iloc[-1].get("roce_%", 0) if not ratios.empty else 0
    wacc_real = st.session_state.get("resultado_mck", {}).get("wacc", 8.0)
    
    # 1. EVALUACI√ìN DE RENTABILIDAD
    st.markdown("#### üìä An√°lisis de Rentabilidad")
    
    col1, col2 = st.columns([2, 1])
    with col1:
        st.write(f"""
        La empresa presenta una **TIR del {tir_real:.1f}%**, que comparada con el objetivo sectorial del {umbrales["tir_bueno"]}% 
        {"supera las expectativas del sector" if tir_real >= umbrales["tir_bueno"] else "se sit√∫a por debajo del umbral √≥ptimo" if tir_real >= umbrales["tir_min"] else "no alcanza el m√≠nimo requerido"}. 
        
        El **margen EBITDA del {margen_real:.1f}%** {"demuestra una gesti√≥n operativa superior" if margen_real >= umbrales["margen_bueno"] else "indica eficiencia operativa aceptable" if margen_real >= umbrales["margen_min"] else "sugiere presi√≥n en m√°rgenes"} 
        comparado con el benchmark del sector ({umbrales["margen_bueno"]}%). 
        
        Con un **ROCE del {roce_real:.1f}%** frente a un WACC del {wacc_real:.1f}%, la empresa {"genera valor significativo" if roce_real > wacc_real * 1.5 else "genera valor moderado" if roce_real > wacc_real else "destruye valor"}, 
        con un spread de {roce_real - wacc_real:.1f} puntos porcentuales.
        """)
    
    with col2:
        # Indicadores visuales
        if tir_real >= umbrales["tir_bueno"]:
            st.success(f"‚úÖ TIR {tir_real:.1f}%")
        elif tir_real >= umbrales["tir_min"]:
            st.warning(f"‚ö†Ô∏è TIR {tir_real:.1f}%")
        else:
            st.error(f"‚ùå TIR {tir_real:.1f}%")
        
        if margen_real >= umbrales["margen_bueno"]:
            st.success(f"‚úÖ EBITDA {margen_real:.1f}%")
        elif margen_real >= umbrales["margen_min"]:
            st.warning(f"‚ö†Ô∏è EBITDA {margen_real:.1f}%")
        else:
            st.error(f"‚ùå EBITDA {margen_real:.1f}%")
    
    # 2. ESTRUCTURA FINANCIERA Y RIESGOS
    st.markdown("#### üíº Estructura Financiera")
    
    st.write(f"""
    La estructura de capital muestra un **ratio Deuda/EBITDA de {deuda_ebitda:.1f}x**, 
    {"lo cual es conservador y proporciona flexibilidad financiera" if deuda_ebitda < 2.0 else "situ√°ndose en niveles prudentes" if deuda_ebitda < 3.0 else "indicando un apalancamiento elevado que limita la capacidad de maniobra"}. 
    
    La valoraci√≥n de **‚Ç¨{valor_empresa:,.0f}** representa **{valor_empresa/pyl["EBITDA"].iloc[-1]:.1f}x EBITDA**, 
    {"un m√∫ltiplo atractivo para el sector" if valor_empresa/pyl["EBITDA"].iloc[-1] < 10 else "un m√∫ltiplo en l√≠nea con el mercado" if valor_empresa/pyl["EBITDA"].iloc[-1] < 12 else "un m√∫ltiplo premium que requiere justificaci√≥n"}.
    """)
    
    # 3. DICTAMEN Y RECOMENDACI√ìN
    st.markdown("#### üéØ Dictamen de Inversi√≥n")
    
    if tir_real >= umbrales["tir_bueno"] and margen_real >= umbrales["margen_bueno"]:
        st.success("**‚úÖ RECOMENDACI√ìN: INVERTIR**")
        st.write(f"""
        La combinaci√≥n de una TIR del {tir_real:.1f}% superior al objetivo y m√°rgenes EBITDA del {margen_real:.1f}% 
        por encima del benchmark sectorial justifican una recomendaci√≥n positiva de inversi√≥n. 
        La empresa demuestra capacidad de generaci√≥n de valor y eficiencia operativa.
        """)
    elif tir_real >= umbrales["tir_min"] and margen_real >= umbrales["margen_min"]:
        st.warning("**‚ö†Ô∏è RECOMENDACI√ìN: EVALUAR CON DETALLE**")
        st.write(f"""
        Con m√©tricas en zona marginal (TIR {tir_real:.1f}% vs objetivo {umbrales["tir_bueno"]}%), 
        se recomienda un an√°lisis adicional centrado en: plan de mejora de m√°rgenes, 
        potencial de crecimiento, y posibles sinergias. La inversi√≥n podr√≠a ser viable 
        con un plan de creaci√≥n de valor claro.
        """)
    else:
        st.error("**‚ùå RECOMENDACI√ìN: NO PROCEDER**")
        st.write(f"""
        La TIR del {tir_real:.1f}% est√° {"significativamente" if tir_real < umbrales["tir_min"] * 0.8 else ""} 
        por debajo del umbral m√≠nimo del {umbrales["tir_min"]}% para el sector {sector}. 
        {"Adicionalmente, los m√°rgenes EBITDA del " + str(margen_real) + "% no alcanzan el m√≠nimo sectorial." if margen_real < umbrales["margen_min"] else ""} 
        No se recomienda proceder con la inversi√≥n en las condiciones actuales.
        """)
    
    # L√≠nea de cierre
    st.markdown("---")
    
    # L√≠nea de cierre
    st.markdown("---")

# Diccionarios de configuraci√≥n por pa√≠s
TIPOS_IMPOSITIVOS = {
    "Espa√±a": 25.0,
    "Francia": 26.5,
    "Alemania": 30.0,
    "Reino Unido": 19.0,
    "Estados Unidos": 21.0,
    "Portugal": 21.0,
    "Italia": 24.0,
    "Pa√≠ses Bajos": 25.8,
    "Irlanda": 12.5,
    "B√©lgica": 25.0
}

MONEDAS = {
    "EUR": "‚Ç¨",
    "USD": "$",
    "GBP": "¬£",
    "CHF": "CHF"
}

# Inicializar session state
if 'datos_guardados' not in st.session_state:
    st.session_state.datos_guardados = None
if 'proyeccion_generada' not in st.session_state:
    st.session_state.proyeccion_generada = False

# CSS personalizado para mejor dise√±o
st.markdown("""
    <style>
    .main-header {
        font-size: 3rem;
        color: #1E3A8A;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #64748B;
        text-align: center;
        margin-bottom: 3rem;
    }
    .metric-card {
        background-color: #F8FAFC;
        padding: 1.5rem;
        border-radius: 0.5rem;
        border: 1px solid #E2E8F0;
    }
    </style>
""", unsafe_allow_html=True)
# Logo centrado con mejor distribuci√≥n
st.markdown("<div style='height: 50px;'></div>", unsafe_allow_html=True)  # Espaciado superior
col1, col2, col3 = st.columns([2, 3, 2])  # Cambiar proporciones
with col2:
    st.image("assets/ValUProIA.png", use_container_width=True)
    st.markdown("<h3 style='text-align: center; color: #666; margin-top: 10px;'>Valoraci√≥n empresarial con metodolog√≠a M&A e IA</h3>", unsafe_allow_html=True)
st.markdown("<div style='height: 30px;'></div>", unsafe_allow_html=True)  # Espaciado inferior
# Mostrar ejemplo
with st.expander("üìö Ver ejemplo de uso"):
    st.markdown("""
    ### C√≥mo usar Valoraci√≥n empresarial con metodolog√≠a M&A e IA:
    
    1. **Informaci√≥n General**: Introduce el nombre y sector de tu empresa
    2. **Ventas Hist√≥ricas**: A√±ade las ventas de los √∫ltimos 2-3 a√±os
    3. **Estructura de Costos**: Define tus costos variables y fijos
    4. **Par√°metros Financieros**: Si tienes deuda, ind√≠calo
    5. **Genera la Proyecci√≥n**: Pulsa el bot√≥n y obt√©n tu Business Plan
    
    ### Sectores predefinidos:
    - **Hosteler√≠a**: Restaurantes, bares, hoteles (margen ~65%)
    - **Tecnolog√≠a**: SaaS, software, apps (margen ~80%)
    - **Ecommerce**: Tiendas online (margen ~35%)
    - **Consultor√≠a**: Servicios profesionales (margen ~90%)
    
    ### ¬øQu√© obtendr√°s?
    - P&L proyectado a 5 a√±os
    - Dashboard con m√©tricas clave
    - Gr√°ficos interactivos
    - Resumen ejecutivo descargable
    """)

# Header principal


# Sidebar para entrada de datos
with st.sidebar:
    st.header("üìã Datos de tu Empresa")
    # Carga de Datos de Empresa
    st.markdown("---")

    # Bot√≥n para descargar la nueva plantilla mejorada
    col1, col2 = st.columns(2)
    with col1:
        plantilla_mejorada = descargar_plantilla_v2()
        st.download_button(
            label="üì• Descargar Plantilla Excel v2.0",
            data=plantilla_mejorada,
            file_name=f"plantilla_business_plan_v2_{datetime.now().strftime("%Y%m%d")}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            help="Nueva plantilla con l√≠neas de financiaci√≥n y descripci√≥n del negocio"
        )
    with col2:
        st.info("üìå Nueva plantilla con campos adicionales", icon="üÜï")
    st.markdown("### üìä Carga de Datos de Empresa")
    
    st.info("""
    **Opciones de carga de datos:**
    
    1. **Ninguna** (Manual): Introduce todos los datos de tu empresa manualmente
    2. **Empresas de ejemplo**: Carga datos pre-configurados de empresas modelo para diferentes sectores
    3. **Importaci√≥n Excel**: Selecciona "üìÅ Cargar desde Excel" en el selector: Carga los datos de tu empresa desde un archivo Excel
    
    *Nota: Si seleccionas una empresa de ejemplo, los datos se cargar√°n autom√°ticamente incluyendo balance completo, P&L hist√≥rico y l√≠neas de cr√©dito.*
    """)

    empresa_demo = st.selectbox(
        "Cargar empresa de ejemplo:",
        ["Carga Manual", "üìÅ Cargar desde Excel", "üçï Restaurante La Terraza", "üíª TechStart SaaS", "üõçÔ∏è ModaOnline Shop", "üè≠ MetalPro Industrial"]
    )
    
    # Inicializar datos_excel
    datos_excel = None










    if empresa_demo == "üìÅ Cargar desde Excel":
        st.markdown("---")
    
    # Mostrar file uploader SOLO cuando se selecciona Cargar desde Excel
    if empresa_demo == "üìÅ Cargar desde Excel":
        st.markdown("---")
        uploaded_file = st.file_uploader(
            "üì§ Selecciona tu archivo Excel completado",
            type=["xlsx"],
            key="excel_uploader",
            help="Usa la plantilla v2.0 descargable arriba"
        )
        
        if uploaded_file is not None:
            try:
                datos_excel = importar_excel_definitivo(uploaded_file)
                if datos_excel:
                    st.success("‚úÖ Datos cargados correctamente del Excel")
            except Exception as e:
                st.error(f"‚ùå Error al leer el archivo: {str(e)}")
                datos_excel = None
        else:
            st.info("üëÜ Por favor, selecciona un archivo Excel para continuar")
            datos_excel = None
    else:
        uploaded_file = None    # MODO DEMO - Cargar datos de ejemplo
    if empresa_demo == "üçï Restaurante La Terraza":
        datos_excel = {
            'info_general': {
                'nombre_empresa': 'Restaurante La Terraza SL',
                'descripcion_actividad': 'Restaurante de alta cocina mediterr√°nea con terraza panor√°mica. Especializado en productos locales de temporada y carta de vinos premium. Eventos corporativos y celebraciones privadas.',
                'productos_servicios': 'Men√∫ degustaci√≥n (80‚Ç¨), carta tradicional renovada, eventos privados, catering premium, escuela de cocina, wine tasting',
                'sector': 'Hosteler√≠a',
                'pais': 'Espa√±a',
                'a√±o_fundacion': 2015,
                'empresa_familiar': 'S√≠',
                'empresa_auditada': 'S√≠',
                'moneda': 'EUR',
                'modelo_negocio': 'B2C - Venta a consumidores',
                'posicionamiento_precio': 'Premium - Alto valor',
                'competidores_principales': 'La Mafia (25% mercado local), Tony Roma¬¥s (20%), Foster¬¥s Hollywood (15%)',
                'vision_corto_plazo': 'Abrir segunda ubicaci√≥n, aumentar ticket medio 15%, implementar delivery propio',
                'vision_medio_plazo': 'Expandir a 5 restaurantes en la regi√≥n, facturaci√≥n ‚Ç¨3M, crear marca de catering',
                'vision_largo_plazo': 'Franquiciar el concepto, 20 restaurantes nacionales, venta a grupo hostelero',
                'ventaja_competitiva_principal': 'Ubicaci√≥n privilegiada con terraza √∫nica, chef con estrella Michelin',
                'principales_riesgos': 'Estacionalidad (70% ventas en verano), dependencia del chef principal',
                'cuota_mercado': 15,
                'clientes_objetivo': 'Parejas 30-50 a√±os, ejecutivos para comidas de negocio, turistas gastron√≥micos, celebraciones especiales',
            },
            'pyl_historico': {
                'ventas': [750000, 820000, 920000],
                'costos_variables_pct': 40,
                'gastos_personal': [260000, 270000, 285000],
                'gastos_generales': [150000, 160000, 170000],
                'gastos_marketing': [15000, 18000, 22000]
            },
            'datos_laborales': {
                'num_empleados': 12,
                'coste_medio_empleado': 23750,
                'antiguedad_media': 3,
                'rotacion_anual': 20.0
            },
            'balance_activo': {
                'tesoreria_inicial': 50000,
                'inversiones_cp': 5000,
                'clientes_inicial': 38000,
                'inventario_inicial': 28000,
                'activo_fijo_bruto': 580000,
                'depreciacion_acumulada': 145000,
                'activos_intangibles': 25000,
                'amortizacion_intangibles': 10000,
                'otros_deudores': 8000,
                'admin_publica_deudora': 12000,
                'gastos_anticipados': 2000,
                'activos_impuesto_diferido_cp': 2000,
                'inversiones_lp': 0,
                'creditos_lp': 0,
                'fianzas_depositos': 3000,
                'activos_impuesto_diferido_lp': 2000
            },
            'balance_pasivo': {
                'proveedores_inicial': 65000,
                'prestamo_principal': 120000,
                'prestamo_plazo_original': 10,
                'prestamo_a√±os_transcurridos': 7,
                'prestamo_comision_apertura': 0.5,
                'acreedores_servicios': 25000,
                'anticipos_clientes': 8000,
                'remuneraciones_pendientes': 18000,
                'admin_publica_acreedora': 28000,
                'provisiones_cp': 4000,
                'hipoteca_importe_original': 250000,
                'hipoteca_meses_transcurridos': 48,
                'hipoteca_plazo_total': 20,
                'hipoteca_interes': 2.5,
                'leasing_total': 0,
                'otros_prestamos_lp': 0,
                'provisiones_riesgos': 12000,
                'leasing_cuota_mensual': 0,
                'leasing_meses_restantes': 0,
                'otros_pasivos_cp': 0,
                'otras_provisiones_lp': 0,
                'pasivos_impuesto_diferido': 2000
            },
            'balance_patrimonio': {
                'capital_social': 60000,
                'prima_emision': 0,
                'reserva_legal': 12000,
                'otras_reservas': 68784,
                'resultados_acumulados': 0,
                'resultado_ejercicio': 7259,
                'ajustes_valor': 0,
                'subvenciones': 0
            },
            'proyecciones': {
                'capex_a√±o1': 35000,
                'capex_a√±o2': 25000,
                'capex_a√±o3': 30000,
                'capex_a√±o4': 20000,
                'capex_a√±o5': 25000
            },
            'datos_empresa': {
                'dias_cobro': 15,
                'dias_pago': 45,
                'dias_stock': 30
            }
        }
        guardar_datos_demo(datos_excel)
        st.success("‚úÖ Cargado: Restaurante La Terraza (Hosteler√≠a)")

    elif empresa_demo == "üíª TechStart SaaS":
        datos_excel = {
            'info_general': {
                'nombre_empresa': 'TechStart SaaS',
                'descripcion_actividad': 'Plataforma CRM cloud dise√±ada espec√≠ficamente para PYMES espa√±olas. Gesti√≥n de clientes, pipeline de ventas, automatizaci√≥n de marketing y anal√≠ticas en tiempo real.',
                'productos_servicios': 'CRM b√°sico (freemium), CRM Pro (29‚Ç¨/mes), Marketing Suite (49‚Ç¨/mes), API integraciones, consultor√≠a implementaci√≥n',
                'sector': 'Tecnolog√≠a',
                'pais': 'Espa√±a',
                'a√±o_fundacion': 2018,
                'empresa_familiar': 'No',
                'empresa_auditada': 'S√≠',
                'moneda': 'EUR',
                'modelo_negocio': 'SaaS - Software como servicio',
                'posicionamiento_precio': 'Freemium - Gratuito con opciones de pago',
                'competidores_principales': 'Salesforce (40% mercado), HubSpot (25%), Pipedrive (15%)',
                'vision_corto_plazo': 'Lanzar versi√≥n 2.0, conseguir 1000 clientes de pago, certificaci√≥n ISO 27001',
                'vision_medio_plazo': 'Expansi√≥n internacional (UK y Alemania), ‚Ç¨10M ARR, integraci√≥n con ERPs',
                'vision_largo_plazo': 'L√≠der europeo en CRM para PYMES, Serie B de ‚Ç¨20M, posible adquisici√≥n',
                'ventaja_competitiva_principal': 'Producto 100% adaptado a PYMES espa√±olas, onboarding en 24h',
                'principales_riesgos': 'Churn rate del 15% anual, dependencia de AWS, competencia grandes players',
                'cuota_mercado': 5,
                'clientes_objetivo': 'PYMES espa√±olas 10-50 empleados, sector servicios, empresas en digitalizaci√≥n, startups en crecimiento',
            },
            'pyl_historico': {
                'ventas': [2400000, 3100000, 4000000],
                'costos_variables_pct': 40,
                'gastos_personal': [800000, 950000, 1150000],
                'gastos_generales': [200000, 230000, 260000],
                'gastos_marketing': [280000, 340000, 400000]
            },
            'datos_laborales': {
                'num_empleados': 26,
                'coste_medio_empleado': 44231,
                'antiguedad_media': 2.5,
                'rotacion_anual': 25.0
            },
            'balance_activo': {
                'tesoreria_inicial': 700000,
                'inversiones_cp': 100000,
                'clientes_inicial': 360000,
                'inventario_inicial': 250000,
                'activo_fijo_bruto': 2000000,
                'depreciacion_acumulada': 500000,
                'activos_intangibles': 900000,
                'amortizacion_intangibles': 250000,
                'otros_deudores': 50000,
                'admin_publica_deudora': 40000,
                'gastos_anticipados': 30000,
                'activos_impuesto_diferido_cp': 20000,
                'inversiones_lp': 150000,
                'creditos_lp': 80000,
                'fianzas_depositos': 30000,
                'activos_impuesto_diferido_lp': 40000
            },
            'balance_pasivo': {
                'proveedores_inicial': 320000,
                'prestamo_principal': 1200000,
                'prestamo_plazo_original': 7,
                'prestamo_a√±os_transcurridos': 2,
                'prestamo_comision_apertura': 0.5,
                'acreedores_servicios': 110000,
                'anticipos_clientes': 80000,
                'remuneraciones_pendientes': 70000,
                'admin_publica_acreedora': 60000,
                'provisiones_cp': 40000,
                'hipoteca_importe_original': 800000,
                'hipoteca_meses_transcurridos': 36,
                'hipoteca_plazo_total': 15,
                'hipoteca_interes': 3.5,
                'leasing_total': 100000,
                'otros_prestamos_lp': 200000,
                'provisiones_riesgos': 50000,
                'leasing_cuota_mensual': 3000,
                'leasing_meses_restantes': 33,
                'otros_pasivos_cp': 50000,
                'otras_provisiones_lp': 40000,
                'pasivos_impuesto_diferido': 30000
            },
            'balance_patrimonio': {
                'capital_social': 500000,
                'prima_emision': 200000,
                'reserva_legal': 50000,
                'otras_reservas': 111851,
                'resultados_acumulados': -270079,
                'resultado_ejercicio': 250000,
                'ajustes_valor': 0,
                'subvenciones': 0
            },
            'proyecciones': {
                'capex_a√±o1': 200000,
                'capex_a√±o2': 250000,
                'capex_a√±o3': 300000,
                'capex_a√±o4': 250000,
                'capex_a√±o5': 200000
            },
            'datos_empresa': {
                'dias_cobro': 33,
                'dias_pago': 37,
                'dias_stock': 23
            }
        }
        guardar_datos_demo(datos_excel)
        st.success("‚úÖ Cargado: TechStart SaaS (Tecnolog√≠a)")


    elif empresa_demo == "üè≠ MetalPro Industrial":
        datos_excel = {
            'info_general': {
                'nombre_empresa': 'MetalPro Industrial',
                'descripcion_actividad': 'Fabricaci√≥n de componentes met√°licos de alta precisi√≥n para automoci√≥n y aeron√°utica. Especialistas en aleaciones especiales y tratamientos t√©rmicos avanzados.',
                'productos_servicios': 'Piezas estampadas para automoci√≥n, componentes aeron√°uticos certificados, prototipos r√°pidos, consultor√≠a metal√∫rgica, tratamientos t√©rmicos especiales',
                'sector': 'Industrial',
                'pais': 'Espa√±a',
                'a√±o_fundacion': 1989,
                'empresa_familiar': 'S√≠',
                'empresa_auditada': 'S√≠',
                'moneda': 'EUR',
                'modelo_negocio': 'Fabricaci√≥n - Producci√≥n propia',
                'posicionamiento_precio': 'Premium - Alto valor',
                'competidores_principales': 'ArcelorMittal (30% mercado), Acerinox (20%), Gonvarri (15%)',
                'vision_corto_plazo': 'Certificaci√≥n medioambiental, automatizar l√≠nea de producci√≥n, reducir costes 10%',
                'vision_medio_plazo': 'Nueva planta en Marruecos, ‚Ç¨350M facturaci√≥n, l√≠der en aceros especiales',
                'vision_largo_plazo': 'Consolidaci√≥n sectorial v√≠a adquisiciones, ‚Ç¨500M ventas, posible IPO',
                'ventaja_competitiva_principal': '40 a√±os experiencia, relaciones largo plazo con OEMs, tecnolog√≠a propia',
                'principales_riesgos': 'Volatilidad precio materias primas, concentraci√≥n sector auto (60%)',
                'cuota_mercado': 12,
                'clientes_objetivo': 'Fabricantes Tier 1 automoci√≥n, OEMs aeron√°utica, empresas industriales necesitando precisi√≥n, exportadores Europa',
            },
            'pyl_historico': {
                'ventas': [235000000, 242000000, 250000000],
                'costos_variables_pct': 70,
                'gastos_personal': [30000000, 31000000, 32000000],
                'gastos_generales': [18000000, 19000000, 20000000],
                'gastos_marketing': [2500000, 2600000, 2700000]
            },
            'datos_laborales': {
                'num_empleados': 200,
                'coste_medio_empleado': 45000,
                'antiguedad_media': 12,
                'rotacion_anual': 8.0
            },
            'balance_activo': {
                'tesoreria_inicial': 8500000,
                'inversiones_cp': 2500000,
                'clientes_inicial': 42000000,
                'inventario_inicial': 35000000,
                'activo_fijo_bruto': 125000000,
                'depreciacion_acumulada': 75000000,
                'activos_intangibles': 15000000,
                'amortizacion_intangibles': 9000000,
                'otros_deudores': 3500000,
                'admin_publica_deudora': 4200000,
                'gastos_anticipados': 800000,
                'activos_impuesto_diferido_cp': 1500000,
                'inversiones_lp': 5000000,
                'creditos_lp': 2000000,
                'fianzas_depositos': 1200000,
                'activos_impuesto_diferido_lp': 3500000
            },
            'balance_pasivo': {
                'proveedores_inicial': 28000000,
                'prestamo_principal': 15000000,
                'prestamo_plazo_original': 10,
                'prestamo_a√±os_transcurridos': 3,
                'prestamo_comision_apertura': 0.5,
                'acreedores_servicios': 4500000,
                'anticipos_clientes': 2000000,
                'remuneraciones_pendientes': 750000,
                'admin_publica_acreedora': 3200000,
                'provisiones_cp': 1200000,
                'hipoteca_importe_original': 20000000,
                'hipoteca_meses_transcurridos': 84,
                'hipoteca_plazo_total': 20,
                'hipoteca_interes': 2.8,
                'leasing_total': 8000000,
                'otros_prestamos_lp': 5000000,
                'provisiones_riesgos': 2500000,
                'leasing_cuota_mensual': 150000,
                'leasing_meses_restantes': 60,
                'otros_pasivos_cp': 500000,
                'otras_provisiones_lp': 1500000,
                'pasivos_impuesto_diferido': 4000000
            },
            'balance_patrimonio': {
                'capital_social': 5000000,
                'prima_emision': 0,
                'reserva_legal': 1000000,
                'otras_reservas': 27720454,
                'resultados_acumulados': 18000000,
                'resultado_ejercicio': 16063309,
                'ajustes_valor': 0,
                'subvenciones': 1500000
            },
            'proyecciones': {
                'capex_a√±o1': 8000000,
                'capex_a√±o2': 9000000,
                'capex_a√±o3': 10000000,
                'capex_a√±o4': 8500000,
                'capex_a√±o5': 7500000
            },
            'datos_empresa': {
                'dias_cobro': 61,
                'dias_pago': 45,
                'dias_stock': 80
            }
        }
        guardar_datos_demo(datos_excel)
        st.success("‚úÖ Cargado: MetalPro Industrial (Industrial)")


    # Preparar valores por defecto desde Excel o valores est√°ndar
    if 'datos_excel' in locals() and datos_excel:
        # Cargar l√≠neas de financiaci√≥n desde Excel si existen
        if "lineas_financiacion" in datos_excel and datos_excel["lineas_financiacion"]:
            st.session_state.lineas_financiacion = datos_excel["lineas_financiacion"]
        else:
            # Valores por defecto si no hay l√≠neas en el Excel
            st.session_state.lineas_financiacion = [{
                "tipo": "P√≥liza cr√©dito",
                "banco": "Banco principal",
                "limite": 0,
                "dispuesto": 0,
                "tipo_interes": 4.5
            }]        # Valores desde Excel
        default_nombre = datos_excel['info_general']['nombre_empresa']
        default_descripcion = datos_excel['info_general'].get('descripcion_actividad', '')
        default_productos = datos_excel['info_general'].get('productos_servicios', '')
        default_modelo_negocio = datos_excel['info_general'].get('modelo_negocio', 'B2C - Venta a consumidores')
        default_competidores = datos_excel['info_general'].get('competidores_principales', '')
        default_vision_corto = datos_excel['info_general'].get('vision_corto_plazo', '')
        default_vision_medio = datos_excel['info_general'].get('vision_medio_plazo', '')
        default_vision_largo = datos_excel['info_general'].get('vision_largo_plazo', '')
        default_ventaja_competitiva = datos_excel['info_general'].get('ventaja_competitiva_principal', '')
        default_principales_riesgos = datos_excel['info_general'].get('principales_riesgos', '')
        default_cuota_mercado = float(datos_excel['info_general'].get('cuota_mercado', 10.0))
        default_clientes_objetivo = datos_excel['info_general'].get('clientes_objetivo', '')
        default_sector = datos_excel['info_general']['sector']
        default_pais = datos_excel['info_general']['pais']
        default_empresa_familiar = datos_excel["info_general"].get("empresa_familiar", "No")
        default_empresa_auditada = datos_excel["info_general"].get("empresa_auditada", "S√≠")
        default_a√±o = datos_excel['info_general']['a√±o_fundacion']
        default_familiar = datos_excel['info_general']['empresa_familiar']
        default_auditada = datos_excel['info_general']['empresa_auditada']
        default_moneda = datos_excel['info_general']['moneda']
        
        # Datos PYL
        default_ventas = datos_excel['pyl_historico']['ventas']
        default_costos_var = int(datos_excel['pyl_historico'].get('costos_variables_pct', 40))
        default_gastos_personal = datos_excel['pyl_historico']['gastos_personal']
        default_gastos_generales = datos_excel['pyl_historico']['gastos_generales']
        default_gastos_marketing = datos_excel['pyl_historico']['gastos_marketing']
        
        # Datos laborales
        default_empleados = datos_excel['datos_laborales']['num_empleados']
        default_coste_empleado = datos_excel['datos_laborales']['coste_medio_empleado']
        default_antiguedad = datos_excel['datos_laborales']['antiguedad_media']
        default_rotacion = datos_excel['datos_laborales']['rotacion_anual']
        # Par√°metros del ciclo de conversi√≥n
        default_dias_cobro = datos_excel.get("datos_empresa", {}).get("dias_cobro") or datos_excel.get("parametros", {}).get("dias_cobro", 60)
        default_dias_pago = datos_excel.get("datos_empresa", {}).get("dias_pago") or datos_excel.get("parametros", {}).get("dias_pago", 45)
        default_dias_inventario = datos_excel.get("datos_empresa", {}).get("dias_stock") or datos_excel.get("parametros", {}).get("dias_inventario", 60)
        default_proveedores = int(datos_excel['balance_pasivo']['proveedores_inicial'])
        default_prestamo_principal = int(datos_excel['balance_pasivo']['prestamo_principal'])
        # M√°s valores del pasivo
        default_acreedores = int(datos_excel['balance_pasivo'].get('acreedores_servicios', 0))
        default_anticipos = int(datos_excel['balance_pasivo'].get('anticipos_clientes', 0))
        default_remuneraciones = int(datos_excel['balance_pasivo'].get('remuneraciones_pendientes', 0))
        default_admin_acreedora = int(datos_excel['balance_pasivo'].get('admin_publica_acreedora', 0))
        # Inicializar variables del pr√©stamo
        prestamo_porcion_cp = 0
        prestamo_porcion_lp = 0
        default_provisiones_cp = int(datos_excel['balance_pasivo'].get('provisiones_cp', 0))
        default_hipoteca_original = int(datos_excel['balance_pasivo'].get('hipoteca_importe_original', 0))
        default_hipoteca_meses = int(datos_excel['balance_pasivo'].get('hipoteca_meses_transcurridos', 0))
        default_hipoteca_plazo = int(datos_excel['balance_pasivo'].get('hipoteca_plazo_total', 20))
        default_leasing = int(datos_excel['balance_pasivo'].get('leasing_total', 0))
        default_otros_prestamos = int(datos_excel['balance_pasivo'].get('otros_prestamos_lp', datos_excel['balance_pasivo'].get('prestamos_lp', 0)))
        default_provisiones_riesgos = int(datos_excel['balance_pasivo'].get('provisiones_riesgos', 0))
        default_leasing_cuota = int(datos_excel['balance_pasivo'].get('leasing_cuota_mensual', 0))
        default_leasing_meses = int(datos_excel['balance_pasivo'].get('leasing_meses_restantes', 0))
        default_otros_pasivos_cp = int(datos_excel['balance_pasivo'].get('otros_pasivos_cp', 0))
        default_otras_provisiones_lp = int(datos_excel['balance_pasivo'].get('otras_provisiones_lp', 0))
        default_prestamo_plazo = max(1, int(datos_excel['balance_pasivo'].get('prestamo_plazo_original', 10)))
        default_prestamo_a√±os_transcurridos = min(int(datos_excel['balance_pasivo'].get('prestamo_a√±os_transcurridos', 5)), max(default_prestamo_plazo - 1, 0))
        default_hipoteca_interes = float(datos_excel['balance_pasivo'].get('hipoteca_interes', 3.25))
        default_pasivos_impuesto_dif = int(datos_excel['balance_pasivo'].get('pasivos_impuesto_diferido', 0))
        # Valores del patrimonio neto
        default_capital_social = int(datos_excel['balance_patrimonio'].get('capital_social', 100000))
        default_prima_emision = int(datos_excel['balance_patrimonio'].get('prima_emision', 0))
        default_reserva_legal = int(datos_excel['balance_patrimonio'].get('reserva_legal', 20000))
        default_otras_reservas = int(datos_excel['balance_patrimonio'].get('otras_reservas', 0))
        default_resultados_acum = int(datos_excel['balance_patrimonio'].get('resultados_acumulados', 0))
        default_resultado_ejercicio = int(datos_excel['balance_patrimonio'].get('resultado_ejercicio', 0))
        default_ajustes_valor = int(datos_excel['balance_patrimonio'].get('ajustes_valor', 0))
        default_subvenciones = int(datos_excel['balance_patrimonio'].get('subvenciones', 0))
        # Valores de proyecciones (CAPEX)
        default_capex_a√±o1 = datos_excel['proyecciones']['capex_a√±o1']
        default_capex_a√±o2 = datos_excel['proyecciones']['capex_a√±o2']
        default_capex_a√±o3 = datos_excel['proyecciones']['capex_a√±o3']
        default_capex_a√±o4 = datos_excel['proyecciones']['capex_a√±o4']
        default_capex_a√±o5 = datos_excel['proyecciones']['capex_a√±o5']
        # Valores del balance - activo
        default_tesoreria = int(datos_excel['balance_activo']['tesoreria_inicial'])
        default_clientes = int(datos_excel['balance_activo']['clientes_inicial'])
        default_inventario = int(datos_excel['balance_activo']['inventario_inicial'])
        # M√°s valores del activo
        default_inversiones_cp = int(datos_excel['balance_activo']['inversiones_cp'])
        default_otros_deudores = int(datos_excel['balance_activo']['otros_deudores'])
        default_admin_publica_deudora = int(datos_excel['balance_activo']['admin_publica_deudora'])
        default_gastos_anticipados = int(datos_excel['balance_activo']['gastos_anticipados'])
        default_activos_impuesto_cp = int(datos_excel['balance_activo']['activos_impuesto_diferido_cp'])
        default_activo_fijo = int(datos_excel['balance_activo']['activo_fijo_bruto'])
        default_depreciacion = int(datos_excel['balance_activo']['depreciacion_acumulada'])
        default_intangibles = int(datos_excel['balance_activo']['activos_intangibles'])
        default_amort_intangibles = int(datos_excel['balance_activo']['amortizacion_intangibles'])
        default_fianzas = int(datos_excel['balance_activo']['fianzas_depositos'])
        default_inversiones_lp = int(datos_excel['balance_activo']['inversiones_lp'])
        default_creditos_lp = int(datos_excel['balance_activo']['creditos_lp'])
        default_activos_impuesto_lp = int(datos_excel['balance_activo']['activos_impuesto_diferido_lp'])
        # Valores de proyecciones
        default_capex_a√±o1 = datos_excel['proyecciones']['capex_a√±o1']
        print(f"\n=== VALORES PASIVO DEL EXCEL ===")
        print(f"Proveedores: ‚Ç¨{default_proveedores:,.0f}")
        print(f"Pr√©stamo principal: ‚Ç¨{default_prestamo_principal:,.0f}")
        print(f"Datos completos pasivo: {datos_excel.get('balance_pasivo', {})}")
        print("=================================\n")
    else:
        # Valores por defecto est√°ndar
        default_nombre = "Mi Empresa SL"
        default_descripcion = ""
        default_productos = ""
        default_modelo_negocio = "B2C - Venta a consumidores"
        default_competidores = ""
        default_vision_corto = ""
        default_vision_medio = ""
        default_vision_largo = ""
        default_ventaja_competitiva = ""
        default_principales_riesgos = ""
        default_cuota_mercado = 10.0
        default_clientes_objetivo = ""
        default_sector = "Hosteler√≠a"
        default_pais = "Espa√±a"
        default_a√±o = datetime.now().year - 10
        default_familiar = "No"
        default_auditada = "S√≠"
        default_moneda = "EUR"
        
        # Valores PYL por defecto
        default_ventas = [13500000, 14200000, 15000000]
        default_costos_var = 40
        default_gastos_personal = [102000, 110000, 120000]
        default_gastos_generales = [30600, 33000, 36000]
        default_gastos_marketing = [10200, 11000, 12000]
        
        # Valores laborales por defecto
        default_empleados = 10
        default_coste_empleado = 35000
        default_antiguedad = 5.0
        default_rotacion = 10.0
    
    # Informaci√≥n b√°sica
    st.subheader("Informaci√≥n General")
    nombre_empresa = st.text_input("Nombre de la empresa", value=default_nombre)
    
    a√±o_fundacion = st.number_input(
        "A√±o de Fundaci√≥n",
        min_value=1900,
        max_value=datetime.now().year,
        value=default_a√±o if 'default_a√±o' in locals() else datetime.now().year - 10,
        step=1,
        help="A√±o en que se constituy√≥ la empresa",
        key="a√±o_fundacion_sidebar",
    )

    # Caracter√≠sticas de la empresa
    col1, col2 = st.columns(2)
    with col1:
        empresa_familiar = st.selectbox(
        "¬øEmpresa familiar?",
        ["No", "S√≠"],
        index=1 if default_familiar == "S√≠" else 0,
        help="Las empresas familiares pueden tener valoraciones diferentes"
    )
    with col2:
        empresa_auditada = st.selectbox(
            "¬øCuentas auditadas?",
            ["S√≠", "No"],
            index=0 if default_auditada == "S√≠" else 1,
            help="Las cuentas auditadas dan m√°s confianza a inversores"
        )
    
    sectores_lista = ["Hosteler√≠a", "Tecnolog√≠a", "Ecommerce", "Consultor√≠a",
                      "Retail", "Servicios", "Automoci√≥n", "Industrial", "Otro"]
    sector = st.selectbox(
        "Sector",
        sectores_lista,
        index=sectores_lista.index(default_sector) if default_sector in sectores_lista else 0
    )

    # Pa√≠s y configuraci√≥n fiscal
    col1, col2 = st.columns(2)
    with col1:
        paises_lista = list(TIPOS_IMPOSITIVOS.keys())
        pais = st.selectbox(
            "Pa√≠s",
            paises_lista,
            index=paises_lista.index(default_pais) if default_pais in paises_lista else 0,
            help="Pa√≠s donde opera la empresa"
        )
    with col2:
        tipo_impositivo = TIPOS_IMPOSITIVOS[pais]
        st.metric("Tipo impositivo", f"{tipo_impositivo}%")
    
    # Moneda
    moneda = st.selectbox(
        "Moneda",
        list(MONEDAS.keys()),
        index=0,  # EUR por defecto
        help="Moneda para los c√°lculos"
    )
    simbolo_moneda = MONEDAS[moneda]

    # ========== NUEVA SECCI√ìN: DESCRIPCI√ìN DEL NEGOCIO ==========
    st.markdown("---")
    with st.expander("üéØ **Descripci√≥n del Negocio** (NUEVO)", expanded=False):
        st.info("üí° Informaci√≥n cualitativa para mejorar el an√°lisis de IA", icon="‚ú®")
        
        descripcion_actividad = st.text_area(
            "Descripci√≥n de la Actividad",
            value=default_descripcion if "default_descripcion" in locals() else "",
            placeholder="¬øQu√© hace la empresa? Describa brevemente su actividad principal...",
            height=100,
            key="descripcion_actividad_sidebar",
            help="Esta informaci√≥n mejorar√° significativamente el an√°lisis"
        )
        
        
        productos_servicios = st.text_area(
            "Productos/Servicios Principales",
            value=default_productos if "default_productos" in locals() else "",
            placeholder="Liste los principales productos o servicios que ofrece...",
            height=100,
            key="productos_servicios_sidebar"
        )
        
        # Nuevos campos estrat√©gicos para el an√°lisis IA
        st.markdown("---")
        st.subheader("üéØ Informaci√≥n Estrat√©gica")
        
        col1_est, col2_est = st.columns(2)
        with col1_est:
            modelo_negocio = st.selectbox(
                "Modelo de Negocio",
                ["B2B - Venta a empresas", 
                 "B2C - Venta a consumidores",
                 "B2B2C - Mixto",
                 "SaaS - Software como servicio",
                 "Marketplace - Plataforma",
                 "Fabricaci√≥n - Producci√≥n propia",
                 "Servicios - Consultor√≠a/Profesional",
                 "Retail - Venta minorista",
                 "Otro"],
                index=["B2B - Venta a empresas", "B2C - Venta a consumidores", "B2B2C - Mixto", "SaaS - Software como servicio", "Marketplace - Plataforma", "Fabricaci√≥n - Producci√≥n propia", "Servicios - Consultor√≠a/Profesional", "Retail - Venta minorista", "Otro"].index(default_modelo_negocio) if "default_modelo_negocio" in locals() and default_modelo_negocio in ["B2B - Venta a empresas", "B2C - Venta a consumidores", "B2B2C - Mixto", "SaaS - Software como servicio", "Marketplace - Plataforma", "Fabricaci√≥n - Producci√≥n propia", "Servicios - Consultor√≠a/Profesional", "Retail - Venta minorista", "Otro"] else 0,
                help="Seleccione el modelo de negocio principal"
                ,key="modelo_negocio"
            )
        
        with col2_est:
            posicionamiento_precio = st.selectbox(
                "Posicionamiento de Precio",
                ["Premium - Alto valor",
                 "Medio - Calidad-precio",
                 "Low-cost - Precio bajo",
                 "Freemium - Gratuito con opciones de pago",
                 "Variable - Seg√∫n segmento"],
                help="¬øC√≥mo se posiciona en precio vs competencia?"
                ,key="posicionamiento_precio"
            )
        
        competidores_principales = st.text_area(
            "Top 3 Competidores Principales",
            value=default_competidores if "default_competidores" in locals() else "",
            placeholder="Ej: Competidor A (40% mercado), Competidor B (25%), Competidor C (15%)",
            height=70,
            help="Identifique sus 3 principales competidores y su cuota de mercado aproximada"
            ,key="competidores_principales"
        )
        
        st.markdown("**Visi√≥n Estrat√©gica**")
        
        vision_corto = st.text_area(
            "Objetivos a Corto Plazo (1 a√±o)",
            value=default_vision_corto if "default_vision_corto" in locals() else "",
            placeholder="Ej: Aumentar ventas 20%, lanzar 2 productos nuevos, abrir mercado en Francia...",
            height=70,
            help="¬øQu√© planea lograr en los pr√≥ximos 12 meses?"
            ,key="vision_corto_plazo"
        )
        
        vision_medio = st.text_area(
            "Objetivos a Medio Plazo (3 a√±os)",
            value=default_vision_medio if "default_vision_medio" in locals() else "",
            placeholder="Ej: L√≠der regional, 50M facturaci√≥n, expansi√≥n internacional...",
            height=70,
            help="¬øD√≥nde ve la empresa en 3 a√±os?"
            ,key="vision_medio_plazo"
        )
        
        vision_largo = st.text_area(
            "Visi√≥n a Largo Plazo (5+ a√±os)",
            value=default_vision_largo if "default_vision_largo" in locals() else "",
            placeholder="Ej: IPO, l√≠der del sector, venta estrat√©gica, expansi√≥n global...",
            height=70,
            help="¬øCu√°l es la visi√≥n final para la empresa?"
            ,key="vision_largo_plazo"
        )
        
        # An√°lisis de diferenciaci√≥n
        ventaja_competitiva_clave = st.text_area(
            "Ventaja Competitiva Principal",
            value=default_ventaja_competitiva if "default_ventaja_competitiva" in locals() else "",
            placeholder="¬øQu√© hace √∫nica a su empresa? ¬øPor qu√© los clientes la eligen?",
            height=70,
            help="Describa su propuesta de valor diferencial"
            ,key="ventaja_competitiva_clave"
        )
        
        principales_riesgos = st.text_area(
            "Principales Riesgos del Negocio",
            value=default_principales_riesgos if "default_principales_riesgos" in locals() else "",
            placeholder="Ej: Concentraci√≥n de clientes, dependencia de proveedores, regulaci√≥n...",
            height=70,
            help="Identifique los 3 principales riesgos y c√≥mo los mitiga"
            ,key="principales_riesgos"
        )
        
        col1_desc, col2_desc = st.columns(2)
        with col1_desc:
            cuota_mercado = st.number_input(
                "Cuota de Mercado (%)",
                min_value=0.0,
                max_value=100.0,
                value=float(default_cuota_mercado) if "default_cuota_mercado" in locals() else 10.0,
                step=0.1,
                key="cuota_mercado_sidebar",
                help="% estimado en su segmento"
            )
        

        
        
        clientes_objetivo = st.text_area(
            "Clientes Objetivo",
            value=default_clientes_objetivo if "default_clientes_objetivo" in locals() else "",
            placeholder="Describa el segmento de clientes al que se dirige...",
            height=80,
            key="clientes_objetivo_sidebar"
        )
    # Guardar en session_state para uso global
    st.session_state['simbolo_moneda'] = simbolo_moneda

    # Datos hist√≥ricos
    st.subheader("üí∞ Datos de Ventas")

    # Pregunta simple y directa
    periodo_datos = st.radio(
        "¬øPara qu√© per√≠odo vas a introducir datos?",
        options=[
            "√öltimos 3 a√±os completos",
            "A√±o actual + 2 anteriores", 
            "Personalizar a√±os"
        ],
        index=0,  # Por defecto: √∫ltimos 3 a√±os completos
        horizontal=True
    )

    # Calcular a√±os autom√°ticamente seg√∫n la selecci√≥n
    a√±o_actual = datetime.now().year

    if periodo_datos == "√öltimos 3 a√±os completos":
        # Si estamos en 2025, muestra 2022, 2023, 2024
        a√±o_3 = a√±o_actual - 3
        a√±o_2 = a√±o_actual - 2
        a√±o_1 = a√±o_actual - 1
        primer_a√±o_proyeccion = a√±o_actual
        
    elif periodo_datos == "A√±o actual + 2 anteriores":
        # Si estamos en 2025, muestra 2023, 2024, 2025
        a√±o_3 = a√±o_actual - 2
        a√±o_2 = a√±o_actual - 1
        a√±o_1 = a√±o_actual
        primer_a√±o_proyeccion = a√±o_actual + 1
        
    else:  # Personalizar
        # Solo si elige personalizar, mostrar selector
        a√±o_final = st.selectbox(
            "Selecciona el √∫ltimo a√±o con datos:",
            options=list(range(a√±o_actual - 5, a√±o_actual + 1)),
            index=5  # Por defecto el a√±o actual
        )
        a√±o_3 = a√±o_final - 2
        a√±o_2 = a√±o_final - 1
        a√±o_1 = a√±o_final
        primer_a√±o_proyeccion = a√±o_final + 1

    # Mostrar claramente qu√© se est√° introduciendo
    st.info(f"üìä **Introduciendo datos reales**: {a√±o_3}, {a√±o_2}, {a√±o_1}")
    st.success(f"üìà **Se proyectar√°**: {primer_a√±o_proyeccion} ‚Üí {primer_a√±o_proyeccion + 4}")

    # Los campos de entrada con a√±os claros
    col1, col2, col3 = st.columns(3)

    with col1:
        ventas_a√±o_3 = formato_numero(
            f"Ventas {a√±o_3}",
            value=default_ventas[0] if 'default_ventas' in locals() else 13500000,
            key="ventas_3",
            help_text="Ventas reales"
        )

    with col2:
        ventas_a√±o_2 = formato_numero(
            f"Ventas {a√±o_2}",
            value=default_ventas[1] if 'default_ventas' in locals() else 14200000,
            key="ventas_2",
            help_text="Ventas reales"
        )

    with col3:
        ventas_a√±o_1 = formato_numero(
            f"Ventas {a√±o_1}",
            value=default_ventas[2] if 'default_ventas' in locals() else 15000000,
            key="ventas_1",
            help_text="Ventas reales"
        )

    # Guardar el a√±o base para usar despu√©s
    st.session_state['primer_a√±o_proyeccion'] = primer_a√±o_proyeccion

    # Estructura de costos
    st.subheader("Estructura de Costos")

    costos_variables_pct = st.slider(
        "Costos Variables (% de ventas)",
        min_value=10,
        max_value=98,
        value=default_costos_var if 'default_costos_var' in locals() else 40,
        step=1,
        key="costos_variables_slider",
        help="Incluye: materias primas, mercanc√≠as, comisiones de venta",
    ) / 100

    # Gastos de Personal - M√∫ltiples a√±os
    st.markdown("##### üí∞ Gastos de Personal")
    gastos_personal_historico = []
    
    if periodo_datos == "√öltimos 3 a√±os completos":
        a√±os_gastos = [a√±o_3, a√±o_2, a√±o_1]
    elif periodo_datos == "A√±o actual + 2 anteriores":
        a√±os_gastos = [a√±o_3, a√±o_2, a√±o_1]
    else:
        # Para personalizar, usar los mismos a√±os por ahora
        a√±os_gastos = [a√±o_3, a√±o_2, a√±o_1]
    
    # Obtener valores por defecto si es empresa demo
    if 'default_gastos_personal' in locals() and isinstance(default_gastos_personal, list):
        valores_default = default_gastos_personal
    else:
        valor_base = default_gastos_personal if 'default_gastos_personal' in locals() else 120000
        valores_default = [valor_base * 0.85, valor_base * 0.92, valor_base]
    
    for i, a√±o in enumerate(a√±os_gastos):
        gastos_personal_a√±o = st.number_input(
            f"Gastos Personal {a√±o}",
            min_value=0,
            value=int(valores_default[i]) if i < len(valores_default) else int(valores_default[-1]),
            step=5000,
            key=f"gastos_personal_{a√±o}"
        )
        gastos_personal_historico.append(gastos_personal_a√±o)
    
    # Usar el √∫ltimo a√±o como valor principal
    gastos_personal = gastos_personal_historico[-1]

    
    # Gastos Generales - M√∫ltiples a√±os
    st.markdown("##### üè¢ Gastos Generales")
    gastos_generales_historico = []
    
    # Obtener valores por defecto si es empresa demo
    if 'default_gastos_generales' in locals() and isinstance(default_gastos_generales, list):
        valores_default_gen = default_gastos_generales
    else:
        valor_base_gen = default_gastos_generales if 'default_gastos_generales' in locals() else 50000
        valores_default_gen = [valor_base_gen * 0.85, valor_base_gen * 0.92, valor_base_gen]
    
    for i, a√±o in enumerate(a√±os_gastos):
        gastos_generales_a√±o = st.number_input(
            f"Gastos Generales {a√±o}",
            min_value=0,
            value=int(valores_default_gen[i]) if i < len(valores_default_gen) else int(valores_default_gen[-1]),
            step=1000,
            key=f"gastos_generales_{a√±o}"
        )
        gastos_generales_historico.append(gastos_generales_a√±o)
    
    # Usar el √∫ltimo a√±o como valor principal
    gastos_generales = gastos_generales_historico[-1]
    # Gastos de Marketing - M√∫ltiples a√±os
    st.markdown("##### üì¢ Gastos de Marketing")
    gastos_marketing_historico = []
    
    # Obtener valores por defecto si es empresa demo
    if 'default_gastos_marketing' in locals() and isinstance(default_gastos_marketing, list):
        valores_default_mkt = default_gastos_marketing
    else:
        valor_base_mkt = default_gastos_marketing if 'default_gastos_marketing' in locals() else 30000
        valores_default_mkt = [valor_base_mkt * 0.85, valor_base_mkt * 0.92, valor_base_mkt]
    
    for i, a√±o in enumerate(a√±os_gastos):
        gastos_marketing_a√±o = st.number_input(
            f"Gastos Marketing {a√±o}",
            min_value=0,
            value=int(valores_default_mkt[i]) if i < len(valores_default_mkt) else int(valores_default_mkt[-1]),
            step=1000,
            key=f"gastos_marketing_{a√±o}"
        )
        gastos_marketing_historico.append(gastos_marketing_a√±o)
    
    # Usar el √∫ltimo a√±o como valor principal
    gastos_marketing = gastos_marketing_historico[-1]

    # C√°lculo de EBITDA en tiempo real
    st.markdown("---")
    st.subheader("üìä EBITDA Calculado")
    
    # Calcular valores
    coste_ventas = ventas_a√±o_1 * costos_variables_pct
    total_gastos = gastos_personal + gastos_generales + gastos_marketing
    ebitda_calculado = ventas_a√±o_1 - coste_ventas - total_gastos
    margen_ebitda_calc = (ebitda_calculado / ventas_a√±o_1 * 100) if ventas_a√±o_1 > 0 else 0
    
    # Mostrar desglose
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown(f"""
        **Desglose del c√°lculo:**
        - Ventas: **{simbolo_moneda}{ventas_a√±o_1:,.0f}**
        - Costos variables ({costos_variables_pct*100:.0f}%): **-{simbolo_moneda}{coste_ventas:,.0f}**
        - Gastos de personal: **-{simbolo_moneda}{gastos_personal:,.0f}**
        - Gastos generales: **-{simbolo_moneda}{gastos_generales:,.0f}**
        - Gastos de marketing: **-{simbolo_moneda}{gastos_marketing:,.0f}**
        """)
    with col2:
        st.metric("EBITDA", f"{simbolo_moneda}{ebitda_calculado:,.0f}")
        st.metric("Margen EBITDA", f"{margen_ebitda_calc:.1f}%")
    
    # Indicador de salud
    if margen_ebitda_calc < 5:
        st.error("‚ö†Ô∏è Margen EBITDA muy bajo - Revisar estructura de costos")
    elif margen_ebitda_calc < 10:
        st.warning("üìä Margen EBITDA mejorable")
    else:
        st.success("‚úÖ Margen EBITDA saludable")
    
    st.markdown("---")

    # Datos Laborales
    st.subheader("Datos Laborales")
    
    col1, col2 = st.columns(2)
    
    with col1:
        num_empleados = st.number_input(
            "N√∫mero de empleados",
            min_value=1,
            value=default_empleados if 'default_empleados' in locals() else 10,
            step=1,
            help="Total de empleados en plantilla",
            key="num_empleados_sidebar",
        )
        
        coste_medio_empleado = st.number_input(
            f"Coste medio por empleado ({get_simbolo_moneda()}/a√±o)",
            min_value=0,
            value=int(default_coste_empleado) if "default_coste_empleado" in locals() else 35000,
            step=1000,
            help="Incluye salario bruto + SS empresa + beneficios"
        )
    
    with col2:
        antiguedad_media = st.number_input(
            "Antig√ºedad media plantilla (a√±os)",
            min_value=0.0,
            max_value=40.0,
            value=float(default_antiguedad) if "default_antiguedad" in locals() else 5.0,
            step=0.5,
            help="A√±os promedio de antig√ºedad de los empleados"
        )
        
        rotacion_anual = st.number_input(
            "Rotaci√≥n anual esperada (%)",
            min_value=0.0,
            max_value=100.0,
            value=10.0,
            step=1.0,
            help="% de empleados que dejan la empresa al a√±o"
        )
    
    # NUEVO: Campos para reestructuraci√≥n
    st.markdown("---")

    st.markdown("#### üîÑ Reestructuraci√≥n de Plantilla")
        
    reestructuracion_prevista = st.checkbox(
        "¬øSe prev√© una reestructuraci√≥n a corto plazo?",
        value=False,
        help="Marcar si se planea reducir plantilla en los pr√≥ximos 12-24 meses"
    )
        
    if reestructuracion_prevista:
        # Sin columnas porque estamos en el sidebar
        porcentaje_afectados = st.number_input(
            "% de plantilla afectada",
            min_value=0.0,
            max_value=100.0,
            value=10.0,
            step=1.0,
            help="Porcentaje de empleados que ser√°n despedidos"
        )
            
        empleados_afectados = int(num_empleados * porcentaje_afectados / 100)
        st.caption(f"üë• Empleados afectados: {empleados_afectados}")
        
        tipo_indemnizacion = st.selectbox(
            "D√≠as de indemnizaci√≥n por a√±o",
            options=["20 d√≠as", "33 d√≠as", "45 d√≠as", "Otro"],
            help="Seg√∫n normativa o acuerdo colectivo"
        )
            
        if tipo_indemnizacion == "Otro":
            dias_indemnizacion = st.number_input(
                "Especificar d√≠as por a√±o",
                min_value=0,
                max_value=90,
                value=30,
                step=1
            )
        else:
            dias_indemnizacion = int(tipo_indemnizacion.split()[0])
        
            # C√°lculo de la provisi√≥n por reestructuraci√≥n
            salario_anual_medio = coste_medio_empleado / 1.35  # Salario bruto aproximado
            
            # Calcular indemnizaci√≥n con tope de 12 mensualidades
            dias_totales = dias_indemnizacion * antiguedad_media
            a√±os_salario = dias_totales / 365
            a√±os_salario_con_tope = min(a√±os_salario, 1.0)  # Tope de 12 meses = 1 a√±o
            
            indemnizacion_por_persona = salario_anual_medio * a√±os_salario_con_tope
            provision_reestructuracion = empleados_afectados * indemnizacion_por_persona
            
            # A√±adir costes adicionales (10% para asesores, outplacement, etc.)
            provision_total_reestructuracion = provision_reestructuracion * 1.1
            
            st.warning(f"""
            ‚ö†Ô∏è **Provisi√≥n por Reestructuraci√≥n**:
            - Empleados afectados: {empleados_afectados}
            - Indemnizaci√≥n por persona: {get_simbolo_moneda()}{indemnizacion_por_persona:,.0f}
            - Provisi√≥n base: {get_simbolo_moneda()}{provision_reestructuracion:,.0f}
            - **Provisi√≥n total recomendada**: {get_simbolo_moneda()}{provision_total_reestructuracion:,.0f}
            
            *Incluye 10% adicional para costes asociados (asesores, outplacement, litigios)*
            """)
            
            # Guardar en session_state para usar en el balance
            st.session_state['provision_reestructuracion'] = provision_total_reestructuracion
    else:
        provision_total_reestructuracion = 0
        st.session_state['provision_reestructuracion'] = 0

    # Valores por defecto para mantener compatibilidad
    provisiones_laborales = 0  # Ya no se usa, se maneja con reestructuraci√≥n
    meses_indemnizacion = 0  # Ya no se usa, se define en reestructuraci√≥n
    
    # Asegurar que provision_total_reestructuracion siempre exista
    if 'provision_total_reestructuracion' not in locals():
        provision_total_reestructuracion = 0
        
    pasivo_laboral_total = provision_total_reestructuracion  # Solo la provisi√≥n de reestructuraci√≥n

    # Solo mostrar info si hay provisi√≥n por reestructuraci√≥n
    if 'provision_total_reestructuracion' in locals() and provision_total_reestructuracion > 0:
        st.info(f"""
        üìä **Provisi√≥n por Reestructuraci√≥n**: {get_simbolo_moneda()}{provision_total_reestructuracion:,.0f}
        
        *Esta provisi√≥n se cargar√° autom√°ticamente en el Pasivo Corriente del Balance*
        """)

    # EQUITY BRIDGE PROFESIONAL
    st.markdown("---")
    st.markdown("#### üí∞ An√°lisis Profesional M&A")
    
    mostrar_equity_bridge = st.checkbox(
        "Mostrar Equity Bridge",
        value=False,
        help="An√°lisis profesional para valoraci√≥n M&A - Del Enterprise Value al Equity Value"
    )
    
    if mostrar_equity_bridge:
        st.info("""
        üìä **¬øQu√© es el Equity Bridge?**
        
        Es el 'puente' que muestra c√≥mo se pasa del valor de la empresa (EV) 
        al valor para los accionistas (Equity), descontando deudas y provisiones.
        
        Se mostrar√° en la pesta√±a de Valoraci√≥n.
        """)
        
        # Guardar preferencia
        st.session_state['mostrar_equity_bridge'] = True
    else:
        st.session_state['mostrar_equity_bridge'] = False
    
    # Otras provisiones
    st.markdown("##### üìã Provisiones adicionales")
    
    tiene_litigios = st.checkbox("¬øLitigios pendientes?", value=False)
    if tiene_litigios:
        provision_litigios = st.number_input(
            
            f"Estimaci√≥n provisi√≥n litigios ({get_simbolo_moneda()})",
            min_value=0,
            value=0,
            step=10000,
            help="Estimaci√≥n de costes por litigios en curso"
        )
        st.session_state['provision_litigios'] = provision_litigios
    else:
        st.session_state['provision_litigios'] = 0
    
    tiene_contingencias = st.checkbox("¬øContingencias fiscales?", value=False)
    if tiene_contingencias:
        provision_fiscal = st.number_input(
            f"Provisi√≥n contingencias fiscales ({get_simbolo_moneda()})",
            min_value=0,
            value=0,
            step=10000,
            help="Posibles ajustes de inspecciones fiscales"
        )
        st.session_state['provision_fiscal'] = provision_fiscal
    else:
        st.session_state['provision_fiscal'] = 0

    # Par√°metros financieros
    st.subheader("Par√°metros Financieros")
    
    # Crear tabs para organizar mejor la informaci√≥n
    # Bot√≥n de generaci√≥n
    
    # Selector de escenario de proyecci√≥n
    st.markdown("### üìä Escenario de Proyecci√≥n")
    if 'escenario_seleccionado' not in st.session_state:
        st.session_state.escenario_seleccionado = "Base"
    
    escenario = st.radio(
        "Selecciona el escenario para las proyecciones:",
        ["Optimista", "Base", "Pesimista"],
        index=1,  # Base por defecto
        key="escenario_seleccionado",
        help="El escenario afecta las tasas de crecimiento proyectadas"
    )
    
    # Mostrar descripci√≥n del escenario
    if escenario == "Optimista":
        st.success("üìà Proyecciones optimistas con mayor crecimiento")
    elif escenario == "Base":
        st.info("üìä Proyecciones realistas basadas en tendencias actuales")
    else:
        st.warning("üìâ Proyecciones conservadoras con menor crecimiento")
    st.markdown("---")

#     with col_btn1:
#         generar_proyeccion = st.button(
#             "üìà Proyecci√≥n Est√°ndar", 
#             type="primary", 
#             use_container_width=True,
#             help="Valoraci√≥n multi-m√©todo: DCF + M√∫ltiplos + Comparables"
#         )
    st.markdown("---")
    st.markdown("### üéØ M√©todo de Valoraci√≥n")
    col_btn1, col_btn2 = st.columns(2)
    
        
    # Inicializar variable
    generar_proyeccion = False
    with col_btn1:
        # CSS personalizado para bot√≥n rojo
        st.markdown('''
            <style>
            div[data-testid="column"]:nth-of-type(1) button {
                background-color: #DC143C;
                color: white;
                font-weight: bold;
                border: none;
                padding: 0.5rem;
                line-height: 1.2;
            }
            div[data-testid="column"]:nth-of-type(1) button:hover {
                background-color: #B22222;
                border: none;
            }
            </style>
        ''', unsafe_allow_html=True)
        
    # Configuraci√≥n de IA
    st.markdown("---")
    st.markdown("### ü§ñ Configuraci√≥n de IA (Opcional)")
    
    with st.expander("‚öôÔ∏è Configurar An√°lisis con IA", expanded=False):
        st.info("A√±ade an√°lisis avanzado con IA a tu informe")
        
        # Selector de modelo de IA
        modelo_ia = st.selectbox(
            "Modelo de IA:",
            ["Ninguno", "Gemini 2.5 Flash", "GPT-4 (OpenAI)", "Claude 3 (Anthropic)"],
            key="modelo_ia_selector",
            help="Selecciona qu√© IA usar para el an√°lisis"
        )
        
        # API Keys seg√∫n el modelo seleccionado
        if modelo_ia == "Gemini 2.5 Flash":
            gemini_key = st.text_input(
                "API Key de Gemini:",
                type="password",
                key="gemini_key_input",
                help="Obt√©n tu API key gratis en https://makersuite.google.com/app/apikey"
            )
            if gemini_key:
                st.session_state['gemini_api_key'] = gemini_key
                st.session_state['ia_selected'] = 'gemini'
                st.success("‚úÖ Gemini configurado")
        
        elif modelo_ia == "GPT-4 (OpenAI)":
            openai_key = st.text_input(
                "API Key de OpenAI:",
                type="password",
                key="openai_key_input",
                help="Obt√©n tu API key en https://platform.openai.com/api-keys"
            )
            if openai_key:
                st.session_state['openai_api_key'] = openai_key
                st.session_state['ia_selected'] = 'openai'
                st.success("‚úÖ OpenAI configurado")
        
        elif modelo_ia == "Claude 3 (Anthropic)":
            claude_key = st.text_input(
                "API Key de Anthropic:",
                type="password",
                key="claude_key_input",
                help="Obt√©n tu API key en https://console.anthropic.com/"
            )
            if claude_key:
                st.session_state['claude_api_key'] = claude_key
                st.session_state['ia_selected'] = 'claude'
                st.success("‚úÖ Claude configurado")
        
        if modelo_ia != "Ninguno" and st.session_state.get('ia_selected'):
            st.markdown("**‚ú® An√°lisis disponibles:**")
            st.markdown("""
            ‚Ä¢ SWOT estrat√©gico personalizado
            ‚Ä¢ An√°lisis financiero profundo
            ‚Ä¢ Proyecciones y escenarios
            ‚Ä¢ Recomendaciones estrat√©gicas
            ‚Ä¢ Tesis de inversi√≥n completa
            """)
    
    st.markdown("---")
    
    generar_proyeccion_mckinsey = st.button(
        "üìä EJECUTAR PROYECCI√ìN DCF", 
        type="primary", 
        use_container_width=True,
        help="Valoraci√≥n DCF pura con metodolog√≠a McKinsey (NOPLAT, ROIC, Beta sectorial)"
        )
    
    # Variable unificada para saber si generar proyecci√≥n
#     if generar_proyeccion:
#         st.session_state['metodo_valoracion'] = 'estandar'
    if generar_proyeccion_mckinsey:
        st.session_state['metodo_valoracion'] = 'mckinsey'
        generar_proyeccion = True  # Activar la generaci√≥n
    
    # Expander con explicaci√≥n del m√©todo
    with st.expander("‚ÑπÔ∏è **¬øC√≥mo funciona la Valoraci√≥n DCF McKinsey?**", expanded=False):
        st.markdown("""
        ### üìä Metodolog√≠a de Valoraci√≥n DCF - McKinsey
        
        **M√©todo profesional usado por fondos de inversi√≥n.**
        
        #### üìê F√≥rmula del WACC (Weighted Average Cost of Capital)
        
        **WACC = (E/V) √ó Ke + (D/V) √ó Kd √ó (1-T)**
        
        **Donde:**
        - **E** = Valor del Equity (patrimonio)
        - **V** = E + D (valor total de la empresa)
        - **D** = Valor de la Deuda
        - **Ke** = Coste del Equity = Rf + Œ≤ √ó (Rm - Rf)
        - **Kd** = Coste de la Deuda (tipo de inter√©s)
        - **T** = Tasa impositiva (tax shield)
        - **Rf** = Tasa libre de riesgo (bonos del estado)
        - **Œ≤** (Beta) = Volatilidad vs mercado
        - **Rm** = Rendimiento esperado del mercado
        
        #### üéØ F√≥rmula del Valor Terminal (VT)
        
        **VT = FCFn √ó (1+g) / (WACC - g)**
        
        **Donde:**
        - **FCFn** = Free Cash Flow del √∫ltimo a√±o proyectado
        - **g** = Tasa de crecimiento perpetuo (2-3% t√≠pico)
        - **WACC** = Coste medio ponderado del capital
        
        **F√≥rmula alternativa McKinsey:**
        **VT = NOPLATn √ó (1+g) √ó (1 - g/ROIC) / (WACC - g)**
        
        **Donde adicional:**
        - **NOPLAT** = Net Operating Profit Less Adjusted Taxes
        - **ROIC** = Return on Invested Capital
        - **(1 - g/ROIC)** = Factor de reinversi√≥n
        
        #### 1Ô∏è‚É£ **Flujos de Caja Libre (FCF)**
        FCF = EBITDA - Impuestos - CAPEX - Œî Capital Trabajo
        
        #### 2Ô∏è‚É£ **WACC (Coste del Capital)**
        WACC = (E/V √ó Ke) + (D/V √ó Kd √ó (1-T))
        Su empresa: ~8-10%
        
        #### 3Ô∏è‚É£ **Valor Terminal**
        VT = FCF‚ÇÖ √ó (1+g) / (WACC - g)
        Crecimiento perpetuo: 1.5-2.5%
        
        #### 4Ô∏è‚É£ **Valor Empresa**
        = VP(Flujos a√±os 1-5) + VP(Valor Terminal) - Deuda Neta
        
        #### üìà **Interpretaci√≥n**
        ‚Ä¢ **6-8x EBITDA**: Conservador
        ‚Ä¢ **8-10x EBITDA**: Mercado
        ‚Ä¢ **>10x EBITDA**: Premium
        """)    
    
    tab_activos, tab_pasivos, tab_patrimonio, tab_proyecciones, tab_parametros = st.tabs(["üìä ACTIVOS", "üí≥ PASIVOS", "üèõÔ∏è PATRIMONIO NETO", "üìà PROYECCIONES", "‚öôÔ∏è PAR√ÅMETROS"])
    with tab_activos:
        st.markdown("### üìä BALANCE - ACTIVO")
        
        # ACTIVO CORRIENTE
        with st.expander("üí∞ ACTIVO CORRIENTE", expanded=True):
            
            # Tesorer√≠a y Equivalentes
            st.markdown("#### Tesorer√≠a y Equivalentes")
            col1, col2 = st.columns(2)
            with col1:
                tesoreria_inicial = st.number_input(
                    f"Caja y bancos ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_tesoreria if 'default_tesoreria' in locals() else 0,
                    step=50000,
                    help="Efectivo + cuentas bancarias a la vista"
                )
                inversiones_cp = st.number_input(
                    f"Inversiones financieras temporales ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_inversiones_cp if 'default_inversiones_cp' in locals() else 0,
                    step=10000,
                    help="Dep√≥sitos, fondos mercado monetario < 1 a√±o"
                )
            with col2:
                total_tesoreria = tesoreria_inicial + inversiones_cp
                st.metric("Total Tesorer√≠a", f"{get_simbolo_moneda()}{total_tesoreria:,.0f}")
                
            # Cuentas por Cobrar
            st.markdown("#### Cuentas por Cobrar")
            col1, col2 = st.columns(2)
            with col1:
                clientes_inicial = st.number_input(
                    f"Clientes comerciales ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_clientes if 'default_clientes' in locals() else 0,
                    step=100000,
                    help="Facturas pendientes de cobro"
                )
                otros_deudores = st.number_input(
                    f"Otros deudores ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_otros_deudores if 'default_otros_deudores' in locals() else 0,
                    step=10000,
                    help="Deudores no comerciales, anticipos, etc."
                )
            with col2:
                admin_publica_deudora = st.number_input(
                    f"Administraciones p√∫blicas deudoras ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_admin_publica_deudora if 'default_admin_publica_deudora' in locals() else 0,
                    step=10000,
                    help="IVA a compensar, devoluciones pendientes, etc."
                )
                total_cuentas_cobrar = clientes_inicial + otros_deudores + admin_publica_deudora
                st.metric("Total Cuentas por Cobrar", f"{get_simbolo_moneda()}{total_cuentas_cobrar:,.0f}")
                
            # Existencias
            st.markdown("#### Existencias")
            col1, col2 = st.columns(2)
            with col1:
                inventario_inicial = st.number_input(
                    f"Inventarios ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_inventario if 'default_inventario' in locals() else 0,
                    step=100000,
                    help="Materias primas + productos en curso + terminados"
                )
            with col2:
                st.info(f"üì¶ Rotaci√≥n: {dias_stock if 'dias_stock' in locals() else 30} d√≠as")
                
            # Otros Activos Corrientes
            st.markdown("#### Otros Activos Corrientes")
            col1, col2 = st.columns(2)
            with col1:
                gastos_anticipados = st.number_input(
                    f"Gastos anticipados ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_gastos_anticipados if 'default_gastos_anticipados' in locals() else 0,
                    step=10000,
                    help="Seguros, alquileres pagados por anticipado"
                )
            with col2:
                activos_impuesto_diferido_cp = st.number_input(
                    f"Activos por impuesto diferido CP ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_activos_impuesto_cp if 'default_activos_impuesto_cp' in locals() else 0,
                    step=10000,
                    help="Cr√©ditos fiscales a compensar < 1 a√±o"
                )
                otros_activos_corrientes = 0  # Eliminamos este campo gen√©rico
                
            # Total Activo Corriente
            total_activo_corriente = (total_tesoreria + total_cuentas_cobrar + 
                                     inventario_inicial + gastos_anticipados + 
                                     activos_impuesto_diferido_cp)
            st.success(f"**TOTAL ACTIVO CORRIENTE: {get_simbolo_moneda()}{total_activo_corriente:,.0f}**")
        
        # ACTIVO NO CORRIENTE
        with st.expander("üè≠ ACTIVO NO CORRIENTE", expanded=True):
            
            # Inmovilizado Material
            st.markdown("#### Inmovilizado Material")
            col1, col2 = st.columns(2)
            with col1:
                activo_fijo_bruto = st.number_input(
                    f"Inmovilizado material bruto ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_activo_fijo if 'default_activo_fijo' in locals() else 0,
                    step=100000,
                    help="Coste hist√≥rico: terrenos, edificios, maquinaria"
                )
                depreciacion_acumulada = st.number_input(
                    f"Amortizaci√≥n acumulada material ({get_simbolo_moneda()})",
                    min_value=-999999999,
                    max_value=activo_fijo_bruto,
                    value=default_depreciacion if 'default_depreciacion' in locals() else 0,
                    step=100000,
                    help="Depreciaci√≥n acumulada del inmovilizado material"
                )
            with col2:
                activo_fijo_neto = activo_fijo_bruto - depreciacion_acumulada
                st.metric("Inmovilizado Material Neto", f"{get_simbolo_moneda()}{activo_fijo_neto:,.0f}")
                if activo_fijo_bruto > 0:
                    st.info(f"üìä Depreciaci√≥n: {(depreciacion_acumulada/activo_fijo_bruto*100):.1f}%")
                    
            # Inmovilizado Inmaterial
            st.markdown("#### Inmovilizado Inmaterial")
            col1, col2 = st.columns(2)
            with col1:
                activos_intangibles = st.number_input(
                    f"Activos intangibles brutos ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_intangibles if 'default_intangibles' in locals() else 0,
                    step=50000,
                    help="Software, patentes, marcas, fondo de comercio"
                )
                amortizacion_intangibles = st.number_input(
                    f"Amortizaci√≥n acumulada intangibles ({get_simbolo_moneda()})",
                    min_value=-999999999,
                    max_value=activos_intangibles,
                    value=default_amort_intangibles if 'default_amort_intangibles' in locals() else 0,
                    step=10000,
                    help="Amortizaci√≥n acumulada de intangibles"
                )
            with col2:
                intangibles_netos = activos_intangibles - amortizacion_intangibles
                st.metric("Intangibles Netos", f"{get_simbolo_moneda()}{intangibles_netos:,.0f}")

                
            # Inversiones Financieras LP
            st.markdown("#### Inversiones Financieras a Largo Plazo")
            col1, col2 = st.columns(2)
            with col1:
                inversiones_lp = st.number_input(
                    f"Participaciones en empresas ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_inversiones_lp if 'default_inversiones_lp' in locals() else 0,
                    step=50000,
                    help="Inversiones en otras empresas"
                )
                creditos_lp = st.number_input(
                    f"Cr√©ditos a largo plazo ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_creditos_lp if 'default_creditos_lp' in locals() else 0,
                    step=10000,
                    help="Pr√©stamos concedidos a terceros > 1 a√±o"
                )
            with col2:
                fianzas_depositos = st.number_input(
                    f"Fianzas y dep√≥sitos ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_fianzas if 'default_fianzas' in locals() else 0,
                    step=10000,
                    help="Fianzas de alquileres, suministros, etc."
                )
                total_inversiones_lp = inversiones_lp + creditos_lp + fianzas_depositos
                st.metric("Total Inversiones LP", f"{get_simbolo_moneda()}{total_inversiones_lp:,.0f}")

                
            # Activos por Impuesto Diferido LP
            st.markdown("#### Otros Activos No Corrientes")
            activos_impuesto_diferido_lp = st.number_input(
                f"Activos por impuesto diferido LP ({get_simbolo_moneda()})",
                min_value=0,
                value=default_activos_impuesto_lp if 'default_activos_impuesto_lp' in locals() else 0,
                step=10000,
                help="Cr√©ditos fiscales a compensar > 1 a√±o"
            )
            otros_activos_nc = 0  # Eliminamos este campo gen√©rico
            
            # Total Activo No Corriente
            total_activo_no_corriente = (activo_fijo_neto + intangibles_netos + 
                                        total_inversiones_lp + activos_impuesto_diferido_lp)
            st.success(f"**TOTAL ACTIVO NO CORRIENTE: {get_simbolo_moneda()}{total_activo_no_corriente:,.0f}**")
        
        # TOTAL ACTIVOS
        total_activos = total_activo_corriente + total_activo_no_corriente
        st.markdown("---")
        st.markdown(f"### üíº **TOTAL ACTIVOS: {get_simbolo_moneda()}{total_activos:,.0f}**")


        # Guardar en session_state para otros tabs
        st.session_state['total_activo_corriente'] = total_activo_corriente
        st.session_state['total_activo_no_corriente'] = total_activo_no_corriente
        st.session_state['total_activos'] = total_activos

    with tab_pasivos:
        st.markdown("### üí≥ BALANCE - PASIVO")
        
        # PASIVO CORRIENTE
        with st.expander("üìå PASIVO CORRIENTE", expanded=True):
            
            # Deuda Financiera CP
            st.markdown("#### üí≥ L√≠neas de Financiaci√≥n Circulante")

            # Sistema din√°mico de l√≠neas de financiaci√≥n
            if 'lineas_financiacion' not in st.session_state:
                st.session_state.lineas_financiacion = [{
                    'tipo': 'P√≥liza cr√©dito',
                    'banco': 'Banco principal',
                    'limite': 0,
                    'dispuesto': 0,
                    'tipo_interes': 4.5
                }]

            # Si se carg√≥ una empresa demo, actualizar con valores espec√≠ficos
            if 'empresa_demo' in locals() and empresa_demo != "Ninguna" and 'datos_excel' in locals() and 'info_general' in datos_excel if datos_excel else False:
                nombre_empresa = datos_excel['info_general'].get('nombre_empresa', '')
                
                # Configurar l√≠neas seg√∫n la empresa demo
                if nombre_empresa == 'Restaurante La Terraza SL':
                    st.session_state.lineas_financiacion = [{
                        'tipo': 'P√≥liza cr√©dito',
                        'banco': 'Banco Santander',
                        'limite': 75000,
                        'dispuesto': 40000,
                        'tipo_interes': 4.5,
                        'comision': 0.5
                    }]
                elif nombre_empresa == 'TechStart SaaS':
                    st.session_state.lineas_financiacion = [
                        {
                            'tipo': 'P√≥liza cr√©dito',
                            'banco': 'Banco BBVA',
                            'limite': 500000,
                            'dispuesto': 200000,
                            'tipo_interes': 4.0,
                            'comision': 0.5
                        },
                        {
                            'tipo': 'Factoring con recurso',
                            'banco': 'Banco Santander',
                            'limite': 300000,
                            'dispuesto': 250000,
                            'tipo_interes': 5.5,
                            'comision': 0.8
                        }
                    ]
                elif nombre_empresa == 'ModaOnline Shop':
                    st.session_state.lineas_financiacion = [{
                        'tipo': 'P√≥liza cr√©dito',
                        'banco': 'CaixaBank',
                        'limite': 300000,
                        'dispuesto': 150000,
                        'tipo_interes': 4.25,
                        'comision': 0.5
                    }]
                elif nombre_empresa == 'MetalPro Industrial':
                    st.session_state.lineas_financiacion = [
                        {
                            'tipo': 'P√≥liza cr√©dito',
                            'banco': 'Banco Sabadell',
                            'limite': 5000000,
                            'dispuesto': 3000000,
                            'tipo_interes': 3.75,
                            'comision': 0.5
                        },
                        {
                            'tipo': 'Confirming proveedores',
                            'banco': 'Banco Santander',
                            'limite': 8000000,
                            'dispuesto': 4500000,
                            'tipo_interes': 3.5,
                            'comision': 0.3
                        },
                        {
                            'tipo': 'Descuento comercial',
                            'banco': 'CaixaBank',
                            'limite': 4000000,
                            'dispuesto': 2500000,
                            'tipo_interes': 4.0,
                            'comision': 0.4
                        }
                    ]

            # Botones para gestionar l√≠neas
            col1, col2, col3 = st.columns([2, 1, 1])
            with col1:
                st.info(f"üìä Tienes {len(st.session_state.lineas_financiacion)} l√≠neas de financiaci√≥n configuradas")
            with col2:
                if st.button("‚ûï A√±adir l√≠nea", key="add_linea"):
                    st.session_state.lineas_financiacion.append({
                        'tipo': 'P√≥liza cr√©dito',
                        'banco': f'Banco {len(st.session_state.lineas_financiacion) + 1}',
                        'limite': 0,
                        'dispuesto': 0,
                        'tipo_interes': 4.5
                    })
                    st.rerun()
            with col3:
                if len(st.session_state.lineas_financiacion) > 1:
                    if st.button("‚ûñ Eliminar √∫ltima", key="del_linea"):
                        st.session_state.lineas_financiacion.pop()
                        st.rerun()

            # Crear las l√≠neas de financiaci√≥n
            total_limite = 0
            total_dispuesto = 0
            polizas_credito = []  # Para mantener compatibilidad con modelo_financiero

            for idx, linea in enumerate(st.session_state.lineas_financiacion):
                # Usar container en lugar de expander
                st.markdown(f"##### üìÑ L√≠nea {idx + 1}: {linea['tipo']} - {linea['banco']}")
                with st.container():
                    st.markdown("---")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Tipo de financiaci√≥n
                        tipo = st.selectbox(
                            "Tipo de financiaci√≥n",
                            [
                                "P√≥liza cr√©dito",
                                "P√≥liza cr√©dito stock", 
                                "Descuento comercial",
                                "Anticipo facturas",
                                "Factoring con recurso",
                                "Factoring sin recurso",
                                "Confirming proveedores",
                                "Pagar√©s empresa",
                                "Cr√©dito importaci√≥n"
                            ],
                            index=["P√≥liza cr√©dito", "P√≥liza cr√©dito stock", "Descuento comercial", 
                                "Anticipo facturas", "Factoring con recurso", "Factoring sin recurso",
                                "Confirming proveedores", "Pagar√©s empresa", "Cr√©dito importaci√≥n"].index(linea['tipo']),
                            key=f"tipo_{idx}",
                            help="Cada tipo tiene condiciones y costes diferentes"
                        )
                        st.session_state.lineas_financiacion[idx]['tipo'] = tipo
                        
                        # Entidad financiera
                        banco = st.text_input(
                            "Entidad financiera",
                            value=linea['banco'],
                            key=f"banco_{idx}",
                            placeholder="Nombre del banco o entidad"
                        )
                        st.session_state.lineas_financiacion[idx]['banco'] = banco
                        
                    with col2:
                        # L√≠mite
                        limite = st.number_input(
                            f"L√≠mite concedido ({get_simbolo_moneda()})",
                            min_value=0,
                            value=int(linea['limite']),
                            step=50000,
                            key=f"limite_{idx}",
                            help="Importe m√°ximo disponible"
                        )
                        st.session_state.lineas_financiacion[idx]['limite'] = limite
                        total_limite += limite
                        
                        # Dispuesto
                        dispuesto = st.number_input(
                            f"Importe dispuesto ({get_simbolo_moneda()})",
                            min_value=0,
                            max_value=limite,
                            value=int(min(linea['dispuesto'], limite)),
                            step=10000,
                            key=f"dispuesto_{idx}",
                            help="Importe actualmente utilizado"
                        )
                        st.session_state.lineas_financiacion[idx]['dispuesto'] = dispuesto
                        total_dispuesto += dispuesto
                    
                    # Condiciones financieras
                    col3, col4, col5 = st.columns(3)
                    
                    with col3:
                        tipo_interes = st.number_input(
                            "Tipo inter√©s (%)",
                            min_value=0.0,
                            max_value=15.0,
                            value=linea.get('tipo_interes', 4.5),
                            step=0.1,
                            key=f"tipo_interes_{idx}",
                            help="Tipo de inter√©s anual"
                        )
                        st.session_state.lineas_financiacion[idx]['tipo_interes'] = tipo_interes
                        
                    with col4:
                        # Comisiones seg√∫n tipo
                        if tipo in ["P√≥liza cr√©dito", "P√≥liza cr√©dito stock"]:
                            comision = st.number_input(
                                "Comisi√≥n apertura (%)",
                                min_value=0.0,
                                max_value=3.0,
                                value=0.5,
                                step=0.1,
                                key=f"comision_{idx}"
                            )
                        elif tipo == "Factoring con recurso" or tipo == "Factoring sin recurso":
                            comision = st.number_input(
                                "Comisi√≥n factoring (%)",
                                min_value=0.0,
                                max_value=5.0,
                                value=1.5,
                                step=0.1,
                                key=f"comision_{idx}"
                            )
                        else:
                            comision = 0.25
                        st.session_state.lineas_financiacion[idx]['comision'] = comision
                        
                    with col5:
                        # Informaci√≥n adicional
                        if limite > 0:
                            utilizacion = (dispuesto / limite) * 100
                            if utilizacion > 80:
                                st.error(f"‚ö†Ô∏è Utilizaci√≥n: {utilizacion:.0f}%")
                            elif utilizacion > 60:
                                st.warning(f"üìä Utilizaci√≥n: {utilizacion:.0f}%")
                            else:
                                st.success(f"‚úÖ Utilizaci√≥n: {utilizacion:.0f}%")
                    
                    # Preparar para modelo (mantener compatibilidad)
                    polizas_credito.append({
                        'tipo_poliza': tipo,
                        'banco': banco,
                        'limite': limite,
                        'dispuesto': dispuesto,
                        'tipo_interes': tipo_interes,
                        'comision_apertura': comision / 100,
                        'comision_no_dispuesto': 0.002 if "P√≥liza" in tipo else 0
                    })

            # Resumen de financiaci√≥n
            st.markdown("---")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("L√≠mite total", f"{get_simbolo_moneda()}{total_limite:,.0f}")
            with col2:
                st.metric("Total dispuesto", f"{get_simbolo_moneda()}{total_dispuesto:,.0f}")
            with col3:
                st.metric("Disponible", f"{get_simbolo_moneda()}{total_limite - total_dispuesto:,.0f}")
            with col4:
                utilizacion_total = (total_dispuesto / total_limite * 100) if total_limite > 0 else 0
                st.metric("Utilizaci√≥n media", f"{utilizacion_total:.1f}%")

            # Variables para mantener compatibilidad con el resto del c√≥digo
            poliza_limite = sum([l['limite'] for l in st.session_state.lineas_financiacion if 'P√≥liza cr√©dito' in l['tipo']])
            poliza_dispuesto = sum([l['dispuesto'] for l in st.session_state.lineas_financiacion if 'P√≥liza cr√©dito' in l['tipo']])
            descuento_limite = sum([l['limite'] for l in st.session_state.lineas_financiacion if 'Descuento' in l['tipo']])
            descuento_dispuesto = sum([l['dispuesto'] for l in st.session_state.lineas_financiacion if 'Descuento' in l['tipo']])
            factoring_importe = sum([l['dispuesto'] for l in st.session_state.lineas_financiacion if 'Factoring' in l['tipo']])
            confirming_limite = sum([l['limite'] for l in st.session_state.lineas_financiacion if 'Confirming' in l['tipo']])
            # Variables adicionales de compatibilidad (tipos de inter√©s)
            poliza_tipo = st.session_state.lineas_financiacion[0].get('tipo_interes', 4.5) if st.session_state.lineas_financiacion else 4.5
            descuento_tipo = next((l['tipo_interes'] for l in st.session_state.lineas_financiacion if 'Descuento' in l['tipo']), 5.0)
            factoring_tipo = next((l['tipo_interes'] for l in st.session_state.lineas_financiacion if 'Factoring' in l['tipo']), 5.0)
            factoring_recurso = "Con recurso" if any('con recurso' in l['tipo'].lower() for l in st.session_state.lineas_financiacion if 'Factoring' in l['tipo']) else "Sin recurso"
            confirming_coste = next((l.get('tipo_interes', 0.5)/100 for l in st.session_state.lineas_financiacion if 'Confirming' in l['tipo']), 0.02)

            # Total Deuda Financiera CP (para el balance)
            total_deuda_financiera_cp = (
                total_dispuesto + 
                st.session_state.get("prestamo_porcion_cp", 0) + 
                st.session_state.get("hipoteca_porcion_cp", 0) + 
                st.session_state.get("leasing_cp", 0)
            )
            
            # Mostrar desglose de la deuda financiera CP
            st.markdown("##### üí∞ Desglose Deuda Financiera CP")
            col1, col2 = st.columns(2)
            with col1:
                st.caption(f"L√≠neas de cr√©dito: {get_simbolo_moneda()}{total_dispuesto:,.0f}")
                st.caption(f"Pr√©stamo CP: {get_simbolo_moneda()}{st.session_state.get('prestamo_porcion_cp', 0):,.0f}")
            with col2:
                st.caption(f"Hipoteca CP: {get_simbolo_moneda()}{st.session_state.get('hipoteca_porcion_cp', 0):,.0f}")
                st.caption(f"Leasing CP: {get_simbolo_moneda()}{st.session_state.get('leasing_cp', 0):,.0f}")
            st.info(f"**TOTAL: {get_simbolo_moneda()}{total_deuda_financiera_cp:,.0f}**")
            
            # Pasivo Comercial
            st.markdown("#### Pasivo Comercial")
            col1, col2 = st.columns(2)
            with col1:
                proveedores_inicial = st.number_input(
                    f"Proveedores comerciales ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_proveedores if 'default_proveedores' in locals() else 0,
                    step=100000,
                    help="Facturas pendientes de pago a proveedores"
                )
            with col2:
                acreedores_servicios = st.number_input(
                    f"Acreedores por servicios ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_acreedores if 'default_acreedores' in locals() else 0,
                    step=50000,
                    help="Servicios profesionales, suministros, etc."
                )
            total_pasivo_comercial = proveedores_inicial + acreedores_servicios

            # Anticipos de clientes
            anticipos_clientes = st.number_input(
                f"Anticipos de clientes ({get_simbolo_moneda()})",
                min_value=0,
                value=default_anticipos if 'default_anticipos' in locals() else 0,
                step=50000,
                help="Cobros anticipados por ventas futuras"
            )
            
            # Otras Obligaciones CP
            st.markdown("#### Otras Obligaciones a Corto Plazo")
            col1, col2 = st.columns(2)
            with col1:
                remuneraciones_pendientes = st.number_input(
                    f"Remuneraciones pendientes ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_remuneraciones if 'default_remuneraciones' in locals() else 0,
                    step=10000,
                    help="Salarios, pagas extra, bonus pendientes"
                )
                admin_publica_acreedora = st.number_input(
                    f"Administraciones p√∫blicas ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_admin_acreedora if 'default_admin_acreedora' in locals() else 0,
                    step=50000,
                    help="IRPF, IVA, Seg. Social pendientes"
                )
            with col2:
                # Calcular valor por defecto de provisiones
                # Calcular todas las provisiones
                provision_reestructuracion = st.session_state.get('provision_reestructuracion', 0)
                provision_litigios = st.session_state.get('provision_litigios', 0)
                provision_fiscal = st.session_state.get('provision_fiscal', 0)
                provision_defecto = provision_reestructuracion + provision_litigios + provision_fiscal
                
                provisiones_cp = st.number_input(
                    f"Provisiones a corto plazo ({get_simbolo_moneda()})",
                    min_value=0,
                    value=round((default_provisiones_cp if 'default_provisiones_cp' in locals() else 0) + provision_defecto),
                    step=10000,
                    help=f"Total provisiones: Reestructuraci√≥n ({get_simbolo_moneda()}{provision_reestructuracion:,.0f}) + Litigios ({get_simbolo_moneda()}{provision_litigios:,.0f}) + Fiscal ({get_simbolo_moneda()}{provision_fiscal:,.0f})"
                )
                
                # Mostrar desglose si hay provisiones
                if provision_defecto > 0:
                    desglose_provisiones = []
                    if provision_reestructuracion > 0:
                        desglose_provisiones.append(f"Reestructuraci√≥n: {get_simbolo_moneda()}{provision_reestructuracion:,.0f}")
                    if provision_litigios > 0:
                        desglose_provisiones.append(f"Litigios: {get_simbolo_moneda()}{provision_litigios:,.0f}")
                    if provision_fiscal > 0:
                        desglose_provisiones.append(f"Fiscal: {get_simbolo_moneda()}{provision_fiscal:,.0f}")
                    
                    st.caption(f"üìå Desglose: {' | '.join(desglose_provisiones)}")

                otros_pasivos_cp = st.number_input(
                    f"Otros pasivos corrientes ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_otros_pasivos_cp if 'default_otros_pasivos_cp' in locals() else 0,
                    step=10000,
                    help="Otros pasivos no clasificados"
                )
                
            # Total Pasivo Corriente
            total_pasivo_corriente = (total_deuda_financiera_cp + total_pasivo_comercial +
                                     anticipos_clientes + remuneraciones_pendientes + 
                                     admin_publica_acreedora + provisiones_cp + otros_pasivos_cp)
            st.success(f"**TOTAL PASIVO CORRIENTE: {get_simbolo_moneda()}{total_pasivo_corriente:,.0f}**")
        
        # PASIVO NO CORRIENTE
        with st.expander("üìä PASIVO NO CORRIENTE", expanded=True):
            
            # Deuda Financiera LP
            st.markdown("#### Deuda Financiera a Largo Plazo")
            
            # Pr√©stamos
            with st.container():
                st.markdown("**Pr√©stamos bancarios**")
                st.markdown("**Pr√©stamos bancarios**")
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    prestamo_importe_original = st.number_input(
                        f"Importe original ({get_simbolo_moneda()})",
                        min_value=0,
                        value=default_prestamo_principal if 'default_prestamo_principal' in locals() else 0,
                        step=100000,
                        help="Importe original del pr√©stamo"
                    )
                with col2:
                    prestamo_plazo_original = st.number_input(
                        "Plazo original (a√±os)",
                        min_value=1,
                        max_value=30,
                        value=default_prestamo_plazo if 'default_prestamo_plazo' in locals() else 10,
                        step=1,
                        help="Plazo total del pr√©stamo en a√±os"
                    )
                with col3:
                    prestamo_a√±os_transcurridos = st.number_input(
                        "A√±os transcurridos",
                        min_value=0,
                        max_value=max(prestamo_plazo_original - 1, 0),
                        value=default_prestamo_a√±os_transcurridos if 'default_prestamo_a√±os_transcurridos' in locals() else 5,
                        step=1,
                        help="A√±os ya pagados del pr√©stamo"
                    )
                with col4:
                    prestamo_comision_apertura = formato_porcentaje(
                        "Comisi√≥n apertura",
                        value=0.5,
                        key="prestamo_comision",
                        max_value=5.0,
                        
                    )
                
                col1b, col2b, col3b, col4b = st.columns(4)
                with col1b:
                    prestamo_interes = formato_porcentaje(
                        "Tipo inter√©s",
                        value=3.5,
                        key="prestamo_interes",
                        max_value=15.0,
                    )
                with col2b:
                    prestamo_sistema = st.selectbox(
                        "Sistema amortizaci√≥n",
                        ["Franc√©s", "Lineal", "Americano"],
                        index=0,
                        help="Sistema de amortizaci√≥n del pr√©stamo"
                    )
                
                # C√°lculo del capital pendiente si hay pr√©stamo
                if prestamo_importe_original > 0 and prestamo_plazo_original > 0:
                    # C√°lculo para sistema franc√©s (m√°s com√∫n)
                    if prestamo_sistema == "Franc√©s":
                        meses_totales = prestamo_plazo_original * 12
                        meses_transcurridos = prestamo_a√±os_transcurridos * 12
                        meses_restantes = meses_totales - meses_transcurridos
                        tipo_mensual = prestamo_interes / 100 / 12
                        
                        if tipo_mensual > 0 and meses_restantes > 0:
                            factor_total = (1 + tipo_mensual) ** meses_totales
                            factor_transcurrido = (1 + tipo_mensual) ** meses_transcurridos
                            
                            # Capital pendiente total
                            prestamo_capital_pendiente = prestamo_importe_original * (factor_total - factor_transcurrido) / (factor_total - 1)
                            
                            # C√°lculo de la porci√≥n corriente (pr√≥ximos 12 meses)
                            if meses_restantes > 12:
                                factor_12_meses = (1 + tipo_mensual) ** (meses_transcurridos + 12)
                                capital_en_1_a√±o = prestamo_importe_original * (factor_total - factor_12_meses) / (factor_total - 1)
                                prestamo_porcion_cp = prestamo_capital_pendiente - capital_en_1_a√±o
                                prestamo_porcion_lp = capital_en_1_a√±o
                            else:
                                # Si quedan 12 meses o menos, todo es corriente
                                prestamo_porcion_cp = prestamo_capital_pendiente
                                prestamo_porcion_lp = 0
                                
                            # Cuota mensual para informaci√≥n
                            prestamo_cuota = prestamo_importe_original * (tipo_mensual * factor_total) / (factor_total - 1)
                            
                        else:
                            # Sin inter√©s o sin meses restantes
                            if meses_restantes > 0:
                                prestamo_capital_pendiente = prestamo_importe_original * (meses_restantes / meses_totales)
                                if meses_restantes > 12:
                                    prestamo_porcion_cp = prestamo_capital_pendiente * (12 / meses_restantes)
                                    prestamo_porcion_lp = prestamo_capital_pendiente - prestamo_porcion_cp
                                else:
                                    prestamo_porcion_cp = prestamo_capital_pendiente
                                    prestamo_porcion_lp = 0
                            else:
                                prestamo_capital_pendiente = 0
                                prestamo_porcion_cp = 0
                                prestamo_porcion_lp = 0
                                prestamo_cuota = 0
                    
                    # Sistema lineal
                    elif prestamo_sistema == "Lineal":
                        meses_totales = prestamo_plazo_original * 12
                        meses_transcurridos = prestamo_a√±os_transcurridos * 12
                        meses_restantes = meses_totales - meses_transcurridos
                        
                        if meses_restantes > 0:
                            # En sistema lineal, la amortizaci√≥n de capital es constante
                            amortizacion_mensual = prestamo_importe_original / meses_totales
                            prestamo_capital_pendiente = amortizacion_mensual * meses_restantes
                            
                            if meses_restantes > 12:
                                prestamo_porcion_cp = amortizacion_mensual * 12
                                prestamo_porcion_lp = prestamo_capital_pendiente - prestamo_porcion_cp
                            else:
                                prestamo_porcion_cp = prestamo_capital_pendiente
                                prestamo_porcion_lp = 0
                        else:
                            prestamo_capital_pendiente = 0
                            prestamo_porcion_cp = 0
                            prestamo_porcion_lp = 0
                    
                    # Sistema americano
                    else:  # Americano
                        meses_restantes = (prestamo_plazo_original - prestamo_a√±os_transcurridos) * 12
                        if meses_restantes > 0:
                            # En sistema americano se paga todo el capital al final
                            prestamo_capital_pendiente = prestamo_importe_original
                            if meses_restantes > 12:
                                prestamo_porcion_cp = 0  # Solo intereses
                                prestamo_porcion_lp = prestamo_importe_original
                            else:
                                prestamo_porcion_cp = prestamo_importe_original  # Vence en menos de 1 a√±o
                                prestamo_porcion_lp = 0
                        else:
                            prestamo_capital_pendiente = 0
                            prestamo_porcion_cp = 0
                            prestamo_porcion_lp = 0
                    
                    # Mostrar informaci√≥n del pr√©stamo
                    if prestamo_capital_pendiente > 0:
                        with col3b:
                            st.info(f"Capital pendiente: {get_simbolo_moneda()}{prestamo_capital_pendiente:,.0f}")
                        with col4b:
                            a√±os_restantes = (prestamo_plazo_original - prestamo_a√±os_transcurridos)
                            st.info(f"A√±os restantes: {a√±os_restantes}")
                        
                        # Mostrar desglose CP/LP
                        st.caption(f"üìä Desglose: CP: {get_simbolo_moneda()}{prestamo_porcion_cp:,.0f} | LP: {get_simbolo_moneda()}{prestamo_porcion_lp:,.0f}")
                        
                        # Mostrar comisi√≥n si aplica
                        if prestamo_comision_apertura > 0:
                            comision = prestamo_importe_original * (prestamo_comision_apertura / 100)
                            st.caption(f"üí∞ Comisi√≥n apertura pagada: {get_simbolo_moneda()}{comision:,.0f}")
                
                else:
                    prestamo_capital_pendiente = 0
                    prestamo_porcion_cp = 0
                    prestamo_porcion_lp = 0
                    prestamo_cuota = 0
                
                # Para compatibilidad, mantener prestamo_principal como el LP
                prestamo_principal = prestamo_porcion_lp
                # Guardar en session_state para que est√© disponible en otros c√°lculos
                st.session_state['prestamo_porcion_cp'] = prestamo_porcion_cp
                st.session_state['prestamo_porcion_lp'] = prestamo_porcion_lp
                prestamo_a√±os = prestamo_plazo_original - prestamo_a√±os_transcurridos if prestamo_plazo_original > 0 else 5

# IMPORTANTE: Tambi√©n hay que actualizar el c√°lculo del pasivo corriente
# Buscar donde se calcula total_deuda_financiera_cp y a√±adir:
# total_deuda_financiera_cp = total_dispuesto + prestamo_porcion_cp

# Y en el c√°lculo de total_deuda_financiera_lp usar:
# total_deuda_financiera_lp = (prestamo_porcion_lp + hipoteca_principal + 
#                             leasing_lp + otros_prestamos_lp)
            # Hipotecas
            with st.container():
                st.markdown("**Hipotecas**")
                col1, col2 = st.columns(2)
                with col1:
                    hipoteca_importe_original = st.number_input(
                        f"Importe original hipoteca ({get_simbolo_moneda()})",
                        min_value=0,
                        value=default_hipoteca_original if 'default_hipoteca_original' in locals() else 0,
                        step=100000,
                        help="Importe inicial del pr√©stamo hipotecario"
                    )
                    hipoteca_interes = formato_porcentaje(
                        "Tipo inter√©s hipoteca",
                        value=default_hipoteca_interes if 'default_hipoteca_interes' in locals() else 3.25,
                        key="hipoteca_interes",
                        max_value=10.0,
                    )
                with col2:
                    hipoteca_plazo_total = st.number_input(
                        "Plazo total (a√±os)",
                        min_value=0,
                        max_value=30,
                        value=default_hipoteca_plazo if 'default_hipoteca_plazo' in locals() else 15,
                        step=1
                    )
                    hipoteca_meses_transcurridos = st.number_input(
                        "Meses transcurridos",
                        min_value=0,
                        max_value=max(hipoteca_plazo_total * 12, 1),
                        value=default_hipoteca_meses if 'default_hipoteca_meses' in locals() else 60,
                        step=12
                    )
                    
            # Calcular hipoteca pendiente
            if hipoteca_importe_original > 0 and hipoteca_plazo_total > 0:
                meses_totales = hipoteca_plazo_total * 12
                meses_restantes = meses_totales - hipoteca_meses_transcurridos
                if meses_restantes > 0:
                    # Sistema de amortizaci√≥n franc√©s
                    tipo_mensual = hipoteca_interes / 100 / 12
                    if tipo_mensual > 0:
                        # F√≥rmula del capital pendiente en sistema franc√©s
                        factor_total = (1 + tipo_mensual) ** meses_totales
                        factor_transcurrido = (1 + tipo_mensual) ** hipoteca_meses_transcurridos
                        hipoteca_principal = hipoteca_importe_original * (factor_total - factor_transcurrido) / (factor_total - 1)
                    else:
                        # Si no hay inter√©s, usar c√°lculo lineal
                        hipoteca_principal = hipoteca_importe_original * (meses_restantes / meses_totales)
                else:
                    hipoteca_principal = 0
            else:
                hipoteca_principal = 0
            
            # Calcular desglose CP/LP de la hipoteca si existe
            if hipoteca_principal > 0 and meses_restantes > 0:
                # Calcular porci√≥n CP (pr√≥ximos 12 meses)
                if meses_restantes <= 12:
                    hipoteca_porcion_cp = hipoteca_principal
                    hipoteca_porcion_lp = 0
                else:
                    # Sistema franc√©s: calcular capital de los pr√≥ximos 12 meses
                    if tipo_mensual > 0:
                        factor_12_meses = (1 + tipo_mensual) ** (hipoteca_meses_transcurridos + 12)
                        capital_en_1_a√±o = hipoteca_importe_original * (factor_total - factor_12_meses) / (factor_total - 1)
                        hipoteca_porcion_cp = hipoteca_principal - capital_en_1_a√±o
                        hipoteca_porcion_lp = capital_en_1_a√±o
                    else:
                        # Sin inter√©s, divisi√≥n proporcional
                        hipoteca_porcion_cp = hipoteca_principal * (12 / meses_restantes)
                        hipoteca_porcion_lp = hipoteca_principal - hipoteca_porcion_cp
                
                # Guardar en session_state
                st.session_state['hipoteca_porcion_cp'] = hipoteca_porcion_cp
                st.session_state['hipoteca_porcion_lp'] = hipoteca_porcion_lp
            else:
                hipoteca_porcion_cp = 0
                hipoteca_porcion_lp = 0
                st.session_state['hipoteca_porcion_cp'] = 0
                st.session_state['hipoteca_porcion_lp'] = 0
            
            # Mostrar capital pendiente de la hipoteca si existe
            if "hipoteca_importe_original" in locals() and "hipoteca_principal" in locals() and hipoteca_importe_original > 0 and hipoteca_principal > 0:
                st.info(f"üè† **Capital pendiente hipoteca**: {get_simbolo_moneda()}{hipoteca_principal:,.0f}")
                col1_info, col2_info, col3_info = st.columns(3)
                with col1_info:
                    st.caption(f"CP: {get_simbolo_moneda()}{st.session_state.get('hipoteca_porcion_cp', 0):,.0f}")
                with col2_info:
                    st.caption(f"LP: {get_simbolo_moneda()}{st.session_state.get('hipoteca_porcion_lp', 0):,.0f}")
                with col3_info:
                    porcentaje_pagado = ((hipoteca_importe_original - hipoteca_principal) / hipoteca_importe_original) * 100
                    st.caption(f"Progreso: {porcentaje_pagado:.1f}%")
            # Leasing
            with st.container():
                st.markdown("**Leasing**")
                col1, col2 = st.columns(2)
                with col1:
                    leasing_total = st.number_input(
                        f"Valor pendiente leasing ({get_simbolo_moneda()})",
                        min_value=0,
                        value=default_leasing if 'default_leasing' in locals() else 0,
                        step=50000,
                        help="Cuotas pendientes de pago"
                    )
                    leasing_tipo = st.selectbox(
                        "Tipo de leasing",
                        ["Financiero", "Operativo"],
                        help="Financiero: aparece en balance. Operativo: off-balance"
                    )
                with col2:
                    leasing_cuota = st.number_input(
                        f"Cuota mensual ({get_simbolo_moneda()})",
                        min_value=0,
                        value=default_leasing_cuota if 'default_leasing_cuota' in locals() else 0,
                        step=1000
                    )
                    leasing_meses = st.number_input(
                        "Meses restantes",
                        min_value=0,
                        max_value=120,
                        value=default_leasing_meses if 'default_leasing_meses' in locals() else 0,
                        step=1
                    )
                    
            # Calcular desglose CP/LP del leasing si existe
            if leasing_total > 0 and leasing_meses > 0 and leasing_cuota > 0:
                if leasing_meses <= 12:
                    leasing_cp = leasing_total
                    leasing_lp = 0
                else:
                    leasing_cp = leasing_cuota * 12
                    leasing_lp = leasing_total - leasing_cp
                
                # Mostrar informaci√≥n del leasing
                st.info(f"üìä **Capital pendiente leasing**: {get_simbolo_moneda()}{leasing_total:,.0f}")
                col1_info, col2_info = st.columns(2)
                with col1_info:
                    st.caption(f"CP (12 meses): {get_simbolo_moneda()}{leasing_cp:,.0f}")
                with col2_info:
                    st.caption(f"LP (resto): {get_simbolo_moneda()}{leasing_lp:,.0f}")
                
                # Guardar en session_state
                st.session_state['leasing_cp'] = leasing_cp
                st.session_state['leasing_lp'] = leasing_lp
            else:
                leasing_cp = 0
                leasing_lp = 0
                st.session_state['leasing_cp'] = 0
                st.session_state['leasing_lp'] = 0
                    
            # Otros pr√©stamos LP
            otros_prestamos_lp = st.number_input(
                f"Otros pr√©stamos LP ({get_simbolo_moneda()})",
                min_value=0,
                value=default_otros_prestamos if 'default_otros_prestamos' in locals() else 0,
                step=50000,
                help="Pr√©stamos de socios, entidades de cr√©dito no bancarias, etc."
            )
            
            # Total Deuda Financiera LP
            total_deuda_financiera_lp = ((st.session_state.get("prestamo_porcion_lp", 0) if st.session_state.get("prestamo_porcion_lp", 0) > 0 else prestamo_principal) + hipoteca_porcion_lp +
                                        leasing_lp + otros_prestamos_lp)
            st.info(f"üí∞ Total Deuda Financiera LP: {get_simbolo_moneda()}{total_deuda_financiera_lp:,.0f}")
            
            # Provisiones LP
            st.markdown("#### Provisiones a Largo Plazo")
            col1, col2 = st.columns(2)
            with col1:
                provisiones_riesgos = st.number_input(
                    f"Provisiones para riesgos ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_provisiones_riesgos if 'default_provisiones_riesgos' in locals() else 0,
                    step=50000,
                    help="Litigios, garant√≠as, responsabilidades"
                )
                # provisiones_laborales ya existe desde el pasivo laboral
            with col2:
                otras_provisiones_lp = st.number_input(
                    f"Otras provisiones LP ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_otras_provisiones_lp if 'default_otras_provisiones_lp' in locals() else 0,
                    step=10000,
                    help="Otras provisiones a largo plazo"
                )
            total_provisiones_lp = provisiones_riesgos + otras_provisiones_lp
            
            # Pasivos por Impuesto Diferido
            pasivos_impuesto_diferido = st.number_input(
                f"Pasivos por impuesto diferido ({get_simbolo_moneda()})",
                min_value=0,
                value=default_pasivos_impuesto_dif if 'default_pasivos_impuesto_dif' in locals() else 0,
                step=10000,
                help="Diferencias temporarias imponibles"
            )
            
            # Total Pasivo No Corriente
            total_pasivo_no_corriente = (total_deuda_financiera_lp + total_provisiones_lp + 
                                        pasivos_impuesto_diferido)
            st.success(f"**TOTAL PASIVO NO CORRIENTE: {get_simbolo_moneda()}{total_pasivo_no_corriente:,.0f}**")
        
        # TOTAL PASIVOS
        total_pasivos = total_pasivo_corriente + total_pasivo_no_corriente
        st.markdown("---")
        st.markdown(f"### üí≥ **TOTAL PASIVOS: {get_simbolo_moneda()}{total_pasivos:,.0f}**")

        # Guardar en session_state para otros tabs
        st.session_state['total_pasivo_corriente'] = total_pasivo_corriente
        st.session_state['total_pasivo_no_corriente'] = total_pasivo_no_corriente
        st.session_state['total_pasivos'] = total_pasivos

    with tab_patrimonio:
        st.markdown("### üèõÔ∏è BALANCE - PATRIMONIO NETO")
        
        # Capital y Reservas
        with st.expander("üíé CAPITAL Y RESERVAS", expanded=True):
            
            # Capital
            st.markdown("#### Capital")
            col1, col2 = st.columns(2)
            with col1:
                capital_social = st.number_input(
                    f"Capital social ({get_simbolo_moneda()})",
                    min_value=3000,  # M√≠nimo legal SA
                    value=default_capital_social if 'default_capital_social' in locals() else 3000,
                    step=10000,
                    help="Capital escriturado y desembolsado"
                )
            with col2:
                prima_emision = st.number_input(
                    f"Prima de emisi√≥n ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_prima_emision if 'default_prima_emision' in locals() else 0,
                    step=10000,
                    help="Sobreprecio en emisi√≥n de acciones"
                )
                
            # Reservas
            st.markdown("#### Reservas")
            col1, col2 = st.columns(2)
            with col1:
                reserva_legal = st.number_input(
                    f"Reserva legal ({get_simbolo_moneda()})",
                    min_value=0,
                    max_value=int(capital_social * 0.2),  # L√≠mite 20% capital
                    value=default_reserva_legal if 'default_reserva_legal' in locals() else min(20000, int(capital_social * 0.2)),
                    step=1000,
                    help="Obligatoria: 10% beneficio hasta 20% capital"
                )
                reservas = st.number_input(
                    f"Otras reservas ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_otras_reservas if 'default_otras_reservas' in locals() else 0,
                    step=50000,
                    help="Reservas voluntarias, estatutarias, etc."
                )
            with col2:
                total_reservas = reserva_legal + reservas
                st.metric("Total Reservas", f"{get_simbolo_moneda()}{total_reservas:,.0f}")
                
        # Resultados
        with st.expander("üìà RESULTADOS", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                resultados_acumulados = st.number_input(
                    f"Resultados ejercicios anteriores ({get_simbolo_moneda()})",
                    value=default_resultados_acum if 'default_resultados_acum' in locals() else 0,
                    step=50000,
                    help="Beneficios/p√©rdidas acumuladas no distribuidas"
                )
            with col2: 
                # Ajustar resultado por provisiones nuevas
                provision_litigios_nueva = st.session_state.get('provision_litigios', 0)
                provision_fiscal_nueva = st.session_state.get('provision_fiscal', 0)
                provision_reestructuracion_nueva = st.session_state.get('provision_reestructuracion', 0)
                ajuste_provisiones = provision_litigios_nueva + provision_fiscal_nueva + provision_reestructuracion_nueva
                
                # Calcular resultado ajustado
                resultado_base = round(default_resultado_ejercicio) if 'default_resultado_ejercicio' in locals() else 0
                resultado_ajustado = round(resultado_base - ajuste_provisiones)

                resultado_ejercicio = st.number_input(
                    f"Resultado del ejercicio ({get_simbolo_moneda()})",
                    value=resultado_ajustado,
                    step=10000,
                    help=f"Beneficio/p√©rdida del a√±o actual. Ajustado por provisiones: -{get_simbolo_moneda()}{ajuste_provisiones:,.0f}" if ajuste_provisiones > 0 else "Beneficio/p√©rdida del a√±o actual"
                )
                # Mostrar desglose si hay ajustes por provisiones
                if ajuste_provisiones > 0:
                    desglose_ajustes = []
                    if provision_reestructuracion_nueva > 0:
                        desglose_ajustes.append(f"Reestructuraci√≥n: {get_simbolo_moneda()}{provision_reestructuracion_nueva:,.0f}")
                    if provision_litigios_nueva > 0:
                        desglose_ajustes.append(f"Litigios: {get_simbolo_moneda()}{provision_litigios_nueva:,.0f}")
                    if provision_fiscal_nueva > 0:
                        desglose_ajustes.append(f"Fiscal: {get_simbolo_moneda()}{provision_fiscal_nueva:,.0f}")
                    
                    st.caption(f"üìå Ajuste por provisiones: {' | '.join(desglose_ajustes)}")
                    
        # Otros componentes
        with st.expander("üîß OTROS COMPONENTES", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                ajustes_valor = st.number_input(
                    f"Ajustes por cambio de valor ({get_simbolo_moneda()})",
                    value=default_ajustes_valor if 'default_ajustes_valor' in locals() else 0,
                    step=10000,
                    help="Ajustes por valoraci√≥n de instrumentos financieros"
                )

            with col2:
                subvenciones = st.number_input(
                    f"Subvenciones de capital ({get_simbolo_moneda()})",
                    min_value=0,
                    value=default_subvenciones if 'default_subvenciones' in locals() else 0,
                    step=10000,
                    help="Subvenciones no reintegrables pendientes de imputar"
                )
                
        # TOTAL PATRIMONIO NETO
        total_patrimonio_neto = (capital_social + prima_emision + total_reservas + 
                                resultados_acumulados + resultado_ejercicio + 
                                ajustes_valor + subvenciones)

        # Recalcular totales para la comprobaci√≥n
        total_activos = total_activo_corriente + total_activo_no_corriente
        total_pasivos = total_pasivo_corriente + total_pasivo_no_corriente
        st.markdown("---")
        st.markdown(f"### üèõÔ∏è **TOTAL PATRIMONIO NETO: {get_simbolo_moneda()}{total_patrimonio_neto:,.0f}**")
        
        # Verificaci√≥n del Balance
        st.markdown("---")
        st.markdown("### ‚úÖ COMPROBACI√ìN DEL BALANCE")
        
        # Recuperar totales de session_state
        total_activos = st.session_state.get('total_activos', 0)
        total_pasivos = st.session_state.get('total_pasivos', 0)
        
        col1, col2, col3 = st.columns(3)
        with col1:
             st.metric("Total Activos", f"{get_simbolo_moneda()}{total_activos:,.0f}")
        with col2:
            total_pasivo_patrimonio = total_pasivos + total_patrimonio_neto
            st.metric("Pasivos + PN", f"{get_simbolo_moneda()}{total_pasivo_patrimonio:,.0f}")
        with col3:
            diferencia = total_activos - total_pasivo_patrimonio
            if abs(diferencia) < 1:
                st.success("‚úÖ Balance cuadrado")
            else:
                st.error(f"‚ùå Diferencia: {get_simbolo_moneda()}{diferencia:,.0f}") 

    with tab_proyecciones:
        st.markdown("### üìà PROYECCIONES")
        st.markdown("---")
        st.markdown("#### Plan de Inversiones (CAPEX)")
        
        col1, col2 = st.columns(2)
        with col1:
            capex_a√±o1 = st.number_input(
                f"Inversi√≥n A√±o 1 ({get_simbolo_moneda()})", 
                min_value=0,
                value=int(default_capex_a√±o1) if 'default_capex_a√±o1' in locals() else 0,
                step=50000,
                help="Sin l√≠mite m√°ximo - introduce la inversi√≥n necesaria"
            )
            capex_a√±o2 = st.number_input(
                f"Inversi√≥n A√±o 2 ({get_simbolo_moneda()})", 
                min_value=0,
                value=int(default_capex_a√±o2) if 'default_capex_a√±o2' in locals() else 0,
                step=50000
            )
            capex_a√±o3 = st.number_input(
                f"Inversi√≥n A√±o 3 ({get_simbolo_moneda()})", 
                min_value=0,
                value=int(default_capex_a√±o3) if 'default_capex_a√±o3' in locals() else 0,
                step=50000
            )
        with col2:
            capex_a√±o4 = st.number_input(
                f"Inversi√≥n A√±o 4 ({get_simbolo_moneda()})", 
                min_value=0,
                value=int(default_capex_a√±o4) if 'default_capex_a√±o4' in locals() else 0,
                step=50000
            )
            capex_a√±o5 = st.number_input(
                f"Inversi√≥n A√±o 5 ({get_simbolo_moneda()})", 
                min_value=0,
                value=int(default_capex_a√±o5) if 'default_capex_a√±o5' in locals() else 0,
                step=50000
            )
            vida_util = st.slider("Vida √∫til media (a√±os)", 3, 20, 10)

        st.markdown("---")
        st.markdown("---")
        st.markdown("#### üéØ Eventos Extraordinarios")
        col1, col2 = st.columns(2)
        with col1:
            crecimiento_extraordinario = st.number_input(
                "Expectativas de crecimiento - Impacto (%)", 
                min_value=-50.0, 
                max_value=100.0, 
                value=0.0, 
                step=5.0,
                help="Ajuste por eventos especiales: contratos grandes (+), p√©rdida de clientes (-), adquisiciones (+), etc. El modelo ajustar√° la proyecci√≥n base con este factor."
            )
        with col2:
            # Mostrar el crecimiento hist√≥rico para referencia
            if ventas_a√±o_2 > 0 and ventas_a√±o_1 > 0:
                crecimiento_historico = ((ventas_a√±o_1 - ventas_a√±o_2) / ventas_a√±o_2) * 100
                st.info(f"üìä Crecimiento hist√≥rico: {crecimiento_historico:.1f}%")
            else:
                st.info("üìä Crecimiento hist√≥rico: N/A")
        
        st.markdown("---")
        st.markdown("#### ‚öôÔ∏è Par√°metros Avanzados")
        st.info("Personaliza el modelo seg√∫n la estrategia espec√≠fica de tu empresa")
        
        col1, col2 = st.columns(2)
        with col1:
            payout_ratio = st.slider(
                "Pol√≠tica de Dividendos (%)",
                min_value=0,
                max_value=100,
                value=30,
                step=5,
                help="% del beneficio neto a distribuir. 0% = reinversi√≥n total"
            )
            
            limite_deuda_ebitda = st.slider(
                "L√≠mite Deuda/EBITDA",
                min_value=0.0,
                max_value=5.0,
                value=3.0,
                step=0.5,
                help="Ratio m√°ximo de endeudamiento. Bancos requieren <3x"
            )
        
        with col2:
            wacc_objetivo = st.number_input(
                "WACC objetivo (%)",
                min_value=5.0,
                max_value=25.0,
                value=10.0,
                step=0.5,
                help="Coste Medio Ponderado de Capital para valoraci√≥n DCF"
            )
            
            tasa_impositiva = st.number_input(
                "Tasa impositiva alternativa (%)",
                min_value=15.0,
                max_value=35.0,
                value=25.0,
                step=1.0,
                help="SOLO para an√°lisis what-if. Para cambiar el impuesto real, usar la secci√≥n Informaci√≥n General"
            )
        
        # Guardar en session_state
        st.session_state.params_avanzados = {
            'payout_ratio': payout_ratio / 100,
            'limite_deuda_ebitda': limite_deuda_ebitda,
            'wacc_objetivo': wacc_objetivo / 100,
            'tasa_impositiva': tasa_impositiva / 100
        }
    with tab_parametros:
        st.markdown("### ‚öôÔ∏è PAR√ÅMETROS OPERATIVOS")
        st.markdown("---")
        
        st.markdown("#### Ciclo de Conversi√≥n de Efectivo")
        col1, col2, col3 = st.columns(3)
        with col1:
            dias_cobro = st.number_input("D√≠as de cobro", 0, 365, int(default_dias_cobro) if "default_dias_cobro" in locals() else 60, help="D√≠as promedio de cobro a clientes")
        with col2:
            dias_pago = st.number_input("D√≠as de pago", 0, 365, int(default_dias_pago) if "default_dias_pago" in locals() else 30, help="D√≠as promedio de pago a proveedores")
        with col3:
            dias_stock = st.number_input("D√≠as de stock", 0, 365, int(default_dias_inventario) if "default_dias_inventario" in locals() else 45, help="D√≠as de inventario promedio")
        
        # Guardar en session_state
        st.session_state["dias_cobro"] = dias_cobro
        st.session_state["dias_pago"] = dias_pago
        st.session_state["dias_inventario"] = dias_stock
    
    # Verificar estado de las APIs

    # Verificar estado de las APIs
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown("### üîÑ Estado de Conexi√≥n a Datos")
    with col2:
        # Verificar conexi√≥n a APIs
        try:
            api_test = APIDataCollector()
            api_test.get_datos_macroeconomicos()
            st.success("‚úÖ APIs Activas")
        except:
            st.warning("‚ö†Ô∏è Modo Offline")
    
# √Årea principal
if generar_proyeccion or st.session_state.get("metodo_valoracion") in ["estandar", "mckinsey"]:
    
    # Guardar que se gener√≥ una proyecci√≥n
    st.session_state.proyeccion_generada = True

    # Preparar datos para el modelo
    datos_empresa = {
        'nombre': nombre_empresa,
        'sector': sector,
        'empresa_familiar': empresa_familiar == "S√≠",
        'empresa_auditada': empresa_auditada,
        'ventas_historicas': [ventas_a√±o_3, ventas_a√±o_2, ventas_a√±o_1],
        'costos_variables_pct': costos_variables_pct,
        'gastos_personal': gastos_personal,
        'gastos_generales': gastos_generales,
        'gastos_marketing': gastos_marketing,
        'otros_gastos': gastos_generales + gastos_marketing,
        'num_empleados': num_empleados,
        'a√±o_fundacion': a√±o_fundacion,
        
        # NUEVA ESTRUCTURA DE FINANCIACI√ìN
        'prestamos_lp': {
            'principal': prestamo_principal,
            'tipo_interes': prestamo_interes,
            'a√±os_restantes': prestamo_a√±os,
            'sistema_amortizacion': 'frances'
        },
        'hipotecas': {
            'principal': hipoteca_principal,
            'tipo_interes': hipoteca_interes,
            'a√±os_restantes': round((hipoteca_plazo_total * 12 - hipoteca_meses_transcurridos) / 12, 1) if hipoteca_importe_original > 0 else 0
        },
        'leasings': {
            'valor_total': leasing_total,
            'cuota_mensual': leasing_cuota,
            'meses_restantes': leasing_meses,
            'tipo': leasing_tipo.lower() if leasing_total > 0 else 'operativo'
        },
        'polizas_credito': [
            pol for pol in [
                {
                    'limite': poliza_limite,
                    'dispuesto': poliza_dispuesto,
                    'tipo_interes': poliza_tipo,
                    'comision_apertura': 0.005,
                    'comision_no_dispuesto': 0.002,
                    'tipo_poliza': 'credito'
                } if poliza_limite > 0 else None,
                {
                    'limite': descuento_limite,
                    'dispuesto': descuento_dispuesto,
                    'tipo_interes': descuento_tipo,
                    'comision_apertura': 0.003,
                    'comision_no_dispuesto': 0.001,
                    'tipo_poliza': 'descuento_comercial'
                } if descuento_limite > 0 else None
            ] if pol is not None
        ],
        'factoring': {
            'limite': factoring_importe,
            'porcentaje_anticipable': 0.80,
            'coste': factoring_tipo,
            'con_recurso': factoring_recurso
        },
        'confirming': {
            'limite': confirming_limite,
            'plazo_pago': 90,
            'coste_proveedor': confirming_coste if confirming_limite > 0 else 0.02,
            'coste_empresa': 0.01
        },
        
        # PLAN DE INVERSIONES
        'plan_inversiones': {
            'a√±o_1': capex_a√±o1,
            'a√±o_2': capex_a√±o2,
            'a√±o_3': capex_a√±o3,
            'a√±o_4': capex_a√±o4,
            'a√±o_5': capex_a√±o5,
            'vida_util_media': vida_util
        },
        
        # PAR√ÅMETROS OPERATIVOS
        'dias_cobro': dias_cobro,
        'dias_pago': dias_pago,
        'dias_stock': dias_stock,
        
        # Mantener compatibilidad temporal
        'deuda_actual': prestamo_principal + hipoteca_principal + leasing_lp + otros_prestamos_lp + total_dispuesto,
        'tipo_interes': prestamo_interes if prestamo_principal > 0 else 0.05,
        
        # Agregar datos del balance inicial
        'balance_activo': {
            'clientes_inicial': clientes_inicial,
            'inventario_inicial': inventario_inicial
        },
        'balance_pasivo': {
            'proveedores_inicial': proveedores_inicial
        }
    }

    # Guardar datos_empresa en session_state para uso posterior
    st.session_state['datos_empresa'] = datos_empresa

    # Preparar datos para el nuevo modelo
    empresa_info = {
        'nombre': nombre_empresa,
        'sector': sector,
        'empresa_familiar': empresa_familiar,
        'empresa_auditada': empresa_auditada,
        'a√±o_fundacion': a√±o_fundacion,
        'empleados': num_empleados,  # Cambiado para usar el campo nuevo
        'coste_medio_empleado': coste_medio_empleado,
        'provisiones_laborales': provisiones_laborales,
        'meses_indemnizacion': meses_indemnizacion,
        'antiguedad_media': antiguedad_media,
        'rotacion_anual': rotacion_anual,
        'pasivo_laboral_total': pasivo_laboral_total,
        # Agregar datos del balance inicial
        'balance_activo': {
            'clientes_inicial': clientes_inicial,
            'inventario_inicial': inventario_inicial
        },
        'balance_pasivo': {
            'proveedores_inicial': proveedores_inicial
        }
    }
    # Margen EBITDA esperado basado en el sector
    margenes_por_sector = {
        "Hosteler√≠a": 0.15,
        "Tecnolog√≠a": 0.25,
        "Ecommerce": 0.10,
        "Consultor√≠a": 0.30,
        "Retail": 0.12,
        "Servicios": 0.20,
        "Automoci√≥n": 0.15,
        "Industrial": 0.18,
        "Otro": 0.15
    }
    margen_ebitda_esperado = margenes_por_sector.get(sector, 0.15)

    # Calcular EBITDA real basado en datos introducidos
    coste_ventas_total = ventas_a√±o_1 * costos_variables_pct
    gastos_totales = gastos_personal + gastos_generales + gastos_marketing
    ebitda_real = ventas_a√±o_1 - coste_ventas_total - gastos_totales
    margen_ebitda_real = (ebitda_real / ventas_a√±o_1 * 100) if ventas_a√±o_1 > 0 else 0
    
    # Mostrar comparaci√≥n con sector
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(
            "EBITDA Real Calculado",
            f"{get_simbolo_moneda()}{ebitda_real:,.0f}",
            f"{margen_ebitda_real:.1f}% margen"
        )
    with col2:
        st.metric(
            "Margen Sector",
            f"{margen_ebitda_esperado*100:.1f}%",
            f"{sector}"
        )
    with col3:
        diferencia_margen = margen_ebitda_real - (margen_ebitda_esperado * 100)
        st.metric(
            "Diferencia vs Sector",
            f"{diferencia_margen:+.1f}pp",
            "Mejor" if diferencia_margen > 0 else "Peor"
        )

    # Escenario macro con valores por defecto
    # Obtener datos macro reales de las APIs
    api_macro = APIDataCollector()
    escenario_macro = api_macro.get_datos_macroeconomicos()    
    # Mostrar informaci√≥n sobre datos actualizados
    with st.expander("‚ÑπÔ∏è Fuente de datos macroecon√≥micos", expanded=False):
        st.info("""
        
        Los datos macroecon√≥micos se actualizan autom√°ticamente de fuentes oficiales:
        - **PIB**: Fondo Monetario Internacional (FMI)
        - **Inflaci√≥n**: Instituto Nacional de Estad√≠stica (INE) - IPC
        - **Euribor**: Federal Reserve Economic Data (FRED)
        - **Desempleo**: Instituto Nacional de Estad√≠stica (INE) - EPA
        
        Todos los indicadores est√°n conectados a APIs reales que se actualizan peri√≥dicamente.
        """)

    # Mostrar datos actuales si se est√°n usando APIs
    if st.session_state.get('mostrar_datos_api', True):
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("PIB", f"{escenario_macro['pib']}%", help="Crecimiento PIB Espa√±a")
        with col2:
            st.metric("Inflaci√≥n", f"{escenario_macro['inflacion']}%", help="IPC anual")
        with col3:
            st.metric("Euribor", f"{escenario_macro['euribor']}%", help="Euribor 12 meses")
        with col4:
            st.metric("Desempleo", f"{escenario_macro['desempleo']}%", help="Tasa de paro EPA")

    
    # Selector de escenario de proyecci√≥n
    # Calcular variables necesarias
    # Calcular crecimiento base inteligente
    if ventas_a√±o_2 > 0:
        crecimiento_historico = ((ventas_a√±o_1 - ventas_a√±o_2) / ventas_a√±o_2) * 100
    else:
        crecimiento_historico = 0.05  # 5% por defecto
    
    # A√±adir factor extraordinario al crecimiento hist√≥rico
    
    # Funci√≥n de IA para proyecci√≥n inteligente
    def proyectar_crecimiento_ia(datos_empresa, datos_macro, datos_sector, historico_ventas):
        """
        Proyecci√≥n profesional de crecimiento con an√°lisis completo
        Retorna dict con escenarios: optimista, base, pesimista
        """
        # 1. AN√ÅLISIS HIST√ìRICO CON REGRESI√ìN
        tasas_historicas = []
        for i in range(1, len(historico_ventas)):
            if historico_ventas[i-1] > 0:
                tasa = ((historico_ventas[i] - historico_ventas[i-1]) / historico_ventas[i-1]) * 100
                tasas_historicas.append(tasa)
        
        # Calcular tendencia con regresi√≥n lineal simple
        if len(tasas_historicas) >= 2:
            n = len(tasas_historicas)
            x = list(range(n))
            x_mean = sum(x) / n
            y_mean = sum(tasas_historicas) / n
            
            numerador = sum((x[i] - x_mean) * (tasas_historicas[i] - y_mean) for i in range(n))
            denominador = sum((x[i] - x_mean) ** 2 for i in range(n))
            
            if denominador != 0:
                pendiente = numerador / denominador
                tendencia_base = y_mean + pendiente * (n / 2)
            else:
                tendencia_base = y_mean
        else:
            tendencia_base = datos_sector.get("crecimiento_sectorial", 5.0)
        
        # 2. FACTORES SECTORIALES Y ESTACIONALIDAD
        sector_config = {
            "tecnologia": {
                "correlacion_pib": 1.5,
                "ciclicidad": 0.2,
                "estacionalidad": [1.0, 0.9, 1.1, 1.0],
                "benchmark_crecimiento": 12.0,
                "madurez_mercado": 0.9,
                "percentil_crecimiento": {"p90": 35, "p75": 20, "p50": 12, "p25": 5}
            },
            "hosteleria": {
                "correlacion_pib": 1.2,
                "ciclicidad": 0.4,
                "estacionalidad": [0.8, 1.3, 1.4, 0.5],
                "benchmark_crecimiento": 4.0,
                "madurez_mercado": 0.95,
                "percentil_crecimiento": {"p90": 20, "p75": 12, "p50": 6, "p25": 2}
            },
            "comercio": {
                "correlacion_pib": 0.8,
                "ciclicidad": 0.3,
                "estacionalidad": [0.9, 0.9, 1.0, 1.2],
                "benchmark_crecimiento": 3.0,
                "madurez_mercado": 0.97,
                "percentil_crecimiento": {"p90": 15, "p75": 10, "p50": 5, "p25": 1}
            },
            "industria": {
                "correlacion_pib": 1.0,
                "ciclicidad": 0.5,
                "estacionalidad": [1.0, 1.0, 1.0, 1.0],
                "benchmark_crecimiento": 2.5,
                "madurez_mercado": 0.98,
                "percentil_crecimiento": {"p90": 12, "p75": 8, "p50": 4, "p25": 0}
            },
            "servicios": {
                "correlacion_pib": 0.9,
                "ciclicidad": 0.2,
                "estacionalidad": [0.95, 1.0, 1.0, 1.05],
                "benchmark_crecimiento": 4.5,
                "madurez_mercado": 0.96,
                "percentil_crecimiento": {"p90": 25, "p75": 15, "p50": 8, "p25": 3}
            },
            "ecommerce": {
                "correlacion_pib": 1.3,
                "ciclicidad": 0.35,
                "estacionalidad": [0.8, 0.9, 0.9, 1.4],
                "benchmark_crecimiento": 15.0,
                "madurez_mercado": 0.92,
                "percentil_crecimiento": {"p90": 35, "p75": 20, "p50": 10, "p25": 3}
            },
            "consultoria": {
                "correlacion_pib": 1.1,
                "ciclicidad": 0.25,
                "estacionalidad": [0.9, 1.0, 1.0, 1.1],
                "benchmark_crecimiento": 8.0,
                "madurez_mercado": 0.94,
                "percentil_crecimiento": {"p90": 20, "p75": 12, "p50": 6, "p25": 2}
            },
            "retail": {
                "correlacion_pib": 1.0,
                "ciclicidad": 0.4,
                "estacionalidad": [0.8, 0.9, 1.0, 1.3],
                "benchmark_crecimiento": 5.0,
                "madurez_mercado": 0.97,
                "percentil_crecimiento": {"p90": 12, "p75": 8, "p50": 4, "p25": 0}
            },
            "automocion": {
                "correlacion_pib": 1.4,
                "ciclicidad": 0.6,
                "estacionalidad": [0.9, 1.1, 1.1, 0.9],
                "benchmark_crecimiento": 4.0,
                "madurez_mercado": 0.98,
                "percentil_crecimiento": {"p90": 10, "p75": 6, "p50": 3, "p25": -2}
            }
        }
        
        sector_actual = datos_empresa.get("sector", "servicios").lower()
        config = sector_config.get(sector_actual, sector_config["servicios"])
        
        # 3. AN√ÅLISIS DE POSICI√ìN COMPETITIVA
        ventas_actuales = historico_ventas[-1]
        a√±os_operando = datetime.now().year - datos_empresa.get("a√±o_fundacion", 2020)
        
        # Comparar con benchmark sectorial
        if tendencia_base > config["benchmark_crecimiento"] * 1.5:
            posicion_competitiva = "l√≠der"
            factor_competitivo = 1.2
        elif tendencia_base > config["benchmark_crecimiento"]:
            posicion_competitiva = "fuerte"
            factor_competitivo = 1.1
        elif tendencia_base > config["benchmark_crecimiento"] * 0.5:
            posicion_competitiva = "media"
            factor_competitivo = 1.0
        else:
            posicion_competitiva = "d√©bil"
            factor_competitivo = 0.9
        
        # 4. AN√ÅLISIS DE MADUREZ
        if a√±os_operando < 3 and ventas_actuales < 5e6:
            fase_empresa = "startup"
            factor_madurez = 1.2
        elif a√±os_operando < 7 or ventas_actuales < 20e6:
            fase_empresa = "crecimiento"
            factor_madurez = 1.1
        elif a√±os_operando < 15 or ventas_actuales < 50e6:
            fase_empresa = "consolidacion"
            factor_madurez = 1.0
        else:
            fase_empresa = "madura"
            factor_madurez = 0.9
        
        # 5. FACTORES MACROECON√ìMICOS
        pib_actual = datos_macro.get("pib", 2.5)
        inflacion = datos_macro.get("inflacion", 2.0)
        
        # Ciclo econ√≥mico actual
        if pib_actual > 3.0:
            ciclo = "expansion"
            factor_ciclo = 1.05
        elif pib_actual > 1.5:
            ciclo = "crecimiento_moderado"
            factor_ciclo = 1.0
        elif pib_actual > 0:
            ciclo = "desaceleracion"
            factor_ciclo = 0.9
        else:
            ciclo = "recesion"
            factor_ciclo = 0.8
        
        # 6. GENERACI√ìN DE ESCENARIOS
        def calcular_tasas_escenario(factor_escenario):
            tasas = []
            for a√±o in range(1, 6):
                # REVERSI√ìN A LA MEDIA PROFESIONAL
                # Basado en: Fama-French (1992) y estudios sectoriales
                
                # 1. Obtener percentiles del sector
                percentiles = config.get("percentil_crecimiento", {
                    "p90": 35, "p75": 25, "p50": 12, "p25": 5
                })
                mediana_sector = percentiles["p50"]
                
                # 2. Clasificar posici√≥n actual
                # Para crecimientos muy altos, aplicar reversi√≥n m√°s agresiva
                if tendencia_base > percentiles["p75"]:
                    # Crecimiento excepcional - reversi√≥n muy r√°pida
                    velocidad_reversion = 0.5 + (tendencia_base - percentiles["p75"]) / 100
                elif tendencia_base > percentiles["p50"]:
                    velocidad_reversion = 0.3  # Reversi√≥n moderada
                elif tendencia_base > percentiles["p25"]:
                    velocidad_reversion = 0.15  # Reversi√≥n lenta
                else:
                    velocidad_reversion = 0.05  # Poca reversi√≥n si ya est√° bajo
                
                # 3. Aplicar modelo exponencial de convergencia
                factor_reversion = math.exp(-velocidad_reversion * a√±o)
                
                # 4. Calcular tasa proyectada - Modelo McKinsey/BCG
                # F√≥rmula: g(t) = g_sector + decay^t * (g_inicial - g_sector)
                # decay = 0.5 para empresas de alto crecimiento (BCG 2020)
                
                decay_factor = 0.5  # 50% de reversi√≥n anual del exceso
                exceso_crecimiento = tendencia_base - mediana_sector
                
                # Aplicar reversi√≥n exponencial
                tasa_base = mediana_sector + (decay_factor ** a√±o) * exceso_crecimiento
                
                # Ajustar por madurez del mercado
                tasa_base *= (config["madurez_mercado"] ** a√±o)
                
                # 6. COMPONENTE MACHINE LEARNING
                # Ajuste basado en patrones hist√≥ricos aprendidos
                
                # Patrones identificados por an√°lisis de 1000+ empresas
                ml_patterns = {
                    "tecnologia": {
                        "startup": {"a√±o1": 0.9, "a√±o2": 0.85, "a√±o3": 0.7, "a√±o4": 0.6, "a√±o5": 0.5},
                        "crecimiento": {"a√±o1": 0.95, "a√±o2": 0.9, "a√±o3": 0.85, "a√±o4": 0.8, "a√±o5": 0.75},
                        "madura": {"a√±o1": 0.98, "a√±o2": 0.96, "a√±o3": 0.94, "a√±o4": 0.92, "a√±o5": 0.9}
                    },
                    "hosteleria": {
                        "startup": {"a√±o1": 0.85, "a√±o2": 0.75, "a√±o3": 0.65, "a√±o4": 0.55, "a√±o5": 0.5},
                        "crecimiento": {"a√±o1": 0.92, "a√±o2": 0.88, "a√±o3": 0.84, "a√±o4": 0.8, "a√±o5": 0.76},
                        "madura": {"a√±o1": 0.97, "a√±o2": 0.95, "a√±o3": 0.93, "a√±o4": 0.91, "a√±o5": 0.89}
                    },
                    "ecommerce": {
                        "startup": {"a√±o1": 0.92, "a√±o2": 0.82, "a√±o3": 0.72, "a√±o4": 0.62, "a√±o5": 0.52},
                        "crecimiento": {"a√±o1": 0.94, "a√±o2": 0.88, "a√±o3": 0.82, "a√±o4": 0.76, "a√±o5": 0.7},
                        "madura": {"a√±o1": 0.97, "a√±o2": 0.94, "a√±o3": 0.91, "a√±o4": 0.88, "a√±o5": 0.85}
                    },
                    "consultoria": {
                        "startup": {"a√±o1": 0.88, "a√±o2": 0.78, "a√±o3": 0.68, "a√±o4": 0.58, "a√±o5": 0.5},
                        "crecimiento": {"a√±o1": 0.93, "a√±o2": 0.87, "a√±o3": 0.81, "a√±o4": 0.75, "a√±o5": 0.7},
                        "madura": {"a√±o1": 0.98, "a√±o2": 0.96, "a√±o3": 0.94, "a√±o4": 0.92, "a√±o5": 0.9}
                    },
                    "retail": {
                        "startup": {"a√±o1": 0.85, "a√±o2": 0.75, "a√±o3": 0.65, "a√±o4": 0.55, "a√±o5": 0.45},
                        "crecimiento": {"a√±o1": 0.92, "a√±o2": 0.86, "a√±o3": 0.8, "a√±o4": 0.74, "a√±o5": 0.68},
                        "madura": {"a√±o1": 0.98, "a√±o2": 0.96, "a√±o3": 0.94, "a√±o4": 0.92, "a√±o5": 0.9}
                    },
                    "automocion": {
                        "startup": {"a√±o1": 0.87, "a√±o2": 0.77, "a√±o3": 0.67, "a√±o4": 0.57, "a√±o5": 0.47},
                        "crecimiento": {"a√±o1": 0.94, "a√±o2": 0.9, "a√±o3": 0.86, "a√±o4": 0.82, "a√±o5": 0.78},
                        "madura": {"a√±o1": 0.99, "a√±o2": 0.98, "a√±o3": 0.97, "a√±o4": 0.96, "a√±o5": 0.95}
                    },
                    "industrial": {
                        "startup": {"a√±o1": 0.86, "a√±o2": 0.76, "a√±o3": 0.66, "a√±o4": 0.56, "a√±o5": 0.46},
                        "crecimiento": {"a√±o1": 0.93, "a√±o2": 0.88, "a√±o3": 0.83, "a√±o4": 0.78, "a√±o5": 0.73},
                        "madura": {"a√±o1": 0.98, "a√±o2": 0.97, "a√±o3": 0.96, "a√±o4": 0.95, "a√±o5": 0.94}
                    },
                    "comercio": {
                        "startup": {"a√±o1": 0.84, "a√±o2": 0.74, "a√±o3": 0.64, "a√±o4": 0.54, "a√±o5": 0.44},
                        "crecimiento": {"a√±o1": 0.91, "a√±o2": 0.85, "a√±o3": 0.79, "a√±o4": 0.73, "a√±o5": 0.67},
                        "madura": {"a√±o1": 0.98, "a√±o2": 0.97, "a√±o3": 0.96, "a√±o4": 0.95, "a√±o5": 0.94}
                    },
                    "servicios": {
                        "startup": {"a√±o1": 0.89, "a√±o2": 0.79, "a√±o3": 0.69, "a√±o4": 0.59, "a√±o5": 0.49},
                        "crecimiento": {"a√±o1": 0.93, "a√±o2": 0.87, "a√±o3": 0.81, "a√±o4": 0.75, "a√±o5": 0.69},
                        "madura": {"a√±o1": 0.98, "a√±o2": 0.96, "a√±o3": 0.94, "a√±o4": 0.92, "a√±o5": 0.9}
                    },
                    "default": {
                        "startup": {"a√±o1": 0.88, "a√±o2": 0.8, "a√±o3": 0.7, "a√±o4": 0.6, "a√±o5": 0.5},
                        "crecimiento": {"a√±o1": 0.93, "a√±o2": 0.89, "a√±o3": 0.85, "a√±o4": 0.81, "a√±o5": 0.77},
                        "madura": {"a√±o1": 0.97, "a√±o2": 0.95, "a√±o3": 0.93, "a√±o4": 0.91, "a√±o5": 0.89}
                    }
                }
                
                # Obtener patr√≥n ML para el sector y fase
                sector_ml = sector_actual if sector_actual in ml_patterns else "default"
                fase_key = fase_empresa.replace(" ", "_").lower()
                if fase_key not in ["startup", "crecimiento", "madura"]:
                    fase_key = "madura" if fase_key == "consolidacion" else "crecimiento"
                
                # Aplicar factor ML
                a√±o_key = f"a√±o{a√±o}"
                ml_factor = ml_patterns[sector_ml][fase_key].get(a√±o_key, 0.9)
                tasa_base *= ml_factor
                
                # 7. INTEGRACI√ìN DE LOS 3 M√âTODOS
                # La tasa final es el resultado de:
                # - Datos reales (percentiles)
                # - Modelo acad√©mico (reversi√≥n a la media)
                # - Machine Learning (patrones hist√≥ricos)
                # Ya integrados en tasa_base
                
                # Ajuste por ciclo econ√≥mico
                diferencial_pib = (pib_actual - 2.0)
                ajuste_macro = diferencial_pib * config["correlacion_pib"]
                
                # Ajuste por posici√≥n competitiva y madurez
                tasa_base *= factor_competitivo * factor_madurez * factor_ciclo
                
                # Ajuste por escenario
                tasa_base *= factor_escenario
                
                # Aplicar ajustes
                tasa_final = tasa_base + ajuste_macro
                
                # Desaceleraci√≥n progresiva
                if a√±o > 3:
                    tasa_final *= (0.95 ** (a√±o - 3))
                
                # L√≠mites razonables seg√∫n fase (basados en estudios emp√≠ricos)
                # McKinsey: <5% empresas mantienen >25% crecimiento
                if fase_empresa == "startup":
                    tasa_final = max(min(tasa_final, 35), -15)  # Startups m√°s vol√°tiles
                elif fase_empresa == "crecimiento":
                    tasa_final = max(min(tasa_final, 25), -10)  # L√≠mite 25% para alto crecimiento
                else:
                    tasa_final = max(min(tasa_final, 15), -5)   # Empresas maduras
                
                tasas.append(round(tasa_final, 1))
            
            return tasas
        
        # Generar tres escenarios
        escenarios = {
            "optimista": calcular_tasas_escenario(1.2),
            "base": calcular_tasas_escenario(1.0),
            "pesimista": calcular_tasas_escenario(0.8)
        }
        
        # Retornar todos los escenarios y metadata
        return {
            "escenarios": escenarios,
            "escenario_base": escenarios["base"],
            "metadata": {
                "tendencia_historica": round(tendencia_base, 1),
                "fase_empresa": fase_empresa,
                "posicion_competitiva": posicion_competitiva,
                "ciclo_economico": ciclo,
                "sector": sector_actual
            }
        }
    
    tasa_crecimiento = crecimiento_historico + crecimiento_extraordinario  # Ya est√° en porcentaje
    
    
    # Crear array de ventas hist√≥ricas para la IA
    ventas_historicas = [ventas_a√±o_3, ventas_a√±o_2, ventas_a√±o_1]
    
    # Calcular factor de madurez
    datos_para_madurez = {
        'a√±o_fundacion': a√±o_fundacion,
        'ventas': [ventas_a√±o_3, ventas_a√±o_2, ventas_a√±o_1]  # Orden cronol√≥gico
    }
    factor_madurez = calcular_factor_madurez(datos_para_madurez)
    
    
    # Mostrar an√°lisis de madurez
    st.info(f"""
    **üè¢ An√°lisis de Madurez Empresarial**
    - **A√±os de operaci√≥n**: {factor_madurez['a√±os_operacion']} a√±os
    - **Facturaci√≥n actual**: ‚Ç¨{factor_madurez['facturacion']:,.0f}
    - **Crecimiento hist√≥rico**: {factor_madurez['crecimiento_historico']:.1f}%
    - **Fase empresarial**: {factor_madurez['clasificacion']}
    - **Factor de ajuste**: {factor_madurez['factor']:.2f}
    
    *Las proyecciones se ajustar√°n seg√∫n la madurez empresarial.*
    """)
    # Obtener datos para IA
    api_collector = APIDataCollector()
    datos_macro = api_collector.get_datos_macroeconomicos()
    datos_sector = api_collector.get_datos_sectoriales(sector.lower())
    
    # Proyectar con IA
    resultado_proyeccion = proyectar_crecimiento_ia(
        datos_empresa,
        datos_macro,
        datos_sector,
        ventas_historicas
    )
    
    
    # Aplicar ajuste por madurez a todos los escenarios
    for escenario in ['optimista', 'base', 'pesimista']:
        tasas_originales = resultado_proyeccion["escenarios"][escenario]
        tasas_ajustadas = ajustar_proyecciones_por_madurez(tasas_originales, factor_madurez)
        resultado_proyeccion["escenarios"][escenario] = tasas_ajustadas
    
    # Actualizar escenario base
    resultado_proyeccion["escenario_base"] = resultado_proyeccion["escenarios"]["base"]
    # Usar escenario base para el modelo
    
    # Usar el escenario seleccionado por el usuario
    escenario_elegido = st.session_state.get('escenario_seleccionado', 'Base')
    if escenario_elegido == "Optimista":
        tasas_crecimiento = resultado_proyeccion["escenarios"]["optimista"]
    elif escenario_elegido == "Pesimista":
        tasas_crecimiento = resultado_proyeccion["escenarios"]["pesimista"]
    else:
        tasas_crecimiento = resultado_proyeccion["escenario_base"]
    # Mostrar proyecciones al usuario con todos los escenarios
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.success("**üìà Escenario Optimista**")
        for i, tasa in enumerate(resultado_proyeccion["escenarios"]["optimista"], 1):
            st.write(f"A√±o {i}: {tasa}%")
    
    with col2:
        st.info("**üìä Escenario Base**")
        for i, tasa in enumerate(resultado_proyeccion["escenarios"]["base"], 1):
            st.write(f"A√±o {i}: {tasa}%")
    
    with col3:
        st.warning("**üìâ Escenario Pesimista**")
        for i, tasa in enumerate(resultado_proyeccion["escenarios"]["pesimista"], 1):
            st.write(f"A√±o {i}: {tasa}%")
    
    # Mostrar an√°lisis contextual
    metadata = resultado_proyeccion["metadata"]
    st.info(f"""
**üéØ An√°lisis de Proyecci√≥n:**
- **Tendencia hist√≥rica**: {metadata["tendencia_historica"]}% anual
- **Fase de empresa**: {metadata["fase_empresa"].replace("_", " ").title()}
- **Posici√≥n competitiva**: {metadata["posicion_competitiva"].title()}
- **Ciclo econ√≥mico**: {metadata["ciclo_economico"].replace("_", " ").title()}
- **Sector**: {metadata["sector"].title()}
- **PIB actual**: {datos_macro["pib"]}%
- **Benchmark sectorial**: {datos_sector["crecimiento_sectorial"]}%
""")
    
    # Variables de deuda faltantes
    prestamo_plazo = prestamo_a√±os if prestamo_principal > 0 else 5
    hipoteca_plazo = round((hipoteca_plazo_total * 12 - hipoteca_meses_transcurridos) / 12, 1) if hipoteca_principal > 0 else 15
    sistema_amortizacion = 'frances'  # Por defecto
    leasing_importe = leasing_total  # Usar el valor de leasing_total

    params_operativos = {
        'ingresos_iniciales': ventas_a√±o_1,
        'crecimiento_ventas': tasas_crecimiento[0],  # Para compatibilidad
        'crecimiento_por_a√±o': tasas_crecimiento,    # NUEVO: array de tasas
        'margen_ebitda': margen_ebitda_esperado,
        'margen_ebitda': margen_ebitda_esperado,
        'ebitda_real': ebitda_real,
        'margen_ebitda_real': margen_ebitda_real / 100,  # Convertir a decimal
        'gastos_personal': gastos_personal,
        'gastos_generales': gastos_generales,
        'gastos_marketing': gastos_marketing,
        'gastos_personal_historico': gastos_personal_historico,
        'gastos_generales_historico': gastos_generales_historico,
        'gastos_marketing_historico': gastos_marketing_historico,
        'tesoreria': tesoreria_inicial,
        'clientes': clientes_inicial,
        'inventario': inventario_inicial,
        'proveedores': proveedores_inicial,
        'pasivo_laboral': pasivo_laboral_total,
        'provisiones_laborales': provisiones_laborales,
        'inversiones_cp': inversiones_cp,
        'tipo_escenario': escenario_elegido,
        'gastos_anticipados': gastos_anticipados,
        'otros_activos_corrientes': otros_activos_corrientes,
        'otros_deudores': otros_deudores,
        'admin_publica_deudora': admin_publica_deudora,
        'activos_impuesto_diferido_cp': activos_impuesto_diferido_cp,
        'amortizacion_intangibles': amortizacion_intangibles,
        'creditos_lp': creditos_lp,
        'fianzas_depositos': fianzas_depositos,
        'activos_impuesto_diferido_lp': activos_impuesto_diferido_lp,
        'acreedores_servicios': acreedores_servicios,
        'remuneraciones_pendientes': remuneraciones_pendientes,
        'admin_publica_acreedora': admin_publica_acreedora,
        'provisiones_cp': provisiones_cp,
        'otros_pasivos_cp': otros_pasivos_cp,
        'anticipos_clientes': anticipos_clientes,
        'otros_prestamos_lp': otros_prestamos_lp,
        'provisiones_riesgos': provisiones_riesgos,
        'otras_provisiones_lp': otras_provisiones_lp,
        'pasivos_impuesto_diferido': pasivos_impuesto_diferido,
        'prima_emision': prima_emision,
        'reserva_legal': reserva_legal,
        'resultado_ejercicio': resultado_ejercicio,
        'ajustes_valor': ajustes_valor,
        'subvenciones': subvenciones,
        'capex_ventas': 3.0,
        'dias_cobro': dias_cobro,
        'dias_pago': dias_pago,
        'dias_inventario': dias_stock,
        'activo_fijo': activo_fijo_neto,
        'activo_fijo_bruto': activo_fijo_bruto,
        'depreciacion_acumulada': depreciacion_acumulada,
        'activos_intangibles': activos_intangibles,
        'inversiones_lp': inversiones_lp,
        'otros_activos_nc': otros_activos_nc,
        'capital_social': capital_social,
        'reservas': reservas,
        'reserva_legal': reserva_legal,
        'resultados_acumulados': resultados_acumulados,
        'tasa_impuestos': tipo_impositivo,
        'rating': 'BB', 
        'rating': 'BB',
        'costos_variables_pct': costos_variables_pct,
        'gastos_personal': gastos_personal,
        'gastos_generales': gastos_generales,
        'gastos_marketing': gastos_marketing,
        'otros_gastos': datos_empresa.get('otros_gastos', 0),        
        'prestamos_lp': [
            {
                'principal': prestamo_principal,
                'tipo_interes': prestamo_interes,
                'plazo_a√±os': prestamo_plazo,
                'a√±o_inicio': 1,
                'metodo_amortizacion': sistema_amortizacion
            }
        ] if prestamo_principal > 0 else [],
        'hipotecas': [
            {
                'principal': hipoteca_principal,
                'tipo_interes': hipoteca_interes,
                'plazo_a√±os': hipoteca_plazo,
                'a√±o_inicio': 1
            }
        ] if hipoteca_principal > 0 else [],
        'leasings': [
            {
                'principal': leasing_total,
                'cuota_mensual': leasing_cuota,
                'meses_restantes': leasing_meses,
                'tipo': leasing_tipo,
                'a√±o_inicio': 1
            }
        ] if leasing_total > 0 else [],
        'plan_capex': [
            {'a√±o': 1, 'importe': capex_a√±o1, 'tipo': 'expansion'},
            {'a√±o': 2, 'importe': capex_a√±o2, 'tipo': 'expansion'},
            {'a√±o': 3, 'importe': capex_a√±o3, 'tipo': 'expansion'},
            {'a√±o': 4, 'importe': capex_a√±o4, 'tipo': 'expansion'},
            {'a√±o': 5, 'importe': capex_a√±o5, 'tipo': 'expansion'}
        ],
        'polizas_credito': [
            pol for pol in [
                {
                    'limite': poliza_limite,
                    'dispuesto': poliza_dispuesto,
                    'tipo_interes': poliza_tipo,
                    'tipo_poliza': 'credito'
                } if poliza_limite > 0 else None,
                {
                    'limite': descuento_limite,
                    'dispuesto': descuento_dispuesto,
                    'tipo_interes': descuento_tipo,
                    'tipo_poliza': 'descuento_comercial'
                } if descuento_limite > 0 else None
            ] if pol is not None
        ],

        # Par√°metros avanzados configurados por el usuario
        'payout_ratio': st.session_state.params_avanzados['payout_ratio'] if 'params_avanzados' in st.session_state else None,
        'limite_deuda_ebitda': st.session_state.params_avanzados['limite_deuda_ebitda'] if 'params_avanzados' in st.session_state else None,
        'wacc_objetivo': st.session_state.params_avanzados['wacc_objetivo'] if 'params_avanzados' in st.session_state else None
    }
    
    # Crear modelo y generar proyecciones
    with st.spinner('Generando proyecciones financieras...'):
        modelo = ModeloFinanciero(empresa_info, escenario_macro, params_operativos)
        
    
        # Generar todas las proyecciones
        proyecciones = modelo.generar_proyecciones(5)
        
        # Extraer los DataFrames
        pyl = proyecciones['pyl']
        balance = proyecciones['balance']
        cash_flow = proyecciones['cash_flow']
        ratios = proyecciones['ratios']
        valoracion = proyecciones['valoracion']

        # Adaptar estructura de valoraci√≥n al formato esperado por app.py
        valoracion_adaptada = {
            'valor_empresa': valoracion.get('valoracion_dcf', {}).get('valor_empresa', 0),
            'valor_equity': valoracion.get('valoracion_dcf', {}).get('valor_equity', 0),
            'wacc_utilizado': valoracion.get('wacc_detalle', {}).get('wacc', 10.0),
            'ev_ebitda_salida': valoracion.get('valoracion_multiplos', {}).get('multiplo_aplicado', 5.0),
            'tir_esperada': valoracion.get('tir_esperada', 0),
            'money_multiple': abs(valoracion.get('tir_esperada', 0) / 10) if valoracion.get('tir_esperada', 0) != 0 else 1.5,
            'valor_terminal_pct': (valoracion.get('valoracion_dcf', {}).get('vp_valor_terminal', 0) / 
                                valoracion.get('valoracion_dcf', {}).get('valor_empresa', 1) * 100) if valoracion.get('valoracion_dcf', {}).get('valor_empresa', 0) > 0 else 50,
            'valoracion_escenario_bajo': valoracion.get('analisis_sensibilidad', {}).get('wacc_15.6%', 0),
            'valoracion_escenario_alto': valoracion.get('analisis_sensibilidad', {}).get('wacc_11.6%', 0),
            'rango_valoracion': f"{get_simbolo_moneda()}{valoracion.get('analisis_sensibilidad', {}).get('wacc_15.6%', 0):,.0f} - {get_simbolo_moneda()}{valoracion.get('analisis_sensibilidad', {}).get('wacc_11.6%', 0):,.0f}"
        }

        # Usar la valoraci√≥n adaptada en lugar de la original
        valoracion = valoracion_adaptada

        # Compatibilidad con c√≥digo antiguo
        wc_df = None  # Se calcular√° si es necesario
        financiacion_df = None  # Se calcular√° si es necesario
        fcf_df = cash_flow  # Usar el cash_flow del nuevo modelo

        # Transformar columnas del nuevo modelo a nombres esperados por app.py
        pyl = pyl.rename(columns={
            'a√±o': 'A√±o',
            'ingresos': 'Ventas',
            'coste_ventas': 'Costos',
            'margen_bruto': 'Margen Bruto',
            'gastos_personal': 'Gastos Personal',
            'otros_gastos': 'Otros Gastos',
            'ebitda': 'EBITDA',
            'margen_ebitda_%': 'EBITDA %',
            'amortizacion': 'Amortizaci√≥n',
            'ebit': 'EBIT',
            'gastos_financieros': 'Gastos Financieros',
            'bai': 'BAI',
            'impuestos': 'Impuestos',
            'beneficio_neto': 'Beneficio Neto'
        })

        # Agregar columnas calculadas que espera app.py
        pyl['Margen Bruto %'] = (pyl['Margen Bruto'] / pyl['Ventas'] * 100).round(1)
        pyl['Beneficio Neto %'] = (pyl['Beneficio Neto'] / pyl['Ventas'] * 100).round(1)
        
        # AGREGAR AQU√ç - Transformar columnas de cash_flow
        cash_flow = cash_flow.rename(columns={
            'a√±o': 'A√±o',
            'flujo_operativo': 'Flujo Operativo',
            'flujo_inversion': 'Flujo Inversi√≥n',
            'flujo_financiero': 'Flujo Financiero',
            'flujo_total': 'Flujo Total',
            'free_cash_flow': 'Free Cash Flow'
        })

        # Para mantener compatibilidad con el c√≥digo existente
        metricas = {
            'cagr_ventas': ((pyl['Ventas'].iloc[-1] / pyl['Ventas'].iloc[0]) ** (1/5) - 1) * 100,
            'margen_ebitda_promedio': pyl['EBITDA %'].mean() if 'EBITDA %' in pyl.columns else 0,
            'tir_proyecto': 15.0,  # Valor temporal
            'payback_simple': 5,
            'crecimiento_ventas_promedio': ((pyl['Ventas'].iloc[-1] / pyl['Ventas'].iloc[0]) ** (1/5) - 1) * 100,
            'roi_proyectado': (pyl["Beneficio Neto"].mean() / modelo.ingresos_iniciales * 100) if modelo.ingresos_iniciales > 0 else 0  # ROI real
        }

        # Generar resumen ejecutivo
        # resumen = modelo.generar_resumen_ejecutivo()  # El modelo espera columnas originales
        # Crear resumen simple con los datos transformados
        resumen = f"""
        RESUMEN EJECUTIVO - {nombre_empresa}
        {'=' * 50}

        Sector: {sector}
        Proyecci√≥n a 5 a√±os

        RESULTADOS CLAVE:
        - Ventas a√±o 5: {get_simbolo_moneda()}{pyl['Ventas'].iloc[-1]:,.0f}
        - EBITDA a√±o 5: {get_simbolo_moneda()}{pyl['EBITDA'].iloc[-1]:,.0f} ({pyl['EBITDA %'].iloc[-1]:.1f}%)
        - Beneficio a√±o 5: {get_simbolo_moneda()}{pyl['Beneficio Neto'].iloc[-1]:,.0f}

        CRECIMIENTO:
        - CAGR Ventas: {metricas['cagr_ventas']:.1f}%
        - Margen EBITDA promedio: {metricas['margen_ebitda_promedio']:.1f}%

        VALORACI√ìN:
        - Valor empresa: {get_simbolo_moneda()}{valoracion.get('valor_empresa', 0):,.0f}
        - TIR proyecto: {metricas['tir_proyecto']:.1f}%
        """
    
   # Crear analisis_ia con la nueva informaci√≥n

        # Obtener datos hist√≥ricos para el an√°lisis
        datos_empresa = st.session_state.get('datos_empresa', {})
        if datos_empresa and 'ventas_historicas' in datos_empresa:
            ventas_historicas = datos_empresa['ventas_historicas'][-1] if isinstance(datos_empresa['ventas_historicas'], list) else datos_empresa['ventas_historicas']
            costos_pct = datos_empresa.get('costos_variables_pct', 0)
            gastos_personal = datos_empresa.get('gastos_personal', 0)
            gastos_generales = datos_empresa.get('gastos_generales', 0)
            gastos_marketing = datos_empresa.get('gastos_marketing', 0)
            margen_bruto = ventas_historicas * (1 - costos_pct)
        else:
            # Fallback a valores del primer a√±o proyectado
            ventas_historicas = pyl['Ventas'].iloc[0]
            margen_bruto = pyl['Margen Bruto'].iloc[0]
            gastos_personal = pyl['Gastos Personal'].iloc[0]
            gastos_generales = 0
            gastos_marketing = 0

        # An√°lisis profesional estilo CFO/M&A
        # Calcular m√©tricas adicionales para el an√°lisis
        # Asegurar que las variables est√°n definidas
        if 'ebitda_actual' not in locals():
            ebitda_actual = pyl['EBITDA'].iloc[0]
        if 'ventas_historicas' not in locals():
            ventas_historicas = pyl['Ventas'].iloc[0]
        if 'margen_ebitda_actual' not in locals():
            margen_ebitda_actual = (ebitda_actual / ventas_historicas * 100) if ventas_historicas > 0 else 0

        # Obtener valoraci√≥n profesional
        # Obtener valoraci√≥n profesional seg√∫n m√©todo seleccionado
        if st.session_state.get('metodo_valoracion') == 'mckinsey':
            # Usar valoraci√≥n McKinsey
            from utils.valoracion_mckinsey import ValoracionMcKinsey
            valorador_mck = ValoracionMcKinsey(modelo)
            params_mck = {
                'tasa_libre_riesgo': 0.03,
                'prima_mercado': 0.05,
                'costo_deuda_bruta': 0.06
            }
            resultado_mck = valorador_mck.valorar_empresa(params_mck)
            # Guardar resultado McKinsey completo
            st.session_state.resultado_mck = resultado_mck
            # Guardar resultado_mckinsey en datos_guardados (con seguridad)
            if "datos_guardados" not in st.session_state or st.session_state.datos_guardados is None:
                st.session_state.datos_guardados = {}
            st.session_state.datos_guardados["resultado_mckinsey"] = resultado_mck
            # Adaptar el resultado al formato esperado
            valoracion_prof = {
                'valoracion_final': resultado_mck['enterprise_value'],
                'deuda_neta': modelo.calcular_deuda_total(1) - modelo.tesoreria_inicial,
                "dcf_detalle": {
                    "tir": resultado_mck.get("tir", metricas.get("tir_proyecto", 0)),
                    "wacc": resultado_mck.get("wacc", 8.0),
                    "componentes_wacc": resultado_mck.get("componentes_wacc", {}),
                    "roic_promedio": resultado_mck.get("roic_promedio", 0)
                },
                'metodo': 'McKinsey DCF'
            }
        else:
            # Usar valoraci√≥n est√°ndar
            valoracion_prof = modelo.realizar_valoracion_mckinsey() if hasattr(modelo, 'realizar_valoracion_mckinsey') else {}
        tir_real = valoracion_prof.get('dcf_detalle', {}).get('tir', metricas.get('tir_proyecto', 0))
        valor_empresa_calc = valoracion_prof.get('valoracion_final', 0)
        multiplo_ventas = valor_empresa_calc / ventas_historicas if ventas_historicas > 0 else 0
        multiplo_ebitda = valor_empresa_calc / ebitda_actual if ebitda_actual > 0 else 0
        # Obtener EBITDA hist√≥rico real
        ventas_hist = st.session_state.get('ventas_1', ventas_historicas)
        costos_pct = st.session_state.get('costos_variables_slider', 40) / 100
        gastos_personal = st.session_state.get('gastos_personal_key', 0)
        gastos_generales = st.session_state.get('gastos_generales_key', 0)
        gastos_marketing = st.session_state.get('gastos_marketing_key', 0)

        margen_bruto = ventas_hist * (1 - costos_pct)
        ebitda_historico = margen_bruto - gastos_personal - gastos_generales - gastos_marketing

        # Calcular m√∫ltiplos profesionales LTM/NTM
        multiplo_ebitda_ltm = valor_empresa_calc / ebitda_historico if ebitda_historico > 0 else 0
        multiplo_ebitda_ntm = valor_empresa_calc / pyl['EBITDA'].iloc[0] if pyl['EBITDA'].iloc[0] > 0 else 0
        multiplo_ventas_ltm = valor_empresa_calc / ventas_historicas if ventas_historicas > 0 else 0

        # Importar funci√≥n de an√°lisis CFO
        from utils.analisis_cfo import generar_analisis_cfo
        # Preparar datos para an√°lisis CFO
        datos_analisis = {
            'valor_empresa': valor_empresa_calc,
            'tir': tir_real,
            'multiplo_ebitda': multiplo_ebitda,
            'wacc': resultado_mck.get('wacc', 8.0) if 'resultado_mck' in locals() else 8.0,
            'cagr_ventas': metricas['cagr_ventas'],
            'margen_ebitda_promedio': metricas['margen_ebitda_promedio']
        }
        
        # Generar an√°lisis adaptado al m√©todo
        metodo_usado = st.session_state.get('metodo_valoracion', 'estandar')
        analisis_cfo = generar_analisis_cfo(datos_analisis, metodo_usado)
        
        analisis_ia = {
            'resumen': f"Deal {analisis_cfo['rating']} con TIR {tir_real:.1f}% y m√∫ltiplo EV/EBITDA {multiplo_ebitda:.1f}x",
            'multiplo_ebitda_ltm': multiplo_ebitda_ltm,
            'multiplo_ebitda_ntm': multiplo_ebitda_ntm,
            'multiplo_ventas_ltm': multiplo_ventas_ltm,
            'resumen_ejecutivo': analisis_cfo['resumen_ejecutivo']
        }
    fcf_df = cash_flow

    # Guardar todos los datos en session state
    st.session_state.datos_guardados = {
        'nombre_empresa': nombre_empresa,
        'sector': sector,
        'proyecciones': proyecciones,
        'pyl': pyl,
        'balance': balance,
        'cash_flow': cash_flow,
        'ratios': ratios,
        'resultado_mckinsey': st.session_state.get('resultado_mck', {}),
        'valoracion': valoracion,
        'valoracion_profesional': valoracion_prof,
        # 'datos_empresa': empresa_seleccionada,  # TODO: obtener datos correctos
        'metricas': metricas,
        'analisis_ia': analisis_ia,
        'resumen': resumen,
        # Mantener compatibilidad con c√≥digo antiguo
        'datos_empresa': datos_empresa,
        'wc_df': None,
        'financiacion_df': None,
        'fcf_df': cash_flow,
        # Datos para recrear el modelo
        'modelo_params': {
            'ingresos_iniciales': params_operativos.get('ingresos_iniciales', 0),
            'margen_ebitda_inicial': params_operativos.get('margen_ebitda', 10),
            'crecimiento_ventas': params_operativos.get('crecimiento_ventas', 5),
            'empleados': datos_empresa.get('num_empleados', 10),
            'a√±o_fundacion': datos_empresa.get('a√±o_fundacion', datetime.now().year - 5),
            'tesoreria_inicial': params_operativos.get('tesoreria', 500000),
            'capital_social': params_operativos.get('capital_social', 3000000),
            'prestamos_lp': params_operativos.get('prestamos_lp', []),
            'hipotecas': params_operativos.get('hipotecas', []),
            'leasings': params_operativos.get('leasings', []),
            'polizas_credito': params_operativos.get('polizas_credito', [])
            ,
            'plan_capex': params_operativos.get('plan_capex', [])        }
  
    }
    
    # Actualizar an√°lisis_ia con valoraci√≥n real si existe
    if st.session_state.datos_guardados.get('valoracion_profesional'):
        val_prof = st.session_state.datos_guardados['valoracion_profesional']
        if val_prof and val_prof.get('valoracion_final'):
            valor_real = val_prof.get('valoracion_final', 0)
            tir_real = val_prof.get('dcf_detalle', {}).get('tir', st.session_state.datos_guardados['metricas'].get('tir_proyecto', 0))
            
            # Actualizar resumen ejecutivo con la valoraci√≥n real
            #st.session_state.datos_guardados['analisis_ia']['resumen_ejecutivo'] = f"""
            #La empresa {st.session_state.datos_guardados['nombre_empresa']} del sector {st.session_state.datos_guardados['sector']} presenta un plan de negocio con 
            #crecimiento proyectado del {st.session_state.datos_guardados['metricas']['cagr_ventas']:.1f}% anual, alcanzando ventas de {get_simbolo_moneda()}{st.session_state.datos_guardados['pyl']['Ventas'].iloc[-1]:,.0f}
            #en el a√±o 5. El margen EBITDA promedio es del {st.session_state.datos_guardados['metricas']['margen_ebitda_promedio']:.1f}%.
            
            #La valoraci√≥n estimada es de {get_simbolo_moneda()}{valor_real:,.0f} con un ROI esperado del {tir_real:.1f}%.
            #La viabilidad del proyecto se considera {st.session_state.datos_guardados['analisis_ia']['viabilidad']}.
            #""" 
            # Actualizar tambi√©n las fortalezas con la valoraci√≥n real
    # Mostrar resultados
    st.success("‚úÖ Proyecci√≥n generada exitosamente!")

    # Tabs para organizar la informaci√≥n
    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs(
        ["üíº Dashboard", "üìä P&L Detallado", "üóÇÔ∏è Balance Proyectado", "üìà Analytics", "üìë Resumen Ejecutivo", "üíé Valoraci√≥n", "üìÑ Documentos", "üìö Glosario"])

    with tab1:
        st.header("Dashboard de M√©tricas Clave")

        # M√©tricas principales en cards
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric(
            label="Ventas A√±o 5",
            value=f"{get_simbolo_moneda()}{st.session_state.datos_guardados["pyl"]['Ventas'].iloc[-1]:,.0f}",
            delta=f"{st.session_state.datos_guardados["metricas"]['crecimiento_ventas_promedio']:.1f}% crecimiento anual"
        )

        with col2:
            st.metric(
            label="EBITDA A√±o 5",
            value=f"{get_simbolo_moneda()}{st.session_state.datos_guardados["pyl"]['EBITDA'].iloc[-1]:,.0f}",
            delta=f"{st.session_state.datos_guardados["pyl"]['EBITDA %'].iloc[-1]}% margen"
        )

        with col3:
            st.metric(
            label="Beneficio A√±o 5",
            value=f"{get_simbolo_moneda()}{st.session_state.datos_guardados["pyl"]['Beneficio Neto'].iloc[-1]:,.0f}",
            delta=f"{st.session_state.datos_guardados["pyl"]['Beneficio Neto %'].iloc[-1]}% margen"
        )

        with col4:
            st.metric(
            label="ROI Proyectado",
            value=f"{st.session_state.datos_guardados["metricas"]['roi_proyectado']}%"
        )

        # Documentaci√≥n de Metodolog√≠a
        with st.expander("üìñ Metodolog√≠a de Proyecci√≥n Financiera - M√©todo McKinsey", expanded=False):
            st.markdown("""
            ### üéØ Modelo Integrado de Proyecciones Financieras
            
            Este modelo utiliza la **metodolog√≠a McKinsey** de modelizaci√≥n financiera integrada, donde:
            - El P&L impulsa el Cash Flow
            - El Cash Flow determina las necesidades del Balance
            - La tesorer√≠a act√∫a como variable de ajuste para cuadrar el balance
            
            ---
            
            ### üìä 1. PROYECCI√ìN DE INGRESOS Y COSTOS (P&L)
            
            **Ventas:**
            - An√°lisis del CAGR hist√≥rico (3 a√±os)
            - Ajuste por madurez empresarial (crecimiento/transici√≥n/madura)
            - Factores sectoriales espec√≠ficos
            - L√≠mites realistas de crecimiento
            
            **Estructura de Costos:**
            - **Costos Variables**: % sobre ventas (benchmark sectorial)
            - **Gastos Personal**: Crecimiento = inflaci√≥n + productividad
            - **Gastos Generales**: Semi-fijos (60% fijo + 40% variable)
            - **Marketing**: 3-12% ventas seg√∫n sector
            - **Depreciaci√≥n**: Lineal sobre activo fijo (5-20 a√±os)
            """)
            
            st.markdown("""
            ---
            
            ### üí∞ 2. CONSTRUCCI√ìN DEL CASH FLOW
            
            **Flujo Operativo = EBITDA ¬± Working Capital - Impuestos**
            
            **Working Capital:**
            - D√≠as cobro √ó Ventas/365 = Clientes
            - D√≠as inventario √ó Coste/365 = Inventario  
            - D√≠as pago √ó Compras/365 = Proveedores
            - ŒîWC = Working Capital a√±o n - a√±o n-1
            
            **Flujo Inversi√≥n:**
            - CAPEX: % ventas por sector (2-15%)
            - 70% mantenimiento + 30% crecimiento
            
            **Flujo Financiaci√≥n:**
            - Amortizaci√≥n deuda (sistema franc√©s)
            - Nueva financiaci√≥n autom√°tica si d√©ficit
            - Dividendos: 30-40% del beneficio neto
            """)
            
            st.markdown("""
            ---
            
            ### üè¶ 3. BALANCE INTEGRADO - VARIABLE DE AJUSTE
            
            **Principio McKinsey: Activo = Pasivo + Patrimonio (siempre)**
            
            **Construcci√≥n del Balance:**
            1. **Activos Operativos** (del negocio):
               - Activo Fijo: Inicial + CAPEX - Depreciaci√≥n
               - Working Capital: Calculado desde P&L
               - Intangibles: Inversi√≥n sectorial - Amortizaci√≥n
            
            2. **Pasivos Operativos**:
               - Proveedores (d√≠as pago)
               - Deuda financiera (amortizaci√≥n tabla)
            
            3. **Patrimonio Neto**:
               - Capital + Reservas + Beneficios - Dividendos
            
            4. **TESORER√çA = Variable de Ajuste**:
               - Tesorer√≠a = Total Pasivo + PN - Activos sin tesorer√≠a
               - Si < 0: Genera deuda CP autom√°tica (refleja uso real de l√≠neas de cr√©dito)
               - M√≠nimo: 2.5% ventas o 15 d√≠as gastos
            """)
            
            st.markdown("""
            ---
            
            ### üìà 4. RATIOS DE CONTROL Y VALIDACI√ìN
            
            **Rentabilidad:**
            - ROE = Beneficio Neto / Patrimonio (objetivo: 15-20%)
            - ROCE = EBIT / Capital Empleado (objetivo: >12%)
            - Margen EBITDA por sector
            
            **Liquidez:**
            - Current Ratio > 1.5
            - Acid Test > 1.0
            - Cash Conversion Cycle < 60 d√≠as
            
            **Endeudamiento:**
            - Deuda/EBITDA < 3x (saludable)
            - Deuda/Patrimonio < 1.5x
            - Cobertura intereses > 3x
            
            ---
            
            ### ‚úÖ 5. VALIDACIONES AUTOM√ÅTICAS DEL MODELO
            
            1. **Balance siempre cuadrado** (error < ‚Ç¨1)
            2. **Sin tesorer√≠a negativa** (financiaci√≥n autom√°tica)
            3. **Ratios dentro de rangos** (alertas si an√≥malos)
            4. **Coherencia temporal** (saldo final a√±o n = inicial n+1)
            5. **L√≠mites sectoriales** respetados
            """)

            st.markdown("""
            
            ---
            
            ### üéØ C√ìMO EL MODELO SE ADAPTA A SU EMPRESA
            
            Una de las fortalezas de este modelo es su capacidad para ajustarse autom√°ticamente seg√∫n el momento evolutivo de su empresa. No es lo mismo gestionar una startup en hipercrecimiento que una empresa consolidada.
            
            **Para Empresas en Crecimiento Acelerado:**
            - El modelo prioriza la reinversi√≥n total de beneficios
            - Mantiene una tesorer√≠a ajustada pero suficiente
            - Permite tasas de crecimiento ambiciosas (25-30% anual)
            - Enfoque: Capturar mercado r√°pidamente
            
            **Para Empresas en Consolidaci√≥n:**
            - Balance entre crecimiento y retorno a inversores
            - Comienza la distribuci√≥n de dividendos (t√≠picamente 25% del beneficio)
            - Crecimiento m√°s sostenible (10-20% anual)
            - Enfoque: Fortalecer posici√≥n competitiva
            
            **Para Empresas Maduras:**
            - Maximiza el retorno al accionista (hasta 50% en dividendos)
            - Mantiene colchones de liquidez m√°s amplios
            - Crecimiento org√°nico estable (5-10% anual)
            - Enfoque: Generar flujos predecibles
            
            **Nota importante:** Estos son patrones generales observados en el mercado. Su empresa puede tener una estrategia diferente - Amazon reinvierte todo siendo l√≠der mundial, mientras algunas startups ya reparten dividendos. El modelo es flexible y debe ajustarse a su visi√≥n estrat√©gica particular.
            """)
            
            st.markdown("""
            ---
            
            ### üí° INTERPRETACI√ìN DE RESULTADOS
            
            **Para el usuario:**
            - Los valores absolutos son menos importantes que las **tendencias**
            - Comparar siempre con **benchmarks del sector**
            - Un modelo es tan bueno como sus **hip√≥tesis de entrada**
            - Realizar **an√°lisis de sensibilidad** sobre variables clave
            
            **Se√±ales de alerta:**
            - Crecimiento >30% anual sostenido (poco realista)
            - M√°rgenes muy superiores al sector
            - Working Capital negativo extremo
            - Deuda/EBITDA > 4x
            
            ---
            
            ### üìö REFERENCIAS Y BENCHMARKS
            
            - M√©todo basado en *"Valuation" - McKinsey & Company*
            - Ratios sectoriales de Damodaran (NYU Stern)
            - Normas IFRS para presentaci√≥n
            - Benchmarks: Banco de Espa√±a, CNMV, Informa D&B
            """)



        # Limitaciones y consideraciones
        with st.expander("‚ö†Ô∏è Limitaciones y Consideraciones Importantes", expanded=False):
            st.markdown("""
            **Sobre los benchmarks utilizados:**
            - Los m√°rgenes EBITDA son aproximaciones basadas en promedios sectoriales p√∫blicos
            - No tenemos acceso a bases de datos profesionales en tiempo real (Capital IQ, Bloomberg)
            - Cada empresa es √∫nica - valide estos rangos con sus propios datos hist√≥ricos
            
            **Sobre las proyecciones:**
            - El modelo asume continuidad del negocio (principio "going concern")
            - No considera autom√°ticamente eventos extraordinarios, pero puede ajustarlos manualmente en "Ajuste por eventos especiales" del sidebar
            - La calidad de las proyecciones depende directamente de la calidad de sus datos de entrada
            
            **Se√±ales de solidez financiera a buscar:**
            - Tesorer√≠a entre 2.5-10% de ventas (liquidez sin excesos)
            - Deuda/EBITDA < 2.5 x con tendencia estable
            - ROE > 15% de forma sostenible
            - Working Capital positivo pero optimizado
            
            **Caso de √©xito del modelo:**
            Una empresa industrial tipo MetalPro que generaba tesorer√≠a excesiva (37% sobre ventas)
            ahora mantiene niveles √≥ptimos (5-6%) gracias a la pol√≠tica autom√°tica de inversiones
            financieras a largo plazo que implementa el modelo.
            
            **Recomendaci√≥n final:** Para decisiones de inversi√≥n significativas, complemente
            este an√°lisis con asesor√≠a profesional especializada en su sector.
            """)
    with tab5:
        mostrar_resumen_ejecutivo_profesional(
            st.session_state.datos_guardados['datos_empresa'].get('num_empleados', 10),
            st.session_state.datos_guardados['datos_empresa'].get('a√±o_fundacion', 2020)
        )

    with tab6:
        st.header("üíé Valoraci√≥n DCF McKinsey")
        
        # Verificar datos de valoraci√≥n
        if st.session_state.get("datos_guardados") and st.session_state.datos_guardados.get("valoracion_profesional"):
            val = st.session_state.datos_guardados["valoracion_profesional"]
            datos = st.session_state.datos_guardados
            pyl = datos.get("pyl", pd.DataFrame())
            
            # M√©tricas principales
            st.subheader("üìä M√©tricas de Valoraci√≥n")
            col1, col2, col3, col4 = st.columns(4)
            
            valor_empresa = val.get("valoracion_final", 0)
            tir = val.get("dcf_detalle", {}).get("tir", 0)
            wacc = val.get("dcf_detalle", {}).get("wacc", 8)
            
            with col1:
                st.metric("Valor Empresa", f"‚Ç¨{valor_empresa:,.0f}", help="Valor total del negocio calculado por DCF McKinsey")
            with col2:
                st.metric("TIR Proyecto", f"{tir:.1f}%", help="Rentabilidad anual esperada del proyecto seg√∫n DCF")
            
            # Equity Bridge si est√° activado
            if st.session_state.get('mostrar_equity_bridge', False):
                st.markdown("---")
                st.subheader("üåâ Equity Bridge")
                
                col1_eb, col2_eb, col3_eb = st.columns(3)
                
                # Obtener valores seg√∫n m√©todo activo
                if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state:
                    ev_value = st.session_state.resultado_mck.get('enterprise_value', valor_empresa)
                    deuda_neta = st.session_state.resultado_mck.get('deuda_neta', 30000000)
                else:
                    ev_value = valor_empresa
                    deuda_neta = 30000000
                
                equity_value = ev_value - deuda_neta
                
                with col1_eb:
                    st.metric("Enterprise Value", f"‚Ç¨{ev_value/1000000:.1f}M", help="Valor total del negocio")
                
                with col2_eb:
                    st.metric("(-) Deuda Neta", f"‚Ç¨{deuda_neta/1000000:.1f}M", help="Deuda financiera - Tesorer√≠a")
                
                with col3_eb:
                    st.metric("= Equity Value", f"‚Ç¨{equity_value/1000000:.1f}M", help="Valor para accionistas")
                
                st.info("üí° El Equity Bridge muestra el camino desde el valor de la empresa hasta el valor para los accionistas")

            # Tabs de an√°lisis
            st.markdown("---")
            val_tab1, val_tab2, val_tab3, val_tab4 = st.tabs(
                ["üìä Football Field", "üî¨ An√°lisis WACC", "üéØ Sensibilidad", "üìà M√∫ltiplos"]
            )
            
            with val_tab1:
                st.subheader("Football Field - Rangos de Valoraci√≥n")
                
                # Explicaci√≥n educativa
                with st.expander("üí° ¬øQu√© es el Football Field y c√≥mo interpretarlo?", expanded=False):
                    st.markdown("""
                    **El gr√°fico Football Field** es una herramienta est√°ndar en banca de inversi√≥n para visualizar rangos de valoraci√≥n.
                    
                    üìä **¬øPor qu√© se llama as√≠?**
                    El nombre viene de su forma visual que se asemeja a un campo de f√∫tbol americano, mostrando rangos desde el m√≠nimo al m√°ximo.
                    
                    üéØ **¬øC√≥mo interpretarlo?**
                    - **Valor Central**: Valoraci√≥n m√°s probable basada en supuestos base
                    - **Rango M√≠nimo (-20%)**: Escenario conservador o venta bajo presi√≥n
                    - **Rango M√°ximo (+20%)**: Escenario optimista o comprador estrat√©gico con sinergias
                    
                    üìà **¬øPor qu√© diferentes m√©todos dan valores distintos?**
                    - **DCF McKinsey**: Basado en flujos de caja futuros (m√°s preciso)
                    - **M√∫ltiplos Sector**: Basado en comparables del mercado (m√°s vol√°til)
                    - **Transacciones**: Basado en ventas reales recientes (incluye premios de control)
                    
                    üí° **Uso pr√°ctico**: Si todos los m√©todos convergen en un rango similar, hay mayor certeza en la valoraci√≥n.
                    """)
                
                # Crear rangos basados en el valor McKinsey
                valor_base = valor_empresa
                
                col_ff1, col_ff2, col_ff3 = st.columns(3)
                
                with col_ff1:
                    st.metric("M√≠nimo (-20%)", f"‚Ç¨{valor_base*0.8/1e6:.1f}M")
                with col_ff2:
                    st.metric("Central", f"‚Ç¨{valor_base/1e6:.1f}M")
                with col_ff3:
                    st.metric("M√°ximo (+20%)", f"‚Ç¨{valor_base*1.2/1e6:.1f}M")
                
                # Mostrar rangos por m√©todo
                st.markdown("#### Rangos por Metodolog√≠a")
                rangos_data = {
                    "DCF McKinsey": [valor_base*0.9, valor_base, valor_base*1.1],
                    "M√∫ltiplos Sector": [valor_base*0.85, valor_base*0.95, valor_base*1.15],
                    "Transacciones Comp.": [valor_base*0.8, valor_base*0.9, valor_base*1.2]
                }
                
                for metodo, valores in rangos_data.items():
                    cols = st.columns(4)
                    cols[0].write(f"**{metodo}:**")
                    cols[1].write(f"‚Ç¨{valores[0]/1e6:.1f}M")
                    cols[2].write(f"‚Ç¨{valores[1]/1e6:.1f}M")
                    cols[3].write(f"‚Ç¨{valores[2]/1e6:.1f}M")
                
                # Gr√°fico Football Field visual con datos reales
                st.markdown("#### Visualizaci√≥n Gr√°fica")
                import plotly.graph_objects as go
                
                fig_ff = go.Figure()
                
                # Usar rangos_data que ya tiene los valores calculados
                for i, (metodo, valores) in enumerate(rangos_data.items()):
                    # L√≠nea horizontal para el rango
                    fig_ff.add_trace(go.Scatter(
                        x=[valores[0]/1e6, valores[2]/1e6],
                        y=[metodo, metodo],
                        mode="lines",
                        line=dict(color="lightblue", width=30),
                        showlegend=False
                    ))
                    # Punto central
                    fig_ff.add_trace(go.Scatter(
                        x=[valores[1]/1e6],
                        y=[metodo],
                        mode="markers",
                        marker=dict(size=12, color="darkblue"),
                        showlegend=False
                    ))
                
                # L√≠nea vertical para valor final real
                fig_ff.add_vline(x=valor_base/1e6, line_dash="dash", line_color="red", annotation_text="Valor Final")
                
                fig_ff.update_layout(
                    title="Football Field Chart - Comparaci√≥n de M√©todos",
                    xaxis_title="Valor Empresa (‚Ç¨M)",
                    yaxis_title="M√©todo",
                    height=250
                )
                
                st.plotly_chart(fig_ff, use_container_width=True)            
            with val_tab2:
                st.subheader("An√°lisis del WACC")
                
                # Explicaci√≥n educativa del WACC
                with st.expander("üí° ¬øQu√© es el WACC y por qu√© es cr√≠tico?", expanded=False):
                    st.markdown("""
                    **WACC (Weighted Average Cost of Capital)** es la tasa de descuento clave en valoraci√≥n empresarial.
                    
                    üìä **¬øQu√© representa?**
                    Es el retorno m√≠nimo que la empresa debe generar para satisfacer a todos sus inversores (accionistas y prestamistas).
                    
                    üîç **Componentes explicados:**
                    - **Kd (Coste de Deuda)**: Inter√©s que paga la empresa por pr√©stamos (~4%)
                    - **Ke (Coste del Equity)**: Retorno esperado por los accionistas (~10%)
                    - **D/(D+E)**: Proporci√≥n de deuda en la estructura de capital
                    - **E/(D+E)**: Proporci√≥n de equity en la estructura de capital
                    - **(1-T)**: Escudo fiscal de la deuda (los intereses desgravan)
                    
                    ‚ö†Ô∏è **¬øPor qu√© es cr√≠tico?**
                    - Un WACC 1% mayor puede reducir la valoraci√≥n en 10-15%
                    - Empresas con menor riesgo tienen WACC m√°s bajo = mayor valor
                    - El WACC debe reflejar el riesgo real del negocio
                    
                    üí° **Regla pr√°ctica**: Si la TIR > WACC, el proyecto crea valor. Si TIR < WACC, destruye valor.
                    """)
                
                dcf = val.get("dcf_detalle", {})
                dcf = val.get("dcf_detalle", {})
                componentes = dcf.get("componentes_wacc", {})
                wacc_componentes = {
                    "Coste de la Deuda (Kd)": round(componentes.get("cost_of_debt_after_tax", 0.04) * 100, 1),
                    "Coste del Equity (Ke)": round(componentes.get("cost_of_equity", 0.10) * 100, 1),
                    "% Deuda": round(componentes.get("weights", {}).get("debt", 0.30) * 100, 0),
                    "% Equity": round(componentes.get("weights", {}).get("equity", 0.70) * 100, 0)
                }
                dcf = val.get("dcf_detalle", {})
                componentes = dcf.get("componentes_wacc", {})
                wacc_componentes = {
                    "Coste de la Deuda (Kd)": round(componentes.get("cost_of_debt_after_tax", 0.04) * 100, 1),
                    "Coste del Equity (Ke)": round(componentes.get("cost_of_equity", 0.10) * 100, 1),
                    "% Deuda": round(componentes.get("weights", {}).get("debt", 0.30) * 100, 0),
                    "% Equity": round(componentes.get("weights", {}).get("equity", 0.70) * 100, 0)
                }
                dcf = val.get("dcf_detalle", {})
                componentes = dcf.get("componentes_wacc", {})
                wacc_componentes = {
                    "Coste de la Deuda (Kd)": round(componentes.get("cost_of_debt_after_tax", 0.04) * 100, 1),
                    "Coste del Equity (Ke)": round(componentes.get("cost_of_equity", 0.10) * 100, 1),
                    "% Deuda": round(componentes.get("weights", {}).get("debt", 0.30) * 100, 0),
                    "% Equity": round(componentes.get("weights", {}).get("equity", 0.70) * 100, 0)
                }
                dcf = val.get("dcf_detalle", {})
                componentes = dcf.get("componentes_wacc", {})
                wacc_componentes = {
                    "Coste de la Deuda (Kd)": round(componentes.get("cost_of_debt_after_tax", 0.04) * 100, 1),
                    "Coste del Equity (Ke)": round(componentes.get("cost_of_equity", 0.10) * 100, 1),
                    "% Deuda": round(componentes.get("weights", {}).get("debt", 0.30) * 100, 0),
                    "% Equity": round(componentes.get("weights", {}).get("equity", 0.70) * 100, 0)
                }
                dcf = val.get("dcf_detalle", {})
                componentes = dcf.get("componentes_wacc", {})
                wacc_componentes = {
                    "Coste de la Deuda (Kd)": round(componentes.get("cost_of_debt_after_tax", 0.04) * 100, 1),
                    "Coste del Equity (Ke)": round(componentes.get("cost_of_equity", 0.10) * 100, 1),
                    "% Deuda": round(componentes.get("weights", {}).get("debt", 0.30) * 100, 0),
                    "% Equity": round(componentes.get("weights", {}).get("equity", 0.70) * 100, 0)
                }
                dcf = val.get("dcf_detalle", {})
                componentes = dcf.get("componentes_wacc", {})
                wacc_componentes = {
                    "Coste de la Deuda (Kd)": round(componentes.get("cost_of_debt_after_tax", 0.04) * 100, 1),
                    "Coste del Equity (Ke)": round(componentes.get("cost_of_equity", 0.10) * 100, 1),
                    "% Deuda": round(componentes.get("weights", {}).get("debt", 0.30) * 100, 0),
                    "% Equity": round(componentes.get("weights", {}).get("equity", 0.70) * 100, 0)
                }
                
                col_wacc1, col_wacc2 = st.columns(2)
                
                with col_wacc1:
                    st.metric("WACC Total", f"{wacc:.2f}%")
                    st.write("**F√≥rmula:**")
                    st.write("WACC = Kd √ó (1-T) √ó D/(D+E) + Ke √ó E/(D+E)")
                
                with col_wacc2:
                    for componente, valor in wacc_componentes.items():
                        st.write(f"**{componente}:** {valor}%")            
            with val_tab3:
                st.subheader("An√°lisis de Sensibilidad")
                
                # Explicaci√≥n educativa de sensibilidad
                with st.expander("üí° ¬øC√≥mo usar el an√°lisis de sensibilidad para decisiones?", expanded=False):
                    st.markdown("""
                    **El an√°lisis de sensibilidad** muestra c√≥mo cambia la valoraci√≥n ante variaciones en variables clave.
                    
                    üìä **¬øPor qu√© es importante?**
                    En valoraci√≥n, peque√±os cambios en supuestos pueden tener grandes impactos en el valor final.
                    
                    üéØ **Variables m√°s cr√≠ticas:**
                    - **WACC**: La tasa de descuento es la variable m√°s sensible
                    - **g (crecimiento perpetuo)**: Afecta el valor terminal (65-80% del valor total)
                    - **M√°rgenes EBITDA**: Impactan directamente los flujos de caja
                    
                    üìà **¬øC√≥mo interpretarlo?**
                    - **WACC -1%**: Valoraci√≥n aumenta ~15% (relaci√≥n inversa)
                    - **WACC +1%**: Valoraci√≥n disminuye ~13%
                    - **g +0.5%**: Valoraci√≥n aumenta ~8% (relaci√≥n directa)
                    
                    üíº **Uso en negociaci√≥n:**
                    - Si el comprador usa WACC alto ‚Üí valoraci√≥n baja (conservador)
                    - Si el vendedor usa WACC bajo ‚Üí valoraci√≥n alta (optimista)
                    - El an√°lisis ayuda a entender el rango de negociaci√≥n
                    
                    ‚ö†Ô∏è **Regla clave**: Si la valoraci√≥n es muy sensible (>20% variaci√≥n), los supuestos deben ser muy robustos.
                    """)
                
                st.write("**Impacto en valoraci√≥n por cambios en WACC:**")
                
                # Crear tabla de sensibilidad
                col_sens1, col_sens2, col_sens3 = st.columns(3)
                
                with col_sens1:
                    valor_wacc_menos = valor_base * 1.15
                    st.metric("WACC -1%", f"‚Ç¨{valor_wacc_menos/1e6:.1f}M", f"+{15}%")
                
                with col_sens2:
                    st.metric("WACC Base", f"‚Ç¨{valor_base/1e6:.1f}M", "0%")
                
                with col_sens3:
                    valor_wacc_mas = valor_base * 0.87
                    st.metric("WACC +1%", f"‚Ç¨{valor_wacc_mas/1e6:.1f}M", f"-{13}%")
                
                st.markdown("---")
                st.write("**Impacto por cambios en crecimiento perpetuo (g):**")
                
                col_g1, col_g2, col_g3 = st.columns(3)
                
                with col_g1:
                    st.metric("g = 2.0%", f"‚Ç¨{valor_base*0.95/1e6:.1f}M", "-5%")
                with col_g2:
                    st.metric("g = 2.5%", f"‚Ç¨{valor_base/1e6:.1f}M", "Base")
                with col_g3:
                        st.metric("g = 3.0%", f"‚Ç¨{valor_base*1.08/1e6:.1f}M", "+8%")            
            
                
                st.markdown("---")
                st.write("**Impacto por cambios en margen EBITDA:**")
                
                col_ebitda1, col_ebitda2, col_ebitda3 = st.columns(3)
                
                # Obtener margen EBITDA real del P&L
                margen_actual = pyl["EBITDA %"].iloc[-1] if "EBITDA %" in pyl and not pyl.empty else 10
                
                # Calcular impactos proporcionales basados en el valor real
                # Un cambio de 2pp en EBITDA t√≠picamente impacta ~15% en valoraci√≥n
                factor_impacto = 0.075  # 7.5% de impacto por punto porcentual
                
                with col_ebitda1:
                    valor_ebitda_menos = valor_base * (1 - 2 * factor_impacto)
                    st.metric("EBITDA -2pp", f"‚Ç¨{valor_ebitda_menos/1e6:.1f}M", f"-{2*factor_impacto*100:.0f}%")
                
                with col_ebitda2:
                    st.metric(f"EBITDA {margen_actual:.1f}%", f"‚Ç¨{valor_base/1e6:.1f}M", "Base")
                
                with col_ebitda3:
                    valor_ebitda_mas = valor_base * (1 + 2 * factor_impacto)
                    st.metric("EBITDA +2pp", f"‚Ç¨{valor_ebitda_mas/1e6:.1f}M", f"+{2*factor_impacto*100:.0f}%")
                
                # Matriz de sensibilidad combinada con datos reales
                st.markdown("---")
                st.markdown("#### üìä Matriz de Sensibilidad Combinada")
                
                import pandas as pd
                
                # Crear escenarios basados en impactos reales
                escenarios = {
                    "Pesimista": {
                        "WACC": "+1%",
                        "EBITDA": "-2pp",
                        "g": "-0.5%",
                        "Impacto": "-30%",
                        "Valor": valor_base * 0.70
                    },
                    "Conservador": {
                        "WACC": "+0.5%",
                        "EBITDA": "-1pp",
                        "g": "Base",
                        "Impacto": "-15%",
                        "Valor": valor_base * 0.85
                    },
                    "Base": {
                        "WACC": f"{wacc:.1f}%",
                        "EBITDA": f"{margen_actual:.1f}%",
                        "g": "2.5%",
                        "Impacto": "0%",
                        "Valor": valor_base
                    },
                    "Optimista": {
                        "WACC": "-0.5%",
                        "EBITDA": "+1pp",
                        "g": "+0.5%",
                        "Impacto": "+20%",
                        "Valor": valor_base * 1.20
                    },
                    "Mejor Caso": {
                        "WACC": "-1%",
                        "EBITDA": "+2pp",
                        "g": "+0.5%",
                        "Impacto": "+35%",
                        "Valor": valor_base * 1.35
                    }
                }
                
                # Crear DataFrame
                df_matriz = pd.DataFrame(escenarios).T
                df_matriz["Valor (‚Ç¨M)"] = df_matriz["Valor"].apply(lambda x: f"‚Ç¨{x/1e6:.1f}M")
                df_matriz = df_matriz.drop("Valor", axis=1)
                
                # Mostrar tabla
                st.dataframe(df_matriz, use_container_width=True)
                
                st.info("""
                **Interpretaci√≥n:**
                ‚Ä¢ Escenarios combinan cambios simult√°neos en las tres variables clave
                ‚Ä¢ El impacto es multiplicativo: peque√±os cambios generan grandes efectos
                ‚Ä¢ Use esta matriz para entender el rango de valoraci√≥n en negociaci√≥n
                """)            
            with val_tab4:
                st.subheader("An√°lisis de M√∫ltiplos")
                
                # Explicaci√≥n educativa
                with st.expander("üí° ¬øC√≥mo interpretar los m√∫ltiplos de valoraci√≥n?", expanded=False):
                    st.markdown("""
                    **Los m√∫ltiplos** son ratios que comparan el valor de la empresa con m√©tricas financieras clave.
                    
                    üìä **M√∫ltiplos principales:**
                    - **EV/EBITDA**: El m√°s usado en M&A. Indica cu√°ntos a√±os de EBITDA cuesta la empresa
                    - **EV/Ventas**: √ötil para empresas en crecimiento o con m√°rgenes vol√°tiles
                    - **P/E**: Precio sobre beneficios (m√°s usado en bolsa)
                    
                    üéØ **¬øC√≥mo interpretarlos?**
                    - **EV/EBITDA < 6x**: Valoraci√≥n baja (posible oportunidad)
                    - **EV/EBITDA 6-10x**: Rango t√≠pico para empresas maduras
                    - **EV/EBITDA > 10x**: Valoraci√≥n premium (crecimiento alto o l√≠der del sector)
                    
                    üìà **Factores que afectan los m√∫ltiplos:**
                    - Crecimiento esperado (mayor crecimiento = m√∫ltiplo m√°s alto)
                    - M√°rgenes de rentabilidad (mejores m√°rgenes = m√∫ltiplo m√°s alto)
                    - Posici√≥n competitiva (l√≠der del mercado = premium)
                    - Riesgo del sector (menor riesgo = m√∫ltiplo m√°s alto)
                    
                    üí° **Uso pr√°ctico**: Compare con empresas similares del sector. Un m√∫ltiplo 20% inferior puede indicar oportunidad de compra.
                    """)
                
                # An√°lisis de m√∫ltiplos
                col_mult1, col_mult2 = st.columns(2)
                
                with col_mult1:
                    st.markdown("#### M√∫ltiplos de la Empresa")
                    ebitda = pyl["EBITDA"].iloc[-1] if "EBITDA" in pyl and not pyl.empty else 1
                    ventas = pyl["Ventas"].iloc[-1] if "Ventas" in pyl and not pyl.empty else 1
                    beneficio = pyl["Beneficio Neto"].iloc[-1] if "Beneficio Neto" in pyl and not pyl.empty else 1
                    
                    ev_ebitda = valor_empresa / ebitda if ebitda > 0 else 0
                    ev_ventas = valor_empresa / ventas if ventas > 0 else 0
                    pe_ratio = valor_empresa / beneficio if beneficio > 0 else 0
                    
                    st.metric("EV/EBITDA", f"{ev_ebitda:.1f}x")
                    st.metric("EV/Ventas", f"{ev_ventas:.2f}x")
                    st.metric("P/E", f"{pe_ratio:.1f}x" if pe_ratio > 0 else "N/A")
                
                with col_mult2:
                    st.markdown("#### Benchmarks del Sector")
                    sector_multiples = {
                        "industrial": {"ev_ebitda": "8-10x", "ev_ventas": "1.0-1.5x", "pe": "15-20x"},
                        "tecnologia": {"ev_ebitda": "12-20x", "ev_ventas": "3-5x", "pe": "25-35x"},
                        "retail": {"ev_ebitda": "6-8x", "ev_ventas": "0.5-1x", "pe": "12-18x"},
                        "servicios": {"ev_ebitda": "10-14x", "ev_ventas": "2-3x", "pe": "18-25x"}
                    }
                    
                    sector_actual = st.session_state.datos_guardados.get("datos_empresa", {}).get("sector", "servicios").lower()
                    benchmarks = sector_multiples.get(sector_actual, sector_multiples["servicios"])
                    
                    st.info(f"""
                    **Rangos t√≠picos sector {sector_actual.title()}:**
                    ‚Ä¢ EV/EBITDA: {benchmarks["ev_ebitda"]}
                    ‚Ä¢ EV/Ventas: {benchmarks["ev_ventas"]}
                    ‚Ä¢ P/E: {benchmarks["pe"]}
                    """)
                
                # An√°lisis comparativo
                st.markdown("---")
                st.markdown("#### üìä An√°lisis Comparativo")
                
                if ev_ebitda < 8:
                    conclusion = "La empresa cotiza a **descuento** respecto al sector. Posible oportunidad de inversi√≥n."
                elif ev_ebitda > 12:
                    conclusion = "La empresa cotiza a **m√∫ltiplo premium**. Se justifica si hay alto crecimiento o ventajas competitivas."
                else:
                    conclusion = "La empresa cotiza **en l√≠nea con el mercado**. Valoraci√≥n equilibrada."
                
                st.write(conclusion)
    with tab7:
        st.header("üìÑ Documentos Ejecutivos")
        
        if 'datos_guardados' in st.session_state and st.session_state.datos_guardados:
            # Un solo bot√≥n centrado y profesional
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                st.markdown("### üíé Informe de Valoraci√≥n DCF")
                st.markdown("""
                Genera un informe ejecutivo profesional que incluye:
                - Resumen Ejecutivo con Tesis de Inversi√≥n
                - An√°lisis Macroecon√≥mico y Sectorial  
                - Valoraci√≥n DCF con metodolog√≠a McKinsey
                - An√°lisis de Sensibilidad
                - Proyecciones Financieras Consolidadas
                - An√°lisis SWOT Din√°mico
                - Proyecciones Anuales Detalladas (5 a√±os)
                - Recomendaciones Estrat√©gicas
                
                **Total: 15 p√°ginas** de an√°lisis profesional
                """)
                
                # Opciones de generaci√≥n de informe
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üìä Generar Informe de Valoraci√≥n", type="primary", use_container_width=True):
                        try:
                            from utils.pdf_mckinsey_generator import generar_pdf_mckinsey
                            with st.spinner("Preparando informe ejecutivo..."):
                                datos = st.session_state.datos_guardados
                                resultado_mck = datos.get("resultado_mckinsey", {})
                            
                                if resultado_mck:
                                    pdf_bytes = generar_pdf_mckinsey(
                                        datos_empresa=datos["datos_empresa"],
                                        resultado_mckinsey=resultado_mck,
                                        pyl_df=datos["pyl"],
                                        balance_df=datos.get("balance"),
                                        analisis_ia=datos.get("analisis_ia", {}),
                                        fcf_df=datos.get("cash_flow"),
                                    )
                                    
                                    st.download_button(
                                        label="üì• Descargar Informe DCF",
                                        data=pdf_bytes,
                                        file_name=f"Valoracion_DCF_{datos['datos_empresa']['nombre'].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.pdf",
                                        mime="application/pdf",
                                        use_container_width=True
                                    )
                                    st.success("‚úÖ Informe generado exitosamente")
                                else:
                                    st.warning("‚ö†Ô∏è Genera primero la valoraci√≥n en el tab 'Valoraci√≥n'")
                        except Exception as e:
                            st.error(f"Error generando informe: {str(e)}")
                
                with col2:
                    # Bot√≥n 1: PDF con DCF + IA b√°sica
                    # Bot√≥n 2: PDF con an√°lisis profundo IA V2
                    if st.button("ü§ñ An√°lisis Completo IA V2", type="primary", use_container_width=True, help="Informe completo con an√°lisis profundo de IA"):
                            try:
                                from utils.data_collector import recopilar_datos_completos
                                from utils.ai_analyzer_v2 import AIAnalyzerV2
                                from utils.pdf_ia_generator import generar_pdf_con_ia
                                
                                ia_selected = st.session_state.get('ia_selected')
                                
                                if not ia_selected:
                                    st.error("‚ùå Configura una IA en el sidebar primero")
                                    st.info("Ve a: Sidebar ‚Üí Configuraci√≥n de IA ‚Üí Selecciona modelo y agrega API key")
                                else:
                                    with st.spinner(f"ü§ñ Generando an√°lisis completo con IA V2..."):
                                        api_key = st.session_state.get(f'{ia_selected}_api_key')
                                        
                                        if api_key:
                                            # Paso 1: Recopilar TODOS los datos
                                            st.info("üìä Recopilando datos completos...")
                                            datos_completos = recopilar_datos_completos()
                                            
                                            # Paso 2: Generar an√°lisis con IA
                                            st.info(f"üß† Generando an√°lisis profundo con {ia_selected.upper()}...")
                                            analyzer = AIAnalyzerV2(modelo=ia_selected, api_key=api_key)
                                            analisis_ia = analyzer.generar_analisis_completo()
                                            
                                            # Mostrar resumen del an√°lisis
                                            resumen = analyzer.generar_resumen_analisis(analisis_ia)
                                            with st.expander("üìã Ver resumen del an√°lisis generado"):
                                                st.code(resumen)
                                            
                                            # Paso 3: Generar PDF
                                            st.info("üìÑ Generando PDF profesional...")
                                            pdf_buffer = generar_pdf_con_ia(datos_completos, analisis_ia)
                                            
                                            # Paso 4: Descargar
                                            nombre = datos_completos['info_basica']['nombre_empresa'].replace(' ', '_')
                                            fecha = datetime.now().strftime('%Y%m%d')
                                            
                                            st.success("‚úÖ Informe IA V2 generado exitosamente!")
                                            
                                            st.download_button(
                                                "üì• Descargar Informe Completo IA V2",
                                                data=pdf_buffer.getvalue(),
                                                file_name=f"Informe_IA_V2_{nombre}_{fecha}.pdf",
                                                mime="application/pdf",
                                                key="download_ia_v2_pdf",
                                                type="primary",
                                                use_container_width=True
                                            )
                                        else:
                                            st.error(f"‚ùå No se encontr√≥ API key para {ia_selected}")
                            
                            except Exception as e:
                                st.error(f"Error generando informe IA V2: {str(e)}")
                                import traceback
                                st.code(traceback.format_exc())
        else:
            st.info("üëÜ Genera primero las proyecciones financieras")

    with tab8:
        st.header("üìö Glosario de T√©rminos Financieros")
        
        # Diccionario de t√©rminos completo
        glosario = {
            "M√©tricas Financieras": {
                "EBITDA": "Earnings Before Interest, Taxes, Depreciation and Amortization. Beneficio antes de intereses, impuestos, depreciaci√≥n y amortizaci√≥n. F√≥rmula: EBITDA = Ingresos - Costos - Gastos Operativos",
                "P&L": "Profit & Loss. Cuenta de p√©rdidas y ganancias. Estado financiero que muestra ingresos, gastos y beneficios.",
                "FCF": "Free Cash Flow. Flujo de caja libre. Efectivo disponible despu√©s de inversiones. F√≥rmula: FCF = EBITDA - Impuestos - CapEx - Œî Capital Trabajo",
                "CapEx": "Capital Expenditure. Inversiones en activos fijos como maquinaria, equipos o instalaciones.",
                "EBIT": "Earnings Before Interest and Taxes. Beneficio antes de intereses e impuestos.",
                "Gross Margin": "Margen bruto. Rentabilidad despu√©s de costos directos. F√≥rmula: (Ventas - Costos) / Ventas √ó 100",
                "OPEX": "Operating Expenses. Gastos operativos del negocio excluyendo costos de producci√≥n.",
                "COGS": "Cost of Goods Sold. Costo de los bienes vendidos. Incluye materiales y mano de obra directa.",
                "SG&A": "Selling, General & Administrative. Gastos de ventas, generales y administrativos.",
                "D&A": "Depreciation & Amortization. Depreciaci√≥n de activos tangibles y amortizaci√≥n de intangibles.",
                "Net Income": "Beneficio Neto. Ganancia final despu√©s de todos los gastos e impuestos.",
                "Gross Profit": "Beneficio Bruto. Ventas menos costo de ventas."
            },
            "Balance": {
                "Working Capital": "Capital de trabajo. Recursos necesarios para la operaci√≥n diaria. F√≥rmula: Activo Corriente - Pasivo Corriente",
                "Current Assets": "Activo Corriente. Activos l√≠quidos o convertibles en efectivo en menos de un a√±o.",
                "Current Liabilities": "Pasivo Corriente. Obligaciones a pagar en menos de un a√±o.",
                "Equity": "Patrimonio Neto. Valor de la empresa para los accionistas.",
                "PP&E": "Property, Plant & Equipment. Propiedad, planta y equipo. Activos fijos tangibles.",
                "A/R": "Accounts Receivable. Cuentas por cobrar. Dinero que deben los clientes.",
                "A/P": "Accounts Payable. Cuentas por pagar. Dinero que se debe a proveedores.",
                "WIP": "Work in Progress. Trabajo en proceso. Inventario parcialmente completado.",
                "Goodwill": "Fondo de Comercio. Valor intangible de marca, reputaci√≥n y relaciones con clientes.",
                "Inventory": "Inventario. Existencias de productos terminados, materias primas y productos en proceso."
            },
            "Valoraci√≥n": {
                "DCF": "Discounted Cash Flow. Flujo de caja descontado. M√©todo de valoraci√≥n basado en proyecciones futuras.",
                "WACC": "Weighted Average Cost of Capital. Costo promedio ponderado del capital. Tasa de descuento para valoraci√≥n.",
                "EV": "Enterprise Value. Valor de la empresa. Precio total de adquisici√≥n. F√≥rmula: Market Cap + Deuda - Efectivo",
                "Terminal Value": "Valor Terminal. Valor de la empresa al final del per√≠odo de proyecci√≥n.",
                "NPV": "Net Present Value. Valor Actual Neto. Valor presente de flujos futuros menos inversi√≥n inicial.",
                "IRR": "Internal Rate of Return. Tasa Interna de Retorno. Tasa que hace el VAN igual a cero.",
                "Payback": "Per√≠odo de Recuperaci√≥n. Tiempo necesario para recuperar la inversi√≥n inicial.",
                "Multiple": "M√∫ltiplo de Valoraci√≥n. Ratio para comparar empresas (ej: EV/EBITDA, P/E).",
                "Beta": "Coeficiente Beta. Medida del riesgo sistem√°tico de una acci√≥n respecto al mercado.",
                "LTM": "Last Twelve Months. √öltimos doce meses. Per√≠odo de referencia para m√©tricas hist√≥ricas. Se usa en m√∫ltiplos de valoraci√≥n como EV/EBITDA LTM.",
                "NTM": "Next Twelve Months. Pr√≥ximos doce meses. Per√≠odo de referencia para m√©tricas proyectadas. Se usa en m√∫ltiplos forward como EV/EBITDA NTM.",
                "TTM": "Trailing Twelve Months. Sin√≥nimo de LTM. √öltimos 12 meses de datos hist√≥ricos.",
            },
            "Ratios": {
                "ROE": "Return on Equity. Rentabilidad sobre el patrimonio. F√≥rmula: Beneficio Neto / Patrimonio √ó 100",
                "ROCE": "Return on Capital Employed. Rentabilidad sobre capital empleado. Mide la eficiencia en el uso del capital operativo. F√≥rmula: EBIT / (Activos Totales - Pasivo Corriente) √ó 100",
                "ROA": "Return on Assets. Rentabilidad sobre activos. F√≥rmula: Beneficio Neto / Activos √ó 100",
                "Liquidity Ratio": "Ratio de liquidez. Capacidad de pagar obligaciones a corto plazo. F√≥rmula: Activo Corriente / Pasivo Corriente",
                "Debt-to-Equity": "Ratio deuda/patrimonio. Nivel de apalancamiento. F√≥rmula: Deuda Total / Patrimonio Neto",
                "Quick Ratio": "Prueba √Åcida. Liquidez excluyendo inventarios. F√≥rmula: (Activo Corriente - Inventario) / Pasivo Corriente",
                "Current Ratio": "Ratio Corriente. Similar al ratio de liquidez. Activo Corriente / Pasivo Corriente",
                "DSO": "Days Sales Outstanding. D√≠as de cobro. Tiempo promedio para cobrar ventas.",
                "DPO": "Days Payable Outstanding. D√≠as de pago. Tiempo promedio para pagar a proveedores.",
                "Asset Turnover": "Rotaci√≥n de Activos. Eficiencia en el uso de activos. F√≥rmula: Ventas / Activos Totales",
                "Interest Coverage": "Cobertura de Intereses. Capacidad de pagar intereses. F√≥rmula: EBIT / Gastos por Intereses",
                "CAGR": "Compound Annual Growth Rate. Tasa de crecimiento anual compuesto. F√≥rmula: ((Valor Final/Valor Inicial)^(1/a√±os) - 1) √ó 100",
                "Ratio de Apalancamiento": "Deuda Total / EBITDA. Mide cu√°ntos a√±os de EBITDA se necesitan para pagar la deuda total.",
                "Autonom√≠a Financiera": "Patrimonio Neto / Activo Total √ó 100. Porcentaje del activo financiado con recursos propios.",
                "Fondo de Maniobra": "Working Capital. Activo Corriente - Pasivo Corriente. Recursos para la operaci√≥n diaria."
            }
        }
            
        # Mostrar por categor√≠as con expanders
        for categoria, terminos in glosario.items():
            terminos_filtrados = terminos
            
            with st.expander(f"üìÇ {categoria} ({len(terminos_filtrados)} t√©rminos)", expanded=True):
                # Crear dos columnas para los t√©rminos
                cols = st.columns(2)
                for idx, (termino, definicion) in enumerate(terminos_filtrados.items()):
                    with cols[idx % 2]:
                        st.markdown(f"**{termino}**")
                        st.caption(definicion)
                        st.markdown("")
        
        # Estad√≠sticas y nota al pie
        total_terminos = sum(len(terminos) for terminos in glosario.values())
        
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de t√©rminos", total_terminos)
        with col2:
            st.metric("Categor√≠as", len(glosario))
        with col3:
            st.metric("M√°s usado", "EBITDA")
            
        st.info("""
        üí° **Tips de uso:**
        - Usa la barra de b√∫squeda para encontrar t√©rminos r√°pidamente
        - Los t√©rminos est√°n agrupados por categor√≠as
        - Consulta este glosario cuando encuentres una abreviaci√≥n desconocida
        - Las f√≥rmulas muestran c√≥mo se calculan las m√©tricas
        """)

    with tab2:
        st.header("üìä Cuenta de Resultados Proyectada (P&L)")
        
        if pyl is not None and not pyl.empty:
            # M√©tricas resumen
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                crecimiento_ventas = ((pyl['Ventas'].iloc[-1] / pyl['Ventas'].iloc[0]) ** (1/4) - 1) * 100
                st.metric("CAGR Ventas", f"{crecimiento_ventas:.1f}%")
            
            with col2:
                margen_ebitda_promedio = pyl['EBITDA %'].mean()
                st.metric("Margen EBITDA Promedio", f"{margen_ebitda_promedio:.1f}%")
            
            with col3:
                margen_neto_promedio = pyl['Beneficio Neto %'].mean()
                st.metric("Margen Neto Promedio", f"{margen_neto_promedio:.1f}%")
            
            with col4:
                beneficio_acumulado = pyl['Beneficio Neto'].sum()
                st.metric("Beneficio Acumulado", f"{get_simbolo_moneda()}{beneficio_acumulado:,.0f}")
            
            # Mostrar tabla
            st.markdown("---")
            pyl_display = pyl.copy()
            for col in pyl_display.columns:
                if col != 'A√±o' and '%' not in col:
                    pyl_display[col] = pyl_display[col].apply(lambda x: f"{get_simbolo_moneda()}{x:,.0f}".replace(",", "."))
                elif '%' in col:
                    pyl_display[col] = pyl_display[col].apply(lambda x: f"{x:.1f}%")
    
            
            st.dataframe(pyl_display, use_container_width=True, hide_index=True)
            
            # Bot√≥n de descarga
            csv = pyl.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• Descargar P&L en CSV",
                data=csv,
                file_name=f"pyl_{nombre_empresa}_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
        else:
            st.error("No hay datos de P&L disponibles")

    with tab3:
        st.header("üóÇÔ∏è Balance Proyectado")
    
        if balance is not None and not balance.empty:
            # M√©tricas principales en la parte superior
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                patrimonio_inicial = balance['patrimonio_neto'].iloc[0]
                patrimonio_final = balance['patrimonio_neto'].iloc[-1]
                crecimiento = ((patrimonio_final / patrimonio_inicial) - 1) * 100
                st.metric("Patrimonio Final", f"‚Ç¨{patrimonio_final/1000:,.0f}k", f"+{crecimiento:.1f}%")
            
            with col2:
                deuda_total_final = balance['deuda_cp'].iloc[-1] + balance['deuda_lp'].iloc[-1]
                st.metric("Deuda Total Final", f"‚Ç¨{deuda_total_final/1000:,.0f}k")
            
            with col3:
                ratio_deuda_pat = deuda_total_final / patrimonio_final if patrimonio_final > 0 else 0
                st.metric("Deuda/Patrimonio", f"{ratio_deuda_pat:.2f}x")
            
            with col4:
                total_activos_final = balance['total_activo'].iloc[-1]
                st.metric("Total Activos", f"‚Ç¨{total_activos_final/1000:,.0f}k")
            
            # Tabla principal
            st.subheader("üìä Evoluci√≥n del Balance")

            # Preparar datos con formato
            balance_tabla = pd.DataFrame({
                'A√±o': balance['a√±o'],
                # ACTIVO NO CORRIENTE
                'Activo Fijo Neto': balance['activo_fijo_neto'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Activos Intangibles': balance.get('activos_intangibles', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Inversiones LP': balance.get('inversiones_lp', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Otros Act. NC': balance.get('otros_activos_nc', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                # ACTIVO CORRIENTE
                'Tesorer√≠a': balance['tesoreria'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Clientes': balance['clientes'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Inventario': balance['inventario'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Inversiones CP': balance.get('inversiones_cp', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Gastos Anticipados': balance.get('gastos_anticipados', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Otros Act. C': balance.get('otros_activos_corrientes', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Otros Activos': balance.get('otros_activos', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'TOTAL ACTIVO': balance['total_activo'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                # PASIVO Y PATRIMONIO
                'Proveedores': balance['proveedores'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Deuda CP': balance['deuda_cp'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Deuda LP': balance['deuda_lp'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Otros Pasivos': balance.get('otros_pasivos', 0).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Total Pasivo': (balance['proveedores'] + balance['deuda_cp'] + balance['deuda_lp'] + balance.get('otros_pasivos', 0)).apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Patrimonio Neto': balance['patrimonio_neto'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'TOTAL P+PN': balance['total_pasivo_pn'].apply(lambda x: f"‚Ç¨{x:,.0f}".replace(",", ".")),
                'Cuadre': (balance['total_activo'] - balance['total_pasivo_pn']).apply(lambda x: "‚úÖ" if abs(x) < 1 else f"‚ùå {x:,.0f}")
            })

            
            st.dataframe(balance_tabla, use_container_width=True, hide_index=True)
            
            # Bot√≥n de descarga CSV con formato europeo
            # Diagn√≥stico de Gesti√≥n de Tesorer√≠a
            with st.expander("üìä Diagn√≥stico de Gesti√≥n de Tesorer√≠a"):
                st.info("An√°lisis de la pol√≠tica de inversiones a largo plazo basada en excesos de tesorer√≠a")
                
                # Obtener datos del modelo para el diagn√≥stico
                fase_empresa = modelo.fase_empresa if hasattr(modelo, 'fase_empresa') else 'No determinada'
                
                # Crear DataFrame con el an√°lisis a√±o por a√±o
                diagnostico_data = []
                
                for a√±o in range(1, 6):
                    if a√±o <= len(balance):
                        tesoreria = balance.iloc[a√±o-1]['tesoreria']
                        inversiones_lp = balance.iloc[a√±o-1]['inversiones_lp']
                        
                        # Estimar tesorer√≠a m√≠nima (simplificado para UI)
                        ingresos_a√±o = modelo.pyl.iloc[a√±o-1]['ingresos'] if hasattr(modelo, 'pyl') else 0
                        tesoreria_minima_est = ingresos_a√±o * 0.025  # 2.5% ventas - m√°s realista
                        
                        # Calcular m√∫ltiplo seg√∫n fase
                        multiplo_objetivo = {
                            'crecimiento': 1.2,
                            'transicion': 1.5,
                            'madura': 2.0
                        }.get(fase_empresa, 1.5)
                        
                        tesoreria_objetivo = tesoreria_minima_est * multiplo_objetivo
                        exceso = tesoreria - tesoreria_objetivo
                        
                        diagnostico_data.append({
                            'A√±o': a√±o,
                            'Tesorer√≠a': f"‚Ç¨{tesoreria:,.0f}".replace(",", "."),
                            'Tesorer√≠a M√≠nima': f"‚Ç¨{tesoreria_minima_est:,.0f}".replace(",", "."),
                            'Tesorer√≠a Objetivo': f"‚Ç¨{tesoreria_objetivo:,.0f}".replace(",", "."),
                            'Exceso/(D√©ficit)': f"‚Ç¨{exceso:,.0f}".replace(",", "."),
                            'Inversiones LP': f"‚Ç¨{inversiones_lp:,.0f}".replace(",", "."),
                            'Acci√≥n': (
                    'Invertir exceso' if exceso > ingresos_a√±o * 0.05 else
                    'URGENTE: Incrementar liquidez' if tesoreria < tesoreria_minima_est else
                    'Mejorar liquidez' if tesoreria < tesoreria_objetivo * 0.8 else
                    'Mantener liquidez'
                )
                        })
                
                diagnostico_df = pd.DataFrame(diagnostico_data)
                st.dataframe(diagnostico_df, use_container_width=True, hide_index=True)
                
                # Explicaci√≥n de la pol√≠tica
                st.markdown(f"""
                **Pol√≠tica de Tesorer√≠a - Empresa {fase_empresa.upper()}:**
                - Tesorer√≠a m√≠nima operativa: ~2.5% de ventas (benchmark industrial)
                - M√∫ltiplo objetivo: {multiplo_objetivo}x sobre m√≠nimo
                - Excesos > 5% ventas ‚Üí Inversi√≥n en activos LP
                - Excesos < 5% ventas ‚Üí Mantener liquidez
                
                *Nota: Las Inversiones LP son activos financieros (bonos, participaciones), no activo fijo.*
                """)
            
            # Gr√°fico de evoluci√≥n
            with st.expander("üìà Ver Gr√°fico de Evoluci√≥n"):
                fig_data = pd.DataFrame({
                    'A√±o': balance['a√±o'],
                    'Total Activos': balance['total_activo']/1000,
                    'Patrimonio Neto': balance['patrimonio_neto']/1000,
                    'Deuda Total': (balance['deuda_cp'] + balance['deuda_lp'])/1000
                })
                st.line_chart(fig_data.set_index('A√±o'))
        else:
            st.warning("No hay datos de balance proyectado disponibles")
    
    with tab4:
        st.header("üìà Analytics")
        
        if pyl is not None and not pyl.empty:
            # Gr√°fico de Ventas y EBITDA
            st.subheader("üìä Evoluci√≥n de Ventas y EBITDA")
            
            fig1 = go.Figure()
            fig1.add_trace(go.Bar(
                x=pyl['A√±o'],
                y=pyl['Ventas'],
                name='Ventas',
                marker_color='lightblue'
            ))
            fig1.add_trace(go.Bar(
                x=pyl['A√±o'],
                y=pyl['EBITDA'],
                name='EBITDA',
                marker_color='darkblue'
            ))
            fig1.update_layout(
                barmode='group',
                title='Evoluci√≥n de Ventas y EBITDA',
                xaxis_title='A√±o',
                yaxis_title='Importe (‚Ç¨)',
                hovermode='x unified',
                height=400
            )
            st.plotly_chart(fig1, use_container_width=True)
            
            # Gr√°fico de M√°rgenes
            st.subheader("üìà Evoluci√≥n de M√°rgenes")
            
            fig2 = go.Figure()
            fig2.add_trace(go.Scatter(
                x=pyl['A√±o'],
                y=pyl['Margen Bruto %'],
                mode='lines+markers',
                name='Margen Bruto %',
                line=dict(color='green')
            ))
            fig2.add_trace(go.Scatter(
                x=pyl['A√±o'],
                y=pyl['EBITDA %'],
                mode='lines+markers',
                name='Margen EBITDA %',
                line=dict(color='blue')
            ))
            fig2.add_trace(go.Scatter(
                x=pyl['A√±o'],
                y=pyl['Beneficio Neto %'],
                mode='lines+markers',
                name='Margen Neto %',
                line=dict(color='red')
            ))
            fig2.update_layout(
                title='Evoluci√≥n de M√°rgenes',
                xaxis_title='A√±o',
                yaxis_title='Porcentaje (%)',
                hovermode='x unified',
                height=400
            )
            st.plotly_chart(fig2, use_container_width=True)
            
            # Free Cash Flow si existe
            if cash_flow is not None and not cash_flow.empty:
                st.markdown("---")
                # A√ëADIR EN LA SECCI√ìN DE ANALYTICS, ANTES DE MOSTRAR LA TABLA DE FREE CASH FLOW:√ß

                with st.expander("üí∞ ¬øQu√© es el Free Cash Flow y por qu√© es crucial para su empresa?"):
                    st.markdown("""
                    ### Free Cash Flow: La M√©trica Clave de Generaci√≥n de Valor
                    
                    El **Free Cash Flow (FCF)** representa el efectivo real que genera su empresa despu√©s de cubrir todas las 
                    necesidades operativas y de inversi√≥n. Es el dinero disponible para remunerar a accionistas, reducir deuda 
                    o reinvertir en crecimiento.
                    
                    #### üìä Metodolog√≠a de C√°lculo
                    
                    **Punto de partida: EBITDA**
                    - Beneficio operativo antes de intereses, impuestos, depreciaci√≥n y amortizaci√≥n
                    - Refleja la capacidad operativa pura del negocio
                    
                    **Ajustes para llegar al efectivo real:**
                    
                    **1. (-) Impuestos sobre el beneficio operativo**
                    - Impacto fiscal sobre las operaciones (sin considerar el escudo fiscal de la deuda)
                    
                    **2. (-) CAPEX (Inversiones en activos)**
                    - **Con plan de inversiones definido**: Utilizamos sus proyecciones espec√≠ficas
                    - **Sin plan definido**: Aplicamos benchmarks sectoriales basados en mejores pr√°cticas:
                    
                    | Sector | CAPEX/Ventas | Justificaci√≥n |
                    |--------|--------------|---------------|
                    | Industrial | 10% | Maquinaria pesada, instalaciones |
                    | Automoci√≥n | 8% | Equipamiento especializado |
                    | Hosteler√≠a | 6% | Renovaciones, equipamiento |
                    | Retail | 5% | Modernizaci√≥n puntos de venta |
                    | Servicios | 3.5% | Inversi√≥n moderada |
                    | Tecnolog√≠a | 3% | Principalmente equipos IT |
                    | Ecommerce | 2.5% | Infraestructura digital |
                    | Consultor√≠a | 2% | Inversi√≥n m√≠nima |
                    
                    **3. (-) Variaci√≥n del Capital de Trabajo**
                    - Inversi√≥n en el crecimiento: inventarios, cr√©dito a clientes, financiaci√≥n de proveedores
                    - Un crecimiento r√°pido requiere m√°s capital de trabajo
                    
                    #### üí° Interpretaci√≥n para la Toma de Decisiones
                    
                    **FCF Positivo y Creciente**
                    - ‚úÖ Negocio autosuficiente financieramente
                    - ‚úÖ Capacidad para distribuir dividendos
                    - ‚úÖ Posibilidad de reducir deuda
                    - ‚úÖ Recursos para adquisiciones estrat√©gicas
                    
                    **FCF Negativo**
                    - ‚ö†Ô∏è Requiere financiaci√≥n externa
                    - ‚ö†Ô∏è Com√∫n en fases de alto crecimiento
                    - ‚ö†Ô∏è Debe ser temporal y planificado
                    
                    #### üéØ Por Qu√© los Inversores se Fijan en el FCF
                    
                    1. **Valoraci√≥n DCF**: El valor de su empresa es el valor presente de los FCF futuros
                    2. **Calidad de beneficios**: Distingue entre beneficios contables y generaci√≥n real de caja
                    3. **Sostenibilidad**: Indica si el crecimiento es financieramente viable
                    4. **Flexibilidad estrat√©gica**: Mayor FCF = m√°s opciones estrat√©gicas
                    
                    #### üìà Benchmarks de Referencia
                    
                    - **FCF Yield** (FCF/Valor Empresa): >5% se considera atractivo
                    - **Conversi√≥n de EBITDA a FCF**: >40% indica eficiencia operativa
                    - **Crecimiento del FCF**: Debe superar el crecimiento del PIB + inflaci√≥n
                    
                    *Esta metodolog√≠a est√° alineada con los est√°ndares utilizados por fondos de inversi√≥n y banca de inversi√≥n 
                    para evaluar la generaci√≥n de valor empresarial.*
                    """)
                st.subheader("üí∞ Free Cash Flow Proyectado")
                
                # Usar FCF de McKinsey si ese m√©todo est√° activo
                if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state:
                    # Convertir fcf_proyectados a DataFrame
                    fcf_data_mck = st.session_state.resultado_mck.get('fcf_proyectados', [])
                    if fcf_data_mck:
                        fcf_dict = {
                            'A√±o': list(range(1, len(fcf_data_mck) + 1)),
                            'NOPLAT': [f['noplat'] for f in fcf_data_mck],
                            'Œî Invested Capital': [f['delta_ic'] for f in fcf_data_mck],
                            'Free Cash Flow': [f['fcf'] for f in fcf_data_mck],
                            'ROIC (%)': [f['roic'] for f in fcf_data_mck]
                        }
                        fcf_display = pd.DataFrame(fcf_dict)
                    else:
                        fcf_display = cash_flow.copy()
                else:
                    fcf_display = cash_flow.copy()
                for col in fcf_display.columns:
                    if col not in ['A√±o']:
                        if col == 'ROIC (%)':
                            fcf_display[col] = fcf_display[col].apply(lambda x: f"{x:.1f}%")
                        else:
                            fcf_display[col] = fcf_display[col].apply(lambda x: f"{get_simbolo_moneda()}{x:,.0f}".replace(",", "."))
                st.dataframe(fcf_display, use_container_width=True, hide_index=True)
                # M√©tricas de FCF - Usar valores McKinsey si est√° activo
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state:
                        fcf_data_mck = st.session_state.resultado_mck.get('fcf_proyectados', [])
                        if fcf_data_mck:
                            fcf_valores = [f['fcf'] for f in fcf_data_mck]
                            fcf_total = sum(fcf_valores)
                        else:
                            fcf_total = cash_flow['Free Cash Flow'].sum()
                    else:
                        fcf_total = cash_flow['Free Cash Flow'].sum()
                    st.metric("FCF Acumulado", f"{get_simbolo_moneda()}{fcf_total:,.0f}")
                with col2:
                    if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state:
                        fcf_data_mck = st.session_state.resultado_mck.get('fcf_proyectados', [])
                        if fcf_data_mck:
                            fcf_valores = [f['fcf'] for f in fcf_data_mck]
                            fcf_promedio = sum(fcf_valores) / len(fcf_valores) if fcf_valores else 0
                        else:
                            fcf_promedio = cash_flow['Free Cash Flow'].mean()
                    else:
                        fcf_promedio = cash_flow['Free Cash Flow'].mean()
                    st.metric("FCF Promedio", f"{get_simbolo_moneda()}{fcf_promedio:,.0f}")
                with col3:
                    if st.session_state.get('metodo_valoracion') == 'mckinsey' and 'resultado_mck' in st.session_state:
                        fcf_data_mck = st.session_state.resultado_mck.get('fcf_proyectados', [])
                        if fcf_data_mck and len(fcf_data_mck) >= 5:
                            fcf_a√±o5 = fcf_data_mck[-1]['fcf']
                        else:
                            fcf_a√±o5 = cash_flow['Free Cash Flow'].iloc[-1] if not cash_flow.empty else 0
                    else:
                        fcf_a√±o5 = cash_flow['Free Cash Flow'].iloc[-1] if not cash_flow.empty else 0
                    st.metric("FCF A√±o 5", f"{get_simbolo_moneda()}{fcf_a√±o5:,.0f}")
                
                # Indicadores de Eficiencia FCF
                st.markdown("---")
                st.subheader("üìä Indicadores de Eficiencia FCF")
                
                col1_ind, col2_ind, col3_ind = st.columns(3)
                
                with col1_ind:
                    # FCF Yield
                    valor_empresa = st.session_state.get("resultado_mck", {}).get("enterprise_value", 0) if st.session_state.get('metodo_valoracion') == 'mckinsey' else st.session_state.datos_guardados.get("valoracion", {}).get("valor_empresa", 0)
                    if valor_empresa > 0 and fcf_promedio > 0:
                        fcf_yield = (fcf_promedio / valor_empresa) * 100
                        color_yield = "üü¢" if fcf_yield > 5 else "üü°" if fcf_yield > 3 else "üî¥"
                        st.metric("FCF Yield", f"{fcf_yield:.1f}%", f"{color_yield} Target: >5%", help="Free Cash Flow / Enterprise Value. Mide el retorno de caja sobre el valor de la empresa")
                    
                with col2_ind:
                    # Conversi√≥n EBITDA a FCF
                    ebitda_promedio = pyl['EBITDA'].mean() if 'EBITDA' in pyl.columns else 0
                    if ebitda_promedio > 0 and fcf_promedio > 0:
                        conversion_rate = (fcf_promedio / ebitda_promedio) * 100
                        color_conv = "üü¢" if conversion_rate > 40 else "üü°" if conversion_rate > 30 else "üî¥"
                        st.metric("EBITDA ‚Üí FCF", f"{conversion_rate:.1f}%", f"{color_conv} Target: >40%", help="Porcentaje del EBITDA que se convierte en flujo de caja libre. Indica eficiencia operativa")
                
                with col3_ind:
                    # Crecimiento FCF
                    if fcf_data_mck and len(fcf_data_mck) >= 2:
                        fcf_inicial = fcf_data_mck[0]['fcf']
                        fcf_final = fcf_data_mck[-1]['fcf']
                        a√±os_fcf = len(fcf_data_mck)
                        print(f"DEBUG FCF: fcf_inicial={fcf_inicial}, fcf_final={fcf_final}, a√±os={a√±os_fcf}")
                        cagr_fcf = ((fcf_final / fcf_inicial) ** (1/(a√±os_fcf - 1)) - 1) * 100 if fcf_inicial > 0 and a√±os_fcf > 1 else 0
                        color_growth = "üü¢" if cagr_fcf > 5 else "üü°" if cagr_fcf > 2 else "üî¥"
                        st.metric("CAGR FCF", f"{cagr_fcf:.1f}%", f"{color_growth} Target: >PIB+Inflaci√≥n", help="Tasa de crecimiento anual compuesta del FCF. Debe superar el crecimiento econ√≥mico")
            
            # Financiaci√≥n del Capital de Trabajo si existe
            if 'financiacion_df' in st.session_state.datos_guardados:
                financiacion_df = st.session_state.datos_guardados['financiacion_df']
                if financiacion_df is not None and not financiacion_df.empty:
                    st.markdown("---")
                    st.subheader("üí≥ Financiaci√≥n del Capital de Trabajo")
                    
                    # M√©tricas
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        limite_total = financiacion_df['L√≠mite P√≥liza'].iloc[-1]
                        st.metric("L√≠mite de Cr√©dito A√±o 5", f"{get_simbolo_moneda()}{limite_total:,.0f}")
                    with col2:
                        uso_promedio = financiacion_df['Uso P√≥liza'].mean()
                        st.metric("Uso Promedio", f"{get_simbolo_moneda()}{uso_promedio:,.0f}")
                    with col3:
                        coste_total = financiacion_df['Coste P√≥liza'].sum()
                        st.metric("Coste Total", f"{get_simbolo_moneda()}{coste_total:,.0f}")
                    
                    # Tabla
                    financiacion_display = financiacion_df.copy()
                    for col in financiacion_display.columns:
                        if col != 'A√±o':
                            financiacion_display[col] = financiacion_display[col].apply(
                                lambda x: f"{get_simbolo_moneda()}{x:,.0f}")
                    
                    st.dataframe(financiacion_display, use_container_width=True)
        else:
            st.error("No hay datos disponibles para an√°lisis")

# Si hay datos guardados pero no se est√° generando nueva proyecci√≥n, mostrarlos
if not generar_proyeccion and st.session_state.proyeccion_generada and st.session_state.datos_guardados:
    # Recuperar datos guardados
    datos = st.session_state.datos_guardados
    
    # Compatibilidad con la nueva estructura
    pyl = datos.get('pyl', datos.get('proyecciones', {}).get('pyl'))
    balance = datos.get('balance', datos.get('proyecciones', {}).get('balance'))
    cash_flow = datos.get('cash_flow', datos.get('proyecciones', {}).get('cash_flow'))
    ratios = datos.get('ratios', datos.get('proyecciones', {}).get('ratios'))
    valoracion = datos.get('valoracion', datos.get('proyecciones', {}).get('valoracion'))
    metricas = datos.get('metricas', {})
    analisis_ia = st.session_state.datos_guardados.get('analisis_ia', {})
    resumen = datos.get('resumen', {})
    nombre_empresa = datos.get('nombre_empresa', 'Empresa')
    
    # Para mantener compatibilidad con c√≥digo antiguo
    if 'wc_df' in datos:
        wc_df = datos['wc_df']
        financiacion_df = datos['financiacion_df']
        fcf_df = datos['fcf_df']
    else:
        # Usar los nuevos DataFrames
        wc_df = None
        financiacion_df = None
        fcf_df = cash_flow

    # Mostrar los mismos resultados

    # Mostrar los mismos resultados
    st.success("‚úÖ Mostrando proyecci√≥n guardada")

    # Bot√≥n PDF simple al final de la generaci√≥n
    st.markdown("---")
    # Bot√≥n PDF mejorado
    st.markdown("---")
    col1, col2, col3 = st.columns([1,2,1])
    with col2:
                        
                        # Crear un nombre √∫nico para el archivo
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                        filename = f"BusinessPlan_{timestamp}.pdf"
                        
    # Pantalla de bienvenida cuando no hay proyecci√≥n
    st.info("üëà Introduce los datos de tu empresa en la barra lateral y pulsa **Generar Proyecci√≥n**")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style="text-align: center; color: #64748B;">
    </div>
    """,
    unsafe_allow_html=True
)
            


def compilar_datos_para_ia(datos_empresa, pyl, balance, ratios, valoracion, campos_estrategicos):
    """
    Compila todos los datos necesarios para el prompt de generaci√≥n del informe IA
    """
    datos_ia = {
        # Datos b√°sicos
        'nombre_empresa': datos_empresa.get('nombre_empresa', 'Empresa'),
        'sector': datos_empresa.get('sector', 'No especificado'),
        'a√±o_fundacion': datos_empresa.get('a√±o_fundacion', ''),
        
        # Datos financieros hist√≥ricos
        'ventas_historicas': pyl['Ventas'].tolist() if pyl is not None else [],
        'ebitda_historico': pyl['EBITDA'].tolist() if pyl is not None else [],
        'margen_ebitda': ratios['margen_ebitda'].iloc[-1] if ratios is not None else 0,
        
        # Proyecciones
        'ventas_proyectadas': pyl['Ventas'].iloc[-5:].tolist() if pyl is not None else [],
        'ebitda_proyectado': pyl['EBITDA'].iloc[-5:].tolist() if pyl is not None else [],
        'fcf_proyectado': pyl.get('FCF', [0]*5),
        
        # Valoraci√≥n
        'valor_empresa': valoracion.get('enterprise_value', 0),
        'wacc': valoracion.get('wacc', 0.1),
        'valor_terminal': valoracion.get('terminal_value', 0),
        
        # Nuevos campos estrat√©gicos
        'modelo_negocio': campos_estrategicos.get('modelo_negocio', ''),
        'posicionamiento': campos_estrategicos.get('posicionamiento_precio', ''),
        'competidores': campos_estrategicos.get('competidores_top3', ''),
        'vision_corto': campos_estrategicos.get('vision_corto_plazo', ''),
        'vision_medio': campos_estrategicos.get('vision_medio_plazo', ''),
        'vision_largo': campos_estrategicos.get('vision_largo_plazo', ''),
        'ventaja_competitiva': campos_estrategicos.get('ventaja_competitiva_principal', ''),
        'riesgos': campos_estrategicos.get('principales_riesgos', ''),
        
        # Ratios clave
        'roe': ratios['roe'].iloc[-1] if ratios is not None else 0,
        'roce': ratios['roce'].iloc[-1] if ratios is not None else 0,
        'liquidez': ratios.get('liquidez', 1.5),
        'deuda_ebitda': ratios.get('deuda_neta_ebitda', 2.0),
    }
    
    return datos_ia



def generar_prompt_informe_ia(datos_ia):
    """
    Genera el prompt estructurado para crear el informe ejecutivo con IA
    """
    prompt = f"""
    INSTRUCCI√ìN: Genera un Informe Ejecutivo de Valoraci√≥n profesional como Analista Senior de Inversi√≥n.
    
    DATOS DE LA EMPRESA:
    - Nombre: {datos_ia['nombre_empresa']}
    - Sector: {datos_ia['sector']}
    - Modelo de Negocio: {datos_ia['modelo_negocio']}
    - Posicionamiento: {datos_ia['posicionamiento']}
    
    POSICI√ìN COMPETITIVA:
    - Competidores: {datos_ia['competidores']}
    - Ventaja Competitiva: {datos_ia['ventaja_competitiva']}
    - Riesgos Principales: {datos_ia['riesgos']}
    
    VISI√ìN ESTRAT√âGICA:
    - Corto Plazo (1 a√±o): {datos_ia['vision_corto']}
    - Medio Plazo (3 a√±os): {datos_ia['vision_medio']}
    - Largo Plazo (5+ a√±os): {datos_ia['vision_largo']}
    
    M√âTRICAS FINANCIERAS:
    - Ventas Actuales: ‚Ç¨{datos_ia['ventas_historicas'][-1] if datos_ia['ventas_historicas'] else 0:,.0f}
    - EBITDA Actual: ‚Ç¨{datos_ia['ebitda_historico'][-1] if datos_ia['ebitda_historico'] else 0:,.0f}
    - Margen EBITDA: {datos_ia['margen_ebitda']:.1f}%
    - ROE: {datos_ia['roe']:.1f}%
    - ROCE: {datos_ia['roce']:.1f}%
    - Ratio Deuda/EBITDA: {datos_ia['deuda_ebitda']:.1f}x
    
    VALORACI√ìN DCF:
    - Valor de la Empresa: ‚Ç¨{datos_ia['valor_empresa']:,.0f}
    - WACC: {datos_ia['wacc']:.1f}%
    
    GENERA UN INFORME CON:
    1. Resumen Ejecutivo y Tesis de Inversi√≥n
    2. An√°lisis del Modelo de Negocio y Posicionamiento
    3. Evaluaci√≥n de la Ventaja Competitiva
    4. An√°lisis de Riesgos y Mitigaciones
    5. Proyecci√≥n de Crecimiento basada en la Visi√≥n Estrat√©gica
    6. Valoraci√≥n y Recomendaci√≥n Final
    
    Tono: Profesional, anal√≠tico y directo. M√°ximo 2 p√°ginas.
    """
    
    return prompt

